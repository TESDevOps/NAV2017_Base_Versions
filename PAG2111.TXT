OBJECT Page 2111 O365 Sales Invoice Line Subp.
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Invoice Line;
               ENG=Invoice Line];
    SourceTable=Table37;
    PageType=ListPart;
    OnInit=BEGIN
             SalesSetup.GET;
             Currency.InitRoundingPrecision;
           END;

    OnOpenPage=BEGIN
                 CardOpen := TRUE;
               END;

    OnClosePage=BEGIN
                  CardOpen := FALSE;
                END;

    OnAfterGetRecord=VAR
                       TaxDetail@1000 : Record 322;
                     BEGIN
                       TaxRate := TaxDetail.GetSalesTaxRate("Tax Area Code","Tax Group Code");
                       LocalDescription := Description;
                     END;

    OnNewRecord=VAR
                  SalesLine@1000 : Record 37;
                BEGIN
                  Type := Type::Item;
                  SalesLine.SETRANGE("Document Type","Document Type");
                  SalesLine.SETRANGE("Document No.","Document No.");
                  IF SalesLine.FINDLAST THEN;
                  "Line No." := SalesLine."Line No." + 10000;
                  LocalDescription := '';
                  TaxRate := 0;
                END;

    OnAfterGetCurrRecord=BEGIN
                           CalculateTotals;
                           CurrPageEditable := CurrPage.EDITABLE;

                           DescriptionSelected := Description <> '';
                         END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the record.;
                           ENG=Specifies the number of the record.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="No.";
                Visible=FALSE;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;
                            }

    { 12  ;2   ;Field     ;
                Lookup=Yes;
                CaptionML=[ENU=Description;
                           ENG=Description];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=LocalDescription;
                Importance=Promoted;
                Visible=CardOpen;
                Editable=CurrPageEditable;
                OnValidate=BEGIN
                             SetHideValidationDialog(TRUE);
                             VALIDATE(Description,LocalDescription);

                             IF IsLookupRequested THEN BEGIN
                               IF NOT LookupDescription(LocalDescription) THEN
                                 ERROR('');
                             END ELSE
                               LocalDescription := Description;

                             RedistributeTotalsOnAfterValidate;
                             IF LocalDescription <> '' THEN
                               DescriptionSelected := TRUE;
                           END;

                OnLookup=BEGIN
                           LookupDescription(Text);
                         END;

                ShowMandatory=TRUE }

    { 13  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the item or service on the line.;
                           ENG=Specifies a description of the item or service on the line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Visible=NOT CardOpen;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;
                            }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the unit of measure code for the item.;
                           ENG=Specifies the unit of measure code for the item.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Unit of Measure";
                Editable=DescriptionSelected;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;
                            }

    { 6   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Quantity;
                Editable=DescriptionSelected;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;
                            }

    { 7   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the price for one unit on the sales line.;
                           ENG=Specifies the price for one unit on the sales line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Unit Price";
                Editable=DescriptionSelected;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;
                            }

    { 11  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the tax group code for the tax-detail entry.;
                           ENG=Specifies the VAT group code for the VAT-detail entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Tax Group Code";
                Importance=Additional;
                Editable=DescriptionSelected;
                OnValidate=BEGIN
                             RedistributeTotalsOnAfterValidate;
                           END;
                            }

    { 8   ;2   ;Field     ;
                Name=TaxRate;
                CaptionML=[ENU=Tax %;
                           ENG=Tax %];
                ToolTipML=[ENU=Specifies the VAT % that was used on the sales or purchase lines with this VAT Identifier.;
                           ENG=Specifies the VAT % that was used on the sales or purchase lines with this VAT Identifier.];
                ApplicationArea=#Basic,#Suite;
                DecimalPlaces=0:3;
                SourceExpr=TaxRate;
                MinValue=0;
                Editable=CurrPageEditable AND DescriptionSelected;
                OnValidate=VAR
                             TaxDetail@1000 : Record 322;
                           BEGIN
                             TaxDetail.SetSalesTaxRate("Tax Area Code","Tax Group Code",TaxRate);
                             RedistributeTotalsOnAfterValidate;
                           END;
                            }

    { 9   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of amounts in the Line Amount field on the sales lines. It is used to calculate the invoice discount of the sales document.;
                           ENG=Specifies the sum of amounts in the Line Amount field on the sales lines. It is used to calculate the invoice discount of the sales document.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Editable=DescriptionSelected }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the total of the amounts in all the amount fields on the invoice, in the currency of the invoice. The amount includes VAT.;
                           ENG=Specifies the total of the amounts in all the amount fields on the invoice, in the currency of the invoice. The amount includes VAT.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Amount Including VAT";
                Editable=DescriptionSelected }

  }
  CODE
  {
    VAR
      Currency@1008 : Record 4;
      SalesSetup@1007 : Record 311;
      TotalSalesHeader@1006 : Record 36;
      TotalSalesLine@1005 : Record 37;
      DocumentTotals@1004 : Codeunit 57;
      LocalDescription@1000 : Text[50];
      VATAmount@1002 : Decimal;
      TaxRate@1009 : Decimal;
      CardOpen@1001 : Boolean;
      CurrPageEditable@1003 : Boolean;
      DescriptionSelected@1010 : Boolean;

    LOCAL PROCEDURE CalculateTotals@6();
    BEGIN
      GetTotalSalesHeader;
      IF SalesSetup."Calc. Inv. Discount" AND ("Document No." <> '') AND (TotalSalesHeader."Customer Posting Group" <> '') THEN
        CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",Rec);

      DocumentTotals.CalculateSalesTotals(TotalSalesLine,VATAmount,Rec);
    END;

    LOCAL PROCEDURE RedistributeTotalsOnAfterValidate@2();
    BEGIN
      CurrPage.SAVERECORD;

      TotalSalesHeader.GET("Document Type","Document No.");
      DocumentTotals.SalesRedistributeInvoiceDiscountAmounts(Rec,VATAmount,TotalSalesLine);
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE GetTotalSalesHeader@13();
    BEGIN
      IF NOT TotalSalesHeader.GET("Document Type","Document No.") THEN
        CLEAR(TotalSalesHeader);
      IF Currency.Code <> TotalSalesHeader."Currency Code" THEN
        IF NOT Currency.GET(TotalSalesHeader."Currency Code") THEN
          Currency.InitRoundingPrecision;
    END;

    LOCAL PROCEDURE LookupDescription@1(Text@1000 : Text) : Boolean;
    VAR
      Item@1002 : Record 27;
      O365SalesItemLookup@1001 : Page 2112;
    BEGIN
      IF Text <> '' THEN BEGIN
        Item.SETRANGE(Description,Text);
        IF Item.FINDFIRST THEN;
        Item.SETRANGE(Description);
      END;

      O365SalesItemLookup.LOOKUPMODE(TRUE);
      O365SalesItemLookup.SETRECORD(Item);

      IF O365SalesItemLookup.RUNMODAL = ACTION::LookupOK THEN BEGIN
        O365SalesItemLookup.GETRECORD(Item);
        SetHideValidationDialog(TRUE);
        LocalDescription := Item.Description;
        VALIDATE(Description,LocalDescription);
        IF LocalDescription <> '' THEN
          DescriptionSelected := TRUE;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}

