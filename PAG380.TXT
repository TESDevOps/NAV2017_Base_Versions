OBJECT Page 380 Bank Acc. Reconciliation Lines
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00,NAVGB10.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Lines;
               ENG=Lines];
    LinksAllowed=No;
    SourceTable=Table274;
    DelayedInsert=Yes;
    SourceTableView=WHERE(Statement Type=CONST(Bank Reconciliation));
    PageType=ListPart;
    AutoSplitKey=Yes;
    OnInit=BEGIN
             TotalReconciledAmountEnable := TRUE;
             ReconciledAmountEnable := TRUE;
             BalanceEnable := TRUE;
             TotalBalanceEnable := TRUE;
             TotalDiffEnable := TRUE;
           END;

    OnAfterGetRecord=BEGIN
                       SetUserInteractions;
                     END;

    OnNewRecord=BEGIN
                  IF BelowxRec THEN
                    CalcBalance(xRec."Statement Line No.")
                  ELSE
                    CalcBalance(xRec."Statement Line No." - 1);
                END;

    OnDeleteRecord=BEGIN
                     SetUserInteractions;
                   END;

    OnAfterGetCurrRecord=BEGIN
                           IF "Statement Line No." <> 0 THEN
                             CalcBalance("Statement Line No.");
                           SetUserInteractions;
                         END;

    ActionList=ACTIONS
    {
      { 7       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;Action    ;
                      Name=ShowStatementLineDetails;
                      CaptionML=[ENU=Details;
                                 ENG=Details];
                      ToolTipML=[ENU=View additional information about the document on the selected line and link to the related card.;
                                 ENG=View additional information about the document on the selected line and link to the related card.];
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page 1221;
                      RunPageLink=Data Exch. No.=FIELD(Data Exch. Entry No.),
                                  Line No.=FIELD(Data Exch. Line No.) }
      { 11      ;1   ;Action    ;
                      Name=ApplyEntries;
                      CaptionML=[ENU=&Apply Entries...;
                                 ENG=&Apply Entries...];
                      ToolTipML=[ENU=Select one or more ledger entries that you want to apply this record to so that the related posted documents are closed as paid or refunded.;
                                 ENG=Select one or more ledger entries that you want to apply this record to so that the related posted documents are closed as paid or refunded.];
                      ApplicationArea=#Basic,#Suite;
                      Enabled=ApplyEntriesAllowed;
                      Image=ApplyEntries;
                      OnAction=BEGIN
                                 ApplyEntries;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the posting date of the bank account or check ledger entry on the reconciliation line when the Suggest Lines function is used.;
                           ENG=Specifies the posting date of the bank account or cheque ledger entry on the reconciliation line when the Suggest Lines function is used.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Transaction Date";
                StyleExpr=StyleTxt }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the value date of the transaction on the bank reconciliation line.;
                           ENG=Specifies the value date of the transaction on the bank reconciliation line.];
                SourceExpr="Value Date";
                Visible=FALSE }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a number of your choice that will appear on the reconciliation line.;
                           ENG=Specifies a number of your choice that will appear on the reconciliation line.];
                SourceExpr="Document No." }

    { 21  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the check number for the transaction on the reconciliation line.;
                           ENG=Specifies the cheque number for the transaction on the reconciliation line.];
                SourceExpr="Check No." }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of ledger entry, or a difference to be reconciled on this line.;
                           ENG=Specifies the type of ledger entry, or a difference to be reconciled on this line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Type;
                OnValidate=BEGIN
                             SetUserInteractions;
                           END;
                            }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description for the transaction on the reconciliation line.;
                           ENG=Specifies a description for the transaction on the reconciliation line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                StyleExpr=StyleTxt }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the transaction on the bank's statement shown on this reconciliation line.;
                           ENG=Specifies the amount of the transaction on the bank's statement shown on this reconciliation line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Statement Amount";
                StyleExpr=StyleTxt }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount of the transaction on the reconciliation line that has been applied to a bank account or check ledger entry.;
                           ENG=Specifies the amount of the transaction on the reconciliation line that has been applied to a bank account or cheque ledger entry.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Applied Amount" }

    { 1040002;2;Field     ;
                ToolTipML=[ENU=Specifies if the amount of the transaction on the reconciliation line that has been reconciled.;
                           ENG=Specifies if the amount of the transaction on the reconciliation line that has been reconciled.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Reconciled;
                OnValidate=BEGIN
                             CurrPage.UPDATE(TRUE)
                           END;
                            }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the difference between the amount in the Statement Amount field and the amount in the Applied Amount field.;
                           ENG=Specifies the difference between the amount in the Statement Amount field and the amount in the Applied Amount field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Difference }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies whether the transaction on the bank's statement has been applied to one or more bank account or check ledger entries.;
                           ENG=Specifies whether the transaction on the bank's statement has been applied to one or more bank account or cheque ledger entries.];
                SourceExpr="Applied Entries" }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the customer or vendor who made the payment that is represented by the journal line.;
                           ENG=Specifies the name of the customer or vendor who made the payment that is represented by the journal line.];
                SourceExpr="Related-Party Name";
                Visible=FALSE }

    { 5   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies additional information on the bank statement line for the payment.;
                           ENG=Specifies additional information on the bank statement line for the payment.];
                SourceExpr="Additional Transaction Info";
                Visible=FALSE }

    { 16  ;1   ;Group      }

    { 19  ;2   ;Field     ;
                Name=TotalDiff;
                CaptionML=[ENU=Total Difference;
                           ENG=Total Difference];
                ToolTipML=[ENU=Specifies the total amount of the Difference field for all the lines on the bank reconciliation.;
                           ENG=Specifies the total amount of the Difference field for all the lines on the bank reconciliation.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalDiff + Difference;
                AutoFormatType=1;
                AutoFormatExpr=GetCurrencyCode;
                Enabled=TotalDiffEnable;
                Editable=FALSE }

    { 13  ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite }

    { 26  ;2   ;Field     ;
                Name=Balance;
                CaptionML=[ENU=Balance;
                           ENG=Balance];
                ToolTipML=[ENU=Specifies a balance, consisting of the Balance Last Statement field, plus the balance that has accumulated in the Statement Amount field.;
                           ENG=Specifies a balance, consisting of the Balance Last Statement field, plus the balance that has accumulated in the Statement Amount field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Balance + "Statement Amount";
                AutoFormatType=1;
                AutoFormatExpr=GetCurrencyCode;
                Enabled=BalanceEnable;
                Editable=FALSE }

    { 17  ;2   ;Field     ;
                Name=TotalBalance;
                CaptionML=[ENU=Total Balance;
                           ENG=Total Balance];
                ToolTipML=[ENU=Specifies the accumulated balance of the bank reconciliation, which consists of the Balance Last Statement field, plus the balance in the Statement Amount field.;
                           ENG=Specifies the accumulated balance of the bank reconciliation, which consists of the Balance Last Statement field, plus the balance in the Statement Amount field.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalBalance + "Statement Amount";
                AutoFormatType=1;
                AutoFormatExpr=GetCurrencyCode;
                Enabled=TotalBalanceEnable;
                Editable=FALSE }

    { 1040000;2;Field     ;
                Name=ReconciledAmount;
                CaptionML=[ENU=Reconciled;
                           ENG=Reconciled];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ReconciledAmount;
                Enabled=ReconciledAmountEnable;
                Editable=FALSE }

    { 1040004;2;Field     ;
                Name=TotalReconciledAmount;
                CaptionML=[ENU=Total Reconciled;
                           ENG=Total Reconciled];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TotalReconciledAmount;
                Enabled=TotalReconciledAmountEnable;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      BankAccRecon@1000 : Record 273;
      StyleTxt@1005 : Text;
      TotalDiff@1002 : Decimal;
      Balance@1003 : Decimal;
      TotalBalance@1004 : Decimal;
      ReconciledAmount@1040002 : Decimal;
      TotalReconciledAmount@1040001 : Decimal;
      UpdateAllowed@1040000 : Boolean;
      TotalDiffEnable@19038859 : Boolean INDATASET;
      TotalBalanceEnable@19047480 : Boolean INDATASET;
      BalanceEnable@19079599 : Boolean INDATASET;
      ReconciledAmountEnable@19011634 : Boolean INDATASET;
      TotalReconciledAmountEnable@19010505 : Boolean INDATASET;
      ApplyEntriesAllowed@1001 : Boolean;

    LOCAL PROCEDURE CalcBalance@3(BankAccReconLineNo@1000 : Integer);
    VAR
      TempBankAccReconLine@1001 : Record 274;
    BEGIN
      IF BankAccRecon.GET("Statement Type","Bank Account No.","Statement No.") THEN;

      TempBankAccReconLine.COPY(Rec);

      TotalDiff := -Difference;
      IF TempBankAccReconLine.CALCSUMS(Difference) THEN BEGIN
        TotalDiff := TotalDiff + TempBankAccReconLine.Difference;
        TotalDiffEnable := TRUE;
      END ELSE
        TotalDiffEnable := FALSE;

      TotalBalance := BankAccRecon."Balance Last Statement" - "Statement Amount";
      IF TempBankAccReconLine.CALCSUMS("Statement Amount") THEN BEGIN
        TotalBalance := TotalBalance + TempBankAccReconLine."Statement Amount";
        TotalBalanceEnable := TRUE;
      END ELSE
        TotalBalanceEnable := FALSE;

      Balance := BankAccRecon."Balance Last Statement" - "Statement Amount";
      TempBankAccReconLine.SETRANGE("Statement Line No.",0,BankAccReconLineNo);
      IF TempBankAccReconLine.CALCSUMS("Statement Amount") THEN BEGIN
        Balance := Balance + TempBankAccReconLine."Statement Amount";
        BalanceEnable := TRUE;
      END ELSE
        BalanceEnable := FALSE;

      TempBankAccReconLine.SETCURRENTKEY(Reconciled);
      TempBankAccReconLine.SETRANGE(Reconciled,TRUE);
      IF TempBankAccReconLine.CALCSUMS("Statement Amount") THEN BEGIN
        ReconciledAmount := TempBankAccReconLine."Statement Amount";
        ReconciledAmountEnable := TRUE;
      END ELSE
        ReconciledAmountEnable := FALSE;

      TempBankAccReconLine.SETRANGE("Statement Line No.");
      IF TempBankAccReconLine.CALCSUMS("Statement Amount") THEN BEGIN
        TotalReconciledAmount := TempBankAccReconLine."Statement Amount";
        TotalReconciledAmountEnable := TRUE;
      END ELSE
        TotalReconciledAmountEnable := FALSE;
    END;

    LOCAL PROCEDURE ApplyEntries@5();
    VAR
      BankAccReconApplyEntries@1000 : Codeunit 374;
    BEGIN
      "Ready for Application" := TRUE;
      CurrPage.SAVERECORD;
      COMMIT;
      BankAccReconApplyEntries.ApplyEntries(Rec);
    END;

    PROCEDURE GetSelectedRecords@4(VAR TempBankAccReconciliationLine@1000 : TEMPORARY Record 274);
    VAR
      BankAccReconciliationLine@1001 : Record 274;
    BEGIN
      CurrPage.SETSELECTIONFILTER(BankAccReconciliationLine);
      IF BankAccReconciliationLine.FINDSET THEN
        REPEAT
          TempBankAccReconciliationLine := BankAccReconciliationLine;
          TempBankAccReconciliationLine.INSERT;
        UNTIL BankAccReconciliationLine.NEXT = 0;
    END;

    LOCAL PROCEDURE SetUserInteractions@2();
    BEGIN
      StyleTxt := GetStyle;
      ApplyEntriesAllowed := Type IN [Type::"Check Ledger Entry", Type::"BACS Ledger Entry", Type::"BACS Register"];
    END;

    PROCEDURE ToggleMatchedFilter@1(SetFilterOn@1000 : Boolean);
    BEGIN
      IF SetFilterOn THEN
        SETFILTER(Difference,'<>%1',0)
      ELSE
        RESET;
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

