OBJECT Page 9062 User Security Activities
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=User Security Activities;
               ENG=User Security Activities];
    SourceTable=Table9062;
    PageType=CardPart;
    RefreshOnActivate=Yes;
    OnOpenPage=VAR
                 UserSecurityStatus@1000 : Record 9062;
                 PermissionManager@1001 : Codeunit 9002;
                 RoleCenterNotificationMgt@1002 : Codeunit 1430;
               BEGIN
                 SoftwareAsAService := PermissionManager.SoftwareAsAService;
                 IF SoftwareAsAService THEN
                   NumberOfPlans := GetNumberOfPlansFromAzure;
                 UserSecurityStatus.LoadUsers;
                 RESET;
                 IF NOT GET THEN BEGIN
                   INIT;
                   INSERT;
                 END;

                 RoleCenterNotificationMgt.ShowNotifications;
               END;

  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                CaptionML=[ENU=CueContainer;
                           ENG=CueContainer];
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                CaptionML=[ENU=User Security;
                           ENG=User Security];
                GroupType=CueGroup }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Users - To review;
                           ENG=Users - To review];
                ToolTipML=[ENU=Specifies new users who have not yet been reviewed by an administrator.;
                           ENG=Specifies new users who have not yet been reviewed by an administrator.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Users - To review";
                Editable=FALSE;
                DrillDownPageID=User Security Status List }

    { 5   ;2   ;Field     ;
                CaptionML=[ENU=Users - Without Subscription Plans;
                           ENG=Users - Without Subscription Plans];
                ToolTipML=[ENU=Specifies users without subscription to use Dynamics 365 for Financials.;
                           ENG=Specifies users without subscription to use Dynamics 365 for Financials.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Users - Without Subscriptions";
                Visible=SoftwareAsAService;
                Editable=FALSE;
                DrillDownPageID=User Security Status List }

    { 4   ;2   ;Field     ;
                CaptionML=[ENU=Users - Not Group Members;
                           ENG=Users - Not Group Members];
                ToolTipML=[ENU=Specifies users who have not yet been reviewed by an administrator.;
                           ENG=Specifies users who have not yet been reviewed by an administrator.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Users - Not Group Members";
                Visible=SoftwareAsAService;
                Editable=FALSE;
                DrillDownPageID=User Security Status List }

    { 6   ;2   ;Field     ;
                Name=NumberOfPlans;
                CaptionML=[ENU=Number of plans;
                           ENG=Number of plans];
                SourceExpr=NumberOfPlans;
                Visible=SoftwareAsAService;
                OnDrillDown=VAR
                              Plan@1000 : Record 9004;
                              AzureADUserManagement@1001 : Codeunit 9010;
                            BEGIN
                              IF NOT SoftwareAsAService THEN
                                EXIT;
                              AzureADUserManagement.GetPlans(Plan,FALSE);
                              PAGE.RUN(PAGE::Plans,Plan)
                            END;
                             }

  }
  CODE
  {
    VAR
      SoftwareAsAService@1000 : Boolean;
      NumberOfPlans@1001 : Integer;

    LOCAL PROCEDURE GetNumberOfPlansFromAzure@9() : Integer;
    VAR
      Plan@1001 : Record 9004;
      AzureADUserManagement@1000 : Codeunit 9010;
    BEGIN
      IF NOT SoftwareAsAService THEN
        EXIT(0);
      AzureADUserManagement.GetPlans(Plan,FALSE);
      EXIT(Plan.COUNT);
    END;

    BEGIN
    END.
  }
}

