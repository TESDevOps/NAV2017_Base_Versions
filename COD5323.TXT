OBJECT Codeunit 5323 Exchange Add-in Setup
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExchangeWebServicesServer@1000 : Codeunit 5321;
      Initialized@1002 : Boolean;
      InvalidCredentialsErr@1005 : TextConst 'ENU=The provided email address and password are not valid Office 365 or Exchange credentials.;ENG=The provided email address and password are not valid Office 365 or Exchange credentials.';
      NoMailboxErr@1006 : TextConst 'ENU=An Office 365 or Exchange mailbox could not be found for this account.;ENG=An Office 365 or Exchange mailbox could not be found for this account.';
      AutodiscoverMsg@1008 : TextConst 'ENU=Searching for your mailbox.;ENG=Searching for your mailbox.';
      WelcomeSubjectTxt@1016 : TextConst '@@@=%1 - Application name;ENU=Welcome to %1 - your Business Inbox in Outlook is ready!;ENG=Welcome to %1 - your Business Inbox in Outlook is ready!';
      WelcomeEmailFromNameTxt@1014 : TextConst '@@@=%1 - Application Name;ENU=%1 Admin;ENG=%1 Admin';
      SalesEmailAddrTxt@1012 : TextConst '@@@={Locked};ENU=jim.glynn@cronuscorp.net;ENG=jim.glynn@cronuscorp.net';

    [TryFunction]
    LOCAL PROCEDURE Initialize@3(AuthenticationEmail@1003 : Text[80]);
    VAR
      ExchangeServiceSetup@1000 : Record 5324;
      AzureADMgt@1001 : Codeunit 6300;
      AccessToken@1002 : Text;
    BEGIN
      AccessToken := AzureADMgt.GetAccessToken(AzureADMgt.GetO365Resource,AzureADMgt.GetO365ResourceName,FALSE);

      IF AccessToken <> '' THEN BEGIN
        ExchangeWebServicesServer.InitializeWithOAuthToken(AccessToken,ExchangeWebServicesServer.GetEndpoint);
        IF ValidateCredentials THEN
          EXIT;
      END;

      ExchangeServiceSetup.GET;
      WITH ExchangeServiceSetup DO
        ExchangeWebServicesServer.InitializeWithCertificate("Azure AD App. ID","Azure AD App. Cert. Thumbprint",
          "Azure AD Auth. Endpoint","Exchange Service Endpoint","Exchange Resource Uri");

      ExchangeWebServicesServer.SetImpersonatedIdentity(AuthenticationEmail);
      Initialized := TRUE;
    END;

    [TryFunction]
    PROCEDURE InitializeServiceWithCredentials@2(Email@1000 : Text[80];Password@1001 : Text[50]);
    VAR
      WebCredentials@1002 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.WebCredentials";
      ProgressWindow@1004 : Dialog;
      PPEError@1003 : Text;
      ErrorText@1005 : Text;
    BEGIN
      WebCredentials := WebCredentials.WebCredentials(Email,Password);

      ProgressWindow.OPEN('#1');
      ProgressWindow.UPDATE(1,AutodiscoverMsg);

      // Try both in the case of PPE in case non-PPE credentials are entered
      IF IsPPE THEN BEGIN
        Initialized := ExchangeWebServicesServer.Initialize(Email,ExchangeWebServicesServer.PPEEndpoint,WebCredentials,FALSE) AND
          ValidateCredentials;
        PPEError := GETLASTERRORTEXT;
      END;

      // Production O365 endpoint
      IF NOT Initialized THEN BEGIN
        Initialized := ExchangeWebServicesServer.Initialize(Email,ExchangeWebServicesServer.ProdEndpoint,WebCredentials,FALSE) AND
          ValidateCredentials;
        ErrorText := GETLASTERRORTEXT
      END;

      // Autodiscover endpoint (can be slow)
      IF NOT Initialized THEN BEGIN
        Initialized := ExchangeWebServicesServer.Initialize(Email,'',WebCredentials,TRUE) AND ValidateCredentials;
        ErrorText := GETLASTERRORTEXT;
      END;

      ProgressWindow.CLOSE;

      IF NOT Initialized THEN BEGIN
        IF PPEError <> '' THEN
          ERROR(PPEError);
        ERROR(ErrorText);
      END;
    END;

    PROCEDURE CredentialsRequired@8(AuthenticationEmail@1000 : Text[80]) Required : Boolean;
    BEGIN
      Required := NOT Initialize(AuthenticationEmail);
    END;

    PROCEDURE PromptForCredentials@14() : Boolean;
    VAR
      User@1000 : Record 2000000120;
      TempOfficeAdminCredentials@1001 : TEMPORARY Record 1612;
    BEGIN
      TempOfficeAdminCredentials.INIT;
      TempOfficeAdminCredentials.INSERT;

      User.SETRANGE("User Name",USERID);
      IF User.FINDFIRST THEN BEGIN
        TempOfficeAdminCredentials.Email := User."Authentication Email";
        TempOfficeAdminCredentials.MODIFY;
      END;

      IF CredentialsRequired(TempOfficeAdminCredentials.Email) OR (TempOfficeAdminCredentials.Email = '') THEN BEGIN
        CLEARLASTERROR;
        REPEAT
          IF PAGE.RUNMODAL(PAGE::"Office 365 Credentials",TempOfficeAdminCredentials) <> ACTION::LookupOK THEN
            EXIT(FALSE);
        UNTIL InitializeServiceWithCredentials(TempOfficeAdminCredentials.Email,TempOfficeAdminCredentials.Password);
      END ELSE
        ImpersonateUser(TempOfficeAdminCredentials.Email);

      EXIT(TRUE);
    END;

    PROCEDURE ImpersonateUser@6(Email@1000 : Text[80]);
    BEGIN
      IF NOT Initialized THEN
        Initialize(Email);

      ExchangeWebServicesServer.SetImpersonatedIdentity(Email);
    END;

    PROCEDURE SampleEmailsAvailable@7() : Boolean;
    VAR
      CompanyInformationMgt@1001 : Codeunit 1306;
      PermissionManager@1002 : Codeunit 9002;
    BEGIN
      EXIT(CompanyInformationMgt.IsDemoCompany AND PermissionManager.SoftwareAsAService);
    END;

    PROCEDURE DeployAddin@13(OfficeAddin@1000 : Record 1610);
    VAR
      UserPreference@1004 : Record 1306;
      AddinManifestManagement@1003 : Codeunit 1652;
      InstructionMgt@1005 : Codeunit 1330;
      Stream@1002 : InStream;
    BEGIN
      AddinManifestManagement.GenerateManifest(OfficeAddin);
      OfficeAddin.Manifest.CREATEINSTREAM(Stream,TEXTENCODING::UTF8);
      ExchangeWebServicesServer.InstallApp(Stream);

      UserPreference.SETRANGE("Instruction Code",InstructionMgt.OfficeUpdateNotificationCode);
      UserPreference.SETRANGE("User ID",USERID);
      UserPreference.DELETEALL;
    END;

    PROCEDURE DeployAddins@4();
    VAR
      OfficeAddin@1004 : Record 1610;
    BEGIN
      IF OfficeAddin.FINDSET THEN
        REPEAT
          DeployAddin(OfficeAddin);
        UNTIL OfficeAddin.NEXT = 0;
    END;

    PROCEDURE DeploySampleEmails@5();
    VAR
      User@1003 : Record 2000000120;
      OfficeAddinSampleEmails@1001 : Codeunit 1655;
      RecipientEmail@1002 : Text;
      HTMlBody@1000 : Text;
    BEGIN
      User.SETRANGE("User Name",USERID);
      IF User.FINDFIRST THEN
        RecipientEmail := User."Authentication Email";

      HTMlBody := OfficeAddinSampleEmails.GetHTMLSampleMsg;
      ExchangeWebServicesServer.SaveHTMLEmailToInbox(STRSUBSTNO(WelcomeSubjectTxt,PRODUCTNAME.FULL),HTMlBody,
        SalesEmailAddrTxt,STRSUBSTNO(WelcomeEmailFromNameTxt,PRODUCTNAME.SHORT),RecipientEmail);
    END;

    LOCAL PROCEDURE IsPPE@10() : Boolean;
    BEGIN
      EXIT(ExchangeWebServicesServer.IsPPE)
    END;

    [TryFunction]
    LOCAL PROCEDURE ValidateCredentials@12();
    BEGIN
      IF NOT ExchangeWebServicesServer.ValidCredentials THEN BEGIN
        IF STRPOS(GETLASTERRORTEXT,'401') > 0 THEN
          ERROR(InvalidCredentialsErr);
        ERROR(NoMailboxErr);
      END;
    END;

    BEGIN
    END.
  }
}

