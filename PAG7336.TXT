OBJECT Page 7336 Whse. Shipment Subform
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Lines;
               ENG=Lines];
    MultipleNewLines=Yes;
    InsertAllowed=No;
    LinksAllowed=No;
    SourceTable=Table7321;
    DelayedInsert=Yes;
    PageType=ListPart;
    AutoSplitKey=Yes;
    OnAfterGetRecord=BEGIN
                       CrossDockMgt.CalcCrossDockedItems("Item No.","Variant Code","Unit of Measure Code","Location Code",
                         QtyCrossDockedUOMBase,
                         QtyCrossDockedAllUOMBase);
                       QtyCrossDockedUOM := 0;
                       IF  "Qty. per Unit of Measure" <> 0 THEN
                         QtyCrossDockedUOM := ROUND(QtyCrossDockedUOMBase / "Qty. per Unit of Measure",0.00001);
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1907935204;1 ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ENG=&Line];
                      Image=Line }
      { 1900724404;2 ;Action    ;
                      CaptionML=[ENU=Source &Document Line;
                                 ENG=Source &Document Line];
                      Image=SourceDocLine;
                      OnAction=BEGIN
                                 ShowSourceLine;
                               END;
                                }
      { 1903866704;2 ;Action    ;
                      AccessByPermission=TableData 7302=R;
                      CaptionML=[ENU=&Bin Contents List;
                                 ENG=&Bin Contents List];
                      Image=BinContent;
                      OnAction=BEGIN
                                 ShowBinContents;
                               END;
                                }
      { 1900295504;2 ;Action    ;
                      Name=ItemTrackingLines;
                      ShortCutKey=Shift+Ctrl+I;
                      CaptionML=[ENU=Item &Tracking Lines;
                                 ENG=Item &Tracking Lines];
                      Image=ItemTrackingLines;
                      OnAction=BEGIN
                                 OpenItemTrackingLines;
                               END;
                                }
      { 5       ;2   ;Action    ;
                      AccessByPermission=TableData 90=R;
                      CaptionML=[ENU=Assemble to Order;
                                 ENG=Assemble to Order];
                      Image=AssemblyBOM;
                      OnAction=VAR
                                 ATOLink@1001 : Record 904;
                                 ATOSalesLine@1000 : Record 37;
                               BEGIN
                                 TESTFIELD("Assemble to Order",TRUE);
                                 TESTFIELD("Source Type",DATABASE::"Sales Line");
                                 ATOSalesLine.GET("Source Subtype","Source No.","Source Line No.");
                                 ATOLink.ShowAsm(ATOSalesLine);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 52  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of document to which the line relates.;
                           ENG=Specifies the type of document to which the line relates.];
                SourceExpr="Source Document" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source number of the document from which the line originates.;
                           ENG=Specifies the source number of the document from which the line originates.];
                SourceExpr="Source No." }

    { 20  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the source line number of the document from which the entry originates.;
                           ENG=Specifies the source line number of the document from which the entry originates.];
                SourceExpr="Source Line No.";
                Visible=FALSE }

    { 58  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of destination associated with the warehouse shipment line.;
                           ENG=Specifies the type of destination associated with the warehouse shipment line.];
                SourceExpr="Destination Type";
                Visible=FALSE }

    { 60  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the customer, vendor, or location to which the items should be shipped.;
                           ENG=Specifies the number of the customer, vendor, or location to which the items should be shipped.];
                SourceExpr="Destination No.";
                Visible=FALSE }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the item that should be shipped.;
                           ENG=Specifies the number of the item that should be shipped.];
                SourceExpr="Item No." }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the variant code of the item in the line, if any.;
                           ENG=Specifies the variant code of the item in the line, if any.];
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the description of the item in the line.;
                           ENG=Specifies the description of the item in the line.];
                SourceExpr=Description }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the location from which the items on the line are being shipped.;
                           ENG=Specifies the code of the location from which the items on the line are being shipped.];
                SourceExpr="Location Code";
                Visible=FALSE;
                Editable=FALSE }

    { 42  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the zone where the bin on this shipment line is located.;
                           ENG=Specifies the code of the zone where the bin on this shipment line is located.];
                SourceExpr="Zone Code";
                Visible=FALSE }

    { 40  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the bin in which the items will be placed before shipment.;
                           ENG=Specifies the code of the bin in which the items will be placed before shipment.];
                SourceExpr="Bin Code";
                Visible=FALSE;
                OnValidate=BEGIN
                             BinCodeOnAfterValidate;
                           END;
                            }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the shelf number of the item for informational use.;
                           ENG=Specifies the shelf number of the item for informational use.];
                SourceExpr="Shelf No.";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity that should be shipped.;
                           ENG=Specifies the quantity that should be shipped.];
                SourceExpr=Quantity;
                OnValidate=BEGIN
                             QuantityOnAfterValidate;
                           END;
                            }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity that should be shipped, in the base unit of measure.;
                           ENG=Specifies the quantity that should be shipped, in the base unit of measure.];
                SourceExpr="Qty. (Base)";
                Visible=FALSE }

    { 46  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity that will be shipped when the warehouse shipment is posted.;
                           ENG=Specifies the quantity that will be shipped when the warehouse shipment is posted.];
                SourceExpr="Qty. to Ship" }

    { 38  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity of the item on the line that is posted as shipped.;
                           ENG=Specifies the quantity of the item on the line that is posted as shipped.];
                SourceExpr="Qty. Shipped" }

    { 28  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity, in base units of measure, that will be shipped when the warehouse shipment is posted.;
                           ENG=Specifies the quantity, in base units of measure, that will be shipped when the warehouse shipment is posted.];
                SourceExpr="Qty. to Ship (Base)";
                Visible=FALSE }

    { 44  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity that is posted as shipped expressed in the base unit of measure.;
                           ENG=Specifies the quantity that is posted as shipped expressed in the base unit of measure.];
                SourceExpr="Qty. Shipped (Base)";
                Visible=FALSE }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity that still needs to be handled.;
                           ENG=Specifies the quantity that still needs to be handled.];
                SourceExpr="Qty. Outstanding";
                Visible=TRUE }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity that still needs to be handled, expressed in the base unit of measure.;
                           ENG=Specifies the quantity that still needs to be handled, expressed in the base unit of measure.];
                SourceExpr="Qty. Outstanding (Base)";
                Visible=FALSE }

    { 48  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity in pick instructions assigned to be picked for the warehouse shipment line.;
                           ENG=Specifies the quantity in pick instructions assigned to be picked for the warehouse shipment line.];
                SourceExpr="Pick Qty.";
                Visible=FALSE }

    { 50  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the quantity, in the base unit of measure, in pick instructions, that is assigned to be picked for the warehouse shipment line.;
                           ENG=Specifies the quantity, in the base unit of measure, in pick instructions, that is assigned to be picked for the warehouse shipment line.];
                SourceExpr="Pick Qty. (Base)";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how many of the total shipment quantity have been registered as picked.;
                           ENG=Specifies how many of the total shipment quantity have been registered as picked.];
                SourceExpr="Qty. Picked";
                Visible=FALSE }

    { 36  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies how many of the total shipment quantity in the base unit of measure have been registered as picked.;
                           ENG=Specifies how many of the total shipment quantity in the base unit of measure have been registered as picked.];
                SourceExpr="Qty. Picked (Base)";
                Visible=FALSE }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the related warehouse activity, such as a pick, must be completed to ensure items can be shipped by the shipment date.;
                           ENG=Specifies the date when the related warehouse activity, such as a pick, must be completed to ensure items can be shipped by the shipment date.];
                SourceExpr="Due Date" }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the unit of measure code of the item on the line.;
                           ENG=Specifies the unit of measure code of the item on the line.];
                SourceExpr="Unit of Measure Code" }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of base units of measure that are in the unit of measure specified for the item on the line.;
                           ENG=Specifies the number of base units of measure that are in the unit of measure specified for the item on the line.];
                SourceExpr="Qty. per Unit of Measure" }

    { 54  ;2   ;Field     ;
                CaptionML=[ENU=Qty. on Cross-Dock Bin;
                           ENG=Qty. on Cross-Dock Bin];
                DecimalPlaces=0:5;
                SourceExpr=QtyCrossDockedUOM;
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              CrossDockMgt.ShowBinContentsCrossDocked("Item No.","Variant Code","Unit of Measure Code","Location Code",TRUE);
                            END;
                             }

    { 56  ;2   ;Field     ;
                CaptionML=[ENU=Qty. on Cross-Dock Bin (Base);
                           ENG=Qty. on Cross-Dock Bin (Base)];
                DecimalPlaces=0:5;
                SourceExpr=QtyCrossDockedUOMBase;
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              CrossDockMgt.ShowBinContentsCrossDocked("Item No.","Variant Code","Unit of Measure Code","Location Code",TRUE);
                            END;
                             }

    { 12  ;2   ;Field     ;
                CaptionML=[ENU=Qty. on Cross-Dock Bin (Base all UOM);
                           ENG=Qty. on Cross-Dock Bin (Base all UOM)];
                DecimalPlaces=0:5;
                SourceExpr=QtyCrossDockedAllUOMBase;
                Visible=FALSE;
                Editable=FALSE;
                OnDrillDown=BEGIN
                              CrossDockMgt.ShowBinContentsCrossDocked("Item No.","Variant Code","Unit of Measure Code","Location Code",FALSE);
                            END;
                             }

    { 3   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the warehouse shipment line is for items that are assembled to a sales order before it is shipped.;
                           ENG=Specifies if the warehouse shipment line is for items that are assembled to a sales order before it is shipped.];
                SourceExpr="Assemble to Order";
                Visible=FALSE }

  }
  CODE
  {
    VAR
      WMSMgt@1000 : Codeunit 7302;
      CrossDockMgt@1004 : Codeunit 5780;
      QtyCrossDockedUOM@1003 : Decimal;
      QtyCrossDockedAllUOMBase@1002 : Decimal;
      QtyCrossDockedUOMBase@1001 : Decimal;

    LOCAL PROCEDURE ShowSourceLine@1();
    BEGIN
      WMSMgt.ShowSourceDocLine("Source Type","Source Subtype","Source No.","Source Line No.",0);
    END;

    PROCEDURE PostShipmentYesNo@3();
    VAR
      WhseShptLine@1001 : Record 7321;
    BEGIN
      WhseShptLine.COPY(Rec);
      CODEUNIT.RUN(CODEUNIT::"Whse.-Post Ship. (Ship/Invoic)",WhseShptLine);
      RESET;
      SETCURRENTKEY("No.","Sorting Sequence No.");
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE PostShipmentPrintYesNo@2();
    VAR
      WhseShptLine@1001 : Record 7321;
    BEGIN
      WhseShptLine.COPY(Rec);
      CODEUNIT.RUN(CODEUNIT::"Whse.-Post Shipment + Print",WhseShptLine);
      RESET;
      SETCURRENTKEY("No.","Sorting Sequence No.");
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE AutofillQtyToHandle@10();
    VAR
      WhseShptLine@1000 : Record 7321;
    BEGIN
      WhseShptLine.COPY(Rec);
      AutofillQtyToHandle(WhseShptLine);
    END;

    PROCEDURE DeleteQtyToHandle@8();
    VAR
      WhseShptLine@1000 : Record 7321;
    BEGIN
      WhseShptLine.COPY(Rec);
      DeleteQtyToHandle(WhseShptLine);
    END;

    LOCAL PROCEDURE ShowBinContents@6();
    VAR
      BinContent@1000 : Record 7302;
    BEGIN
      BinContent.ShowBinContents("Location Code","Item No.","Variant Code","Bin Code");
    END;

    PROCEDURE PickCreate@4();
    VAR
      WhseShptHeader@1001 : Record 7320;
      WhseShptLine@1000 : Record 7321;
      ReleaseWhseShipment@1002 : Codeunit 7310;
    BEGIN
      WhseShptLine.COPY(Rec);
      WhseShptHeader.GET(WhseShptLine."No.");
      IF WhseShptHeader.Status = WhseShptHeader.Status::Open THEN
        ReleaseWhseShipment.Release(WhseShptHeader);
      CreatePickDoc(WhseShptLine,WhseShptHeader);
    END;

    LOCAL PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      OpenItemTrackingLines;
    END;

    LOCAL PROCEDURE BinCodeOnAfterValidate@19073508();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE QuantityOnAfterValidate@19032465();
    BEGIN
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

