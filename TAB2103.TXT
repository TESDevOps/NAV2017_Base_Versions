OBJECT Table 2103 O365 Sales Document
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    OnDelete=VAR
               SalesDocumentIcon@1000 : Record 2100;
             BEGIN
               SalesDocumentIcon.INIT;
               "Document Icon" := SalesDocumentIcon.Picture; // ensure mediaset is empty
             END;

    CaptionML=[ENU=O365 Sales Document;
               ENG=O365 Sales Document];
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[ENU=Document Type;
                                                              ENG=Document Type];
                                                   OptionCaptionML=[ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                                    ENG=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Sell-to Customer No.;
                                                              ENG=Sell-to Customer No.] }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=[ENU=No.;
                                                              ENG=No.] }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=[ENU=Due Date;
                                                              ENG=Due Date] }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              ENG=Currency Code] }
    { 79  ;   ;Sell-to Customer Name;Text50       ;TableRelation=Customer;
                                                   ValidateTableRelation=No;
                                                   CaptionML=[ENU=Sell-to Customer Name;
                                                              ENG=Sell-to Customer Name] }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=[ENU=Sell-to Contact;
                                                              ENG=Sell-to Contact] }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=[ENU=Document Date;
                                                              ENG=Document Date] }
    { 2100;   ;Posted              ;Boolean       ;CaptionML=[ENU=Posted;
                                                              ENG=Posted] }
    { 2101;   ;Canceled            ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Cancelled Document" WHERE (Source ID=CONST(112),
                                                                                                 Cancelled Doc. No.=FIELD(No.)));
                                                   CaptionML=[ENU=Canceled;
                                                              ENG=Cancelled] }
    { 2102;   ;Currency Symbol     ;Text10        ;CaptionML=[ENU=Currency Symbol;
                                                              ENG=Currency Symbol] }
    { 2103;   ;Document Status     ;Option        ;CaptionML=[ENU=Document Status;
                                                              ENG=Document Status];
                                                   OptionCaptionML=[ENU=Quote,Draft Invoice,Unpaid Invoice,Canceled Invoice,Paid Invoice,Overdue Invoice;
                                                                    ENG=Quote,Draft Invoice,Unpaid Invoice,Cancelled Invoice,Paid Invoice,Overdue Invoice];
                                                   OptionString=Quote,Draft Invoice,Unpaid Invoice,Canceled Invoice,Paid Invoice,Overdue Invoice }
    { 2104;   ;Sales Amount        ;Decimal       ;CaptionML=[ENU=Sales Amount;
                                                              ENG=Sales Amount] }
    { 2105;   ;Outstanding Amount  ;Decimal       ;CaptionML=[ENU=Outstanding Amount;
                                                              ENG=Outstanding Amount] }
    { 2106;   ;Brick Total         ;Text250       ;CaptionML=[ENU=Brick Total;
                                                              ENG=Brick Total] }
    { 2107;   ;Brick Outstanding   ;Text250       ;CaptionML=[ENU=Brick Outstanding;
                                                              ENG=Brick Outstanding] }
    { 2108;   ;Document Icon       ;MediaSet      ;CaptionML=[ENU=Document Icon;
                                                              ENG=Document Icon] }
  }
  KEYS
  {
    {    ;Document Type,No.,Posted                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;Document Date,Sell-to Customer Name,Brick Total,Sell-to Contact,Brick Outstanding,Document Icon }
  }
  CODE
  {
    VAR
      NotSentTxt@1000 : TextConst 'ENU=Not sent;ENG=Not sent';
      OverdueAmountTxt@1001 : TextConst '@@@=%1 currency formatter (e.g.$), %2 amount;ENU=Overdue: %1%2;ENG=Overdue: %1%2';
      OverdueTxt@1006 : TextConst 'ENU=Overdue;ENG=Overdue';
      DueTxt@1002 : TextConst '@@@="%1 = a number of days greater than one";ENU=Due in %1 days;ENG=Due in %1 days';
      AmountDueTxt@1010 : TextConst '@@@="%1 = a number of days greater than one,%2 currency formatter (e.g.$), %3 amount";ENU=%2%3 due in %1 days;ENG=%2%3 due in %1 days';
      DueLessThanADayTxt@1003 : TextConst 'ENU=Due today;ENG=Due today';
      AmountDueLessThanADayTxt@1009 : TextConst '@@@=%1 currency formatter (e.g.$), %2 amount;ENU=%1%2 due today;ENG=%1%2 due today';
      AmountTxt@1004 : TextConst '@@@="%1=Currency symbol %2= amount";ENU=%1%2;ENG=%1%2';
      PaidTxt@1005 : TextConst 'ENU=Paid;ENG=Paid';
      CanceledTxt@1007 : TextConst 'ENU=Canceled;ENG=Cancelled';
      SortByDueDate@1008 : Boolean;

    PROCEDURE UpdateFields@1();
    BEGIN
      ResolveCurrency;

      IF Posted THEN
        GetAmountsPosted
      ELSE
        GetAmountsUnposted;

      AssignIcon;
      SetIcon;
      SetBrickStatus;
    END;

    LOCAL PROCEDURE ResolveCurrency@3();
    VAR
      GLSetup@1001 : Record 98;
      Currency@1000 : Record 4;
    BEGIN
      IF "Currency Code" = '' THEN BEGIN
        GLSetup.GET;
        "Currency Code" := GLSetup."LCY Code";
        "Currency Symbol" := GLSetup.GetCurrencySymbol;
        EXIT;
      END;

      IF NOT Currency.GET("Currency Code") THEN
        EXIT;

      "Currency Symbol" := Currency.GetCurrencySymbol;
    END;

    LOCAL PROCEDURE AssignIcon@4();
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote:
          BEGIN
            "Document Status" := "Document Status"::Quote;
            EXIT;
          END;
        "Document Type"::Invoice:
          CALCFIELDS(Canceled);
        ELSE
          EXIT;
      END;

      IF NOT Posted THEN BEGIN
        "Document Status" := "Document Status"::"Draft Invoice";
        EXIT;
      END;

      IF Canceled THEN BEGIN
        "Document Status" := "Document Status"::"Canceled Invoice";
        EXIT;
      END;

      IF "Outstanding Amount" <= 0 THEN BEGIN
        "Document Status" := "Document Status"::"Paid Invoice";
        EXIT;
      END;

      IF IsOverduePostedInvoice THEN BEGIN
        "Document Status" := "Document Status"::"Overdue Invoice";
        EXIT;
      END;

      "Document Status" := "Document Status"::"Unpaid Invoice";
    END;

    LOCAL PROCEDURE SetIcon@2();
    VAR
      SalesDocumentIcon@1000 : Record 2100;
    BEGIN
      IF SalesDocumentIcon.GET("Document Status") THEN;
      "Document Icon" := SalesDocumentIcon.Picture;
    END;

    LOCAL PROCEDURE IsOverduePostedInvoice@7() : Boolean;
    VAR
      CustLedgerEntry@1000 : Record 21;
    BEGIN
      CustLedgerEntry.SETRANGE("Customer No.","Sell-to Customer No.");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.","No.");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETFILTER("Due Date",'<%1',WORKDATE);
      EXIT(NOT CustLedgerEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE GetRemainingDaysBeforeOverdue@12() : Integer;
    VAR
      CustLedgerEntry@1000 : Record 21;
      RemainingDuration@1001 : Integer;
    BEGIN
      IF IsOverduePostedInvoice THEN
        EXIT(0);

      CustLedgerEntry.SETRANGE("Customer No.","Sell-to Customer No.");
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE("Document No.","No.");
      CustLedgerEntry.SETRANGE(Open,TRUE);
      CustLedgerEntry.SETCURRENTKEY("Due Date");
      CustLedgerEntry.SETASCENDING("Due Date",TRUE);

      IF NOT CustLedgerEntry.FINDFIRST THEN
        EXIT(0);

      RemainingDuration := (CustLedgerEntry."Due Date" - WORKDATE);

      EXIT(RemainingDuration);
    END;

    LOCAL PROCEDURE GetAmountsUnposted@6();
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SalesHeader.GET("Document Type","No.");
      SalesHeader.CALCFIELDS("Amount Including VAT");
      "Sales Amount" := SalesHeader."Amount Including VAT";
    END;

    LOCAL PROCEDURE GetAmountsPosted@8();
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      SalesInvoiceHeader.GET("No.");
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT","Remaining Amount");
      "Sales Amount" := SalesInvoiceHeader."Amount Including VAT";
      "Outstanding Amount" := SalesInvoiceHeader."Remaining Amount";
    END;

    LOCAL PROCEDURE SetBrickStatus@10();
    VAR
      HasPartialPayment@1000 : Boolean;
    BEGIN
      IF NOT Posted THEN BEGIN
        "Brick Total" := NotSentTxt;
        "Brick Outstanding" := STRSUBSTNO(AmountTxt,"Currency Symbol","Sales Amount");
        EXIT;
      END;

      "Brick Total" := STRSUBSTNO(AmountTxt,"Currency Symbol","Sales Amount");

      IF "Outstanding Amount" <= 0 THEN BEGIN
        CALCFIELDS(Canceled);
        IF Canceled THEN
          "Brick Outstanding" := CanceledTxt
        ELSE
          "Brick Outstanding" := PaidTxt;
        EXIT;
      END;

      HasPartialPayment := "Outstanding Amount" <> "Sales Amount";

      IF IsOverduePostedInvoice THEN
        IF HasPartialPayment THEN
          "Brick Outstanding" := STRSUBSTNO(OverdueAmountTxt,"Currency Symbol","Outstanding Amount")
        ELSE
          "Brick Outstanding" := OverdueTxt
      ELSE
        IF GetRemainingDaysBeforeOverdue <= 1 THEN
          IF HasPartialPayment THEN
            "Brick Outstanding" := STRSUBSTNO(AmountDueLessThanADayTxt,"Currency Symbol","Outstanding Amount")
          ELSE
            "Brick Outstanding" := DueLessThanADayTxt
        ELSE
          IF HasPartialPayment THEN
            "Brick Outstanding" := STRSUBSTNO(AmountDueTxt,GetRemainingDaysBeforeOverdue,"Currency Symbol","Outstanding Amount")
          ELSE
            "Brick Outstanding" := STRSUBSTNO(DueTxt,GetRemainingDaysBeforeOverdue)
    END;

    PROCEDURE OnFind@5(Which@1000 : Text) : Boolean;
    VAR
      FilterPosted@1001 : Boolean;
    BEGIN
      CASE Which OF
        '+':
          Posted := TRUE; // Get last posted invoice
        '-':
          Posted := FALSE; // Get first sales header
        ELSE
          IF HasPostedFilter(FilterPosted) THEN
            Posted := Posted OR FilterPosted;
      END;

      IF Posted THEN
        EXIT(FindPostedDocument(Which));

      EXIT(FindUnpostedDocument(Which));
    END;

    PROCEDURE OnNext@9(Steps@1000 : Integer) : Integer;
    VAR
      SalesInvoiceHeader@1005 : Record 112;
      SalesHeaderResults@1004 : Integer;
      SalesInvoiceHeaderResults@1003 : Integer;
      StepOffset@1002 : Integer;
      FilterPosted@1001 : Boolean;
    BEGIN
      SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);

      IF NOT Posted THEN BEGIN // Look for more Sales Headers
        SalesHeaderResults := GetNextUnpostedDocument(Steps);
        IF SalesHeaderResults <> 0 THEN
          EXIT(SalesHeaderResults);

        IF Steps < 0 THEN // No more sales headers and we are moving "back"
          EXIT(SalesHeaderResults); // therefore, no more recs, so this means we are done

        // No more sales headers, but we are moving forward so move on to sales invoice headers below
        IF NOT SalesInvoiceHeader.FINDSET THEN
          EXIT(0);

        StepOffset += 1; // need to adjust for one step that we did with FINDSET
      END ELSE
        SalesInvoiceHeader.TRANSFERFIELDS(Rec); // Continue from current posted doc

      IF HasPostedFilter(FilterPosted) AND (NOT FilterPosted) THEN
        EXIT(GetPreviousUnpostedDocument(Steps));

      SalesInvoiceHeaderResults := SalesInvoiceHeader.NEXT(Steps - StepOffset);
      IF (SalesInvoiceHeaderResults + StepOffset) <> 0 THEN BEGIN
        SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
        EXIT(SalesInvoiceHeaderResults + StepOffset);
      END;

      EXIT(GetPreviousUnpostedDocument(Steps));
    END;

    LOCAL PROCEDURE SetSalesHeaderFilters@22(VAR SalesHeader@1000 : Record 36);
    BEGIN
      SetSalesHeaderKey(SalesHeader);

      CopySalesHeaderFilters(SalesHeader);
      SalesHeader.SETFILTER("Document Type",STRSUBSTNO('%1|%2',"Document Type"::Invoice,"Document Type"::Quote));

      FILTERGROUP(-1);
      IF GETFILTER("Sell-to Customer Name") <> '' THEN BEGIN
        SalesHeader.FILTERGROUP(-1);
        CopySalesHeaderFilters(SalesHeader);
        SalesHeader.FILTERGROUP(0);
      END;
      FILTERGROUP(0);

      SalesHeader.TRANSFERFIELDS(Rec);
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderFilters@19(VAR SalesInvoiceHeader@1000 : Record 112);
    BEGIN
      SetSalesInvoiceHeaderKey(SalesInvoiceHeader);

      CopySalesInvoiceHeaderFilters(SalesInvoiceHeader);

      FILTERGROUP(-1);
      IF GETFILTER("Sell-to Customer Name") <> '' THEN BEGIN
        SalesInvoiceHeader.FILTERGROUP(-1);
        CopySalesInvoiceHeaderFilters(SalesInvoiceHeader);
        SalesInvoiceHeader.FILTERGROUP(0);
      END;
      FILTERGROUP(0);

      SalesInvoiceHeader.TRANSFERFIELDS(Rec);
    END;

    LOCAL PROCEDURE CopySalesHeaderFilters@27(VAR SalesHeader@1000 : Record 36);
    BEGIN
      COPYFILTER("No.",SalesHeader."No.");
      COPYFILTER("Sell-to Customer Name",SalesHeader."Sell-to Customer Name");
      COPYFILTER("Sell-to Customer No.",SalesHeader."Sell-to Customer No.");
      COPYFILTER("Sell-to Contact",SalesHeader."Sell-to Contact");
    END;

    LOCAL PROCEDURE CopySalesInvoiceHeaderFilters@28(VAR SalesInvoiceHeader@1000 : Record 112);
    BEGIN
      COPYFILTER("No.",SalesInvoiceHeader."No.");
      COPYFILTER("Outstanding Amount",SalesInvoiceHeader."Remaining Amount");
      COPYFILTER("Sell-to Customer Name",SalesInvoiceHeader."Sell-to Customer Name");
      COPYFILTER("Sell-to Customer No.",SalesInvoiceHeader."Sell-to Customer No.");
      COPYFILTER("Sell-to Contact",SalesInvoiceHeader."Sell-to Contact");
    END;

    LOCAL PROCEDURE SetSalesHeaderAsRec@17(VAR SalesHeader@1000 : Record 36);
    BEGIN
      TRANSFERFIELDS(SalesHeader);
      Posted := FALSE;

      UpdateFields;
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderAsRec@18(VAR SalesInvoiceHeader@1000 : Record 112);
    BEGIN
      TRANSFERFIELDS(SalesInvoiceHeader);
      Posted := TRUE;
      "Document Type" := "Document Type"::Invoice;

      UpdateFields;
    END;

    LOCAL PROCEDURE FindUnpostedDocument@16(Which@1001 : Text) : Boolean;
    VAR
      SalesHeader@1000 : Record 36;
      SalesInvoiceHeader@1002 : Record 112;
      IsPosted@1003 : Boolean;
    BEGIN
      IF HasPostedFilter(IsPosted) AND IsPosted THEN
        EXIT(FALSE);

      SetSalesHeaderFilters(SalesHeader);
      IF SalesHeader.FIND(Which) THEN BEGIN
        SetSalesHeaderAsRec(SalesHeader);
        EXIT(TRUE);
      END;

      IF (STRPOS(Which,'<') > 0) AND (STRPOS(Which,'>') = 0) THEN // We are only interested in unposted docs previous to this one
        EXIT(FALSE); // since there are none, we should exit

      IF HasPostedFilter(IsPosted) AND (NOT IsPosted) THEN
        EXIT(FALSE);  // do not attempt search for posted doc

      // Get the first posted doc since we no longer have any unposted docs
      SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);
      IF SalesInvoiceHeader.FINDFIRST THEN BEGIN
        SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE FindPostedDocument@15(Which@1000 : Text) : Boolean;
    VAR
      SalesInvoiceHeader@1001 : Record 112;
      SalesHeader@1002 : Record 36;
      IsPosted@1003 : Boolean;
    BEGIN
      IF (NOT HasPostedFilter(IsPosted)) OR IsPosted THEN BEGIN
        SetSalesInvoiceHeaderFilters(SalesInvoiceHeader);
        IF SalesInvoiceHeader.FIND(Which) THEN BEGIN
          SetSalesInvoiceHeaderAsRec(SalesInvoiceHeader);
          EXIT(TRUE);
        END;
      END;

      IF HasPostedFilter(IsPosted) AND IsPosted THEN
        EXIT(FALSE); // do not attempt search for unposted doc

      // If Which contains '<' or is '+' then we should look for the last Sales Header because there are no posted invoices
      // that match the specified criteria.
      IF (STRPOS(Which,'<') > 0) OR (Which = '+') THEN BEGIN
        SetSalesHeaderFilters(SalesHeader);
        IF SalesHeader.FINDLAST THEN BEGIN
          SetSalesHeaderAsRec(SalesHeader);
          EXIT(TRUE);
        END;
      END;

      // No match
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetNextUnpostedDocument@14(Steps@1000 : Integer) : Integer;
    VAR
      SalesHeader@1001 : Record 36;
      IsPosted@1003 : Boolean;
      SalesHeaderResults@1002 : Integer;
    BEGIN
      IF HasPostedFilter(IsPosted) AND IsPosted THEN
        EXIT(0);

      SetSalesHeaderFilters(SalesHeader);
      SalesHeaderResults := SalesHeader.NEXT(Steps);

      IF SalesHeaderResults <> 0 THEN
        SetSalesHeaderAsRec(SalesHeader);

      EXIT(SalesHeaderResults);
    END;

    LOCAL PROCEDURE GetPreviousUnpostedDocument@13(Steps@1000 : Integer) : Integer;
    VAR
      SalesHeader@1001 : Record 36;
      SalesHeaderResults@1002 : Integer;
      IsPosted@1003 : Boolean;
    BEGIN
      IF Steps >= 0 THEN
        EXIT(0); // there must be negative steps

      IF HasPostedFilter(IsPosted) AND IsPosted THEN
        EXIT(0);

      SetSalesHeaderFilters(SalesHeader);

      IF NOT SalesHeader.FIND('+') THEN // step 1 entry back (i.e. get the last sales header)
        EXIT(0); // no previous sales header

      IF Steps < -1 THEN // there are more steps to do
        SalesHeaderResults := SalesHeader.NEXT(Steps + 1) - 1
      ELSE
        SalesHeaderResults := Steps;

      IF SalesHeaderResults <> 0 THEN
        SetSalesHeaderAsRec(SalesHeader);

      EXIT(SalesHeaderResults);
    END;

    LOCAL PROCEDURE HasPostedFilter@11(VAR FilterValue@1001 : Boolean) : Boolean;
    VAR
      PostedFilter@1000 : Boolean;
    BEGIN
      IF GETFILTER(Posted) = '' THEN
        EXIT(FALSE);

      IF NOT EVALUATE(PostedFilter,GETFILTER(Posted)) THEN
        EXIT(FALSE);

      FilterValue := PostedFilter;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE SetSalesInvoiceHeaderKey@20(VAR SalesInvoiceHeader@1000 : Record 112);
    BEGIN
      IF SortByDueDate THEN BEGIN
        SalesInvoiceHeader.SETCURRENTKEY("Due Date","Document Date");
        SalesInvoiceHeader.SETASCENDING("Due Date",TRUE);
        SalesInvoiceHeader.SETASCENDING("Document Date",FALSE);
      END ELSE BEGIN
        SalesInvoiceHeader.SETCURRENTKEY("Document Date","Due Date");
        SalesInvoiceHeader.SETASCENDING("Due Date",FALSE);
        SalesInvoiceHeader.SETASCENDING("Document Date",FALSE);
      END;
    END;

    LOCAL PROCEDURE SetSalesHeaderKey@21(VAR SalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader.SETCURRENTKEY("Document Date","No.");
      SalesHeader.SETASCENDING("No.",FALSE);
      SalesHeader.SETASCENDING("Document Date",FALSE);
    END;

    PROCEDURE SetSortByDocDate@24();
    BEGIN
      SortByDueDate := FALSE;
    END;

    PROCEDURE SetSortByDueDate@23();
    BEGIN
      SortByDueDate := TRUE;
    END;

    BEGIN
    END.
  }
}

