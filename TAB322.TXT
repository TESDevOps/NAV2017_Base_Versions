OBJECT Table 322 Tax Detail
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    OnInsert=VAR
               TaxJurisdiction@1000 : Record 320;
             BEGIN
               TaxJurisdiction.GET("Tax Jurisdiction Code");
               "Calculate Tax on Tax" := TaxJurisdiction."Calculate Tax on Tax";
             END;

    OnRename=VAR
               TaxJurisdiction@1000 : Record 320;
             BEGIN
               TaxJurisdiction.GET("Tax Jurisdiction Code");
               "Calculate Tax on Tax" := TaxJurisdiction."Calculate Tax on Tax";
             END;

    CaptionML=[ENU=Tax Detail;
               ENG=VAT Detail];
  }
  FIELDS
  {
    { 1   ;   ;Tax Jurisdiction Code;Code10       ;TableRelation="Tax Jurisdiction";
                                                   CaptionML=[ENU=Tax Jurisdiction Code;
                                                              ENG=VAT Jurisdiction Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              ENG=VAT Group Code] }
    { 3   ;   ;Tax Type            ;Option        ;CaptionML=[ENU=Tax Type;
                                                              ENG=VAT Type];
                                                   OptionCaptionML=[ENU=Sales Tax,Excise Tax;
                                                                    ENG=VAT,Excise Tax];
                                                   OptionString=Sales Tax,Excise Tax;
                                                   NotBlank=No }
    { 4   ;   ;Maximum Amount/Qty. ;Decimal       ;CaptionML=[ENU=Maximum Amount/Qty.;
                                                              ENG=Maximum Amount/Qty.];
                                                   DecimalPlaces=2:2;
                                                   MinValue=0 }
    { 5   ;   ;Tax Below Maximum   ;Decimal       ;CaptionML=[ENU=Tax Below Maximum;
                                                              ENG=VAT Below Maximum];
                                                   DecimalPlaces=1:3;
                                                   MinValue=0 }
    { 6   ;   ;Tax Above Maximum   ;Decimal       ;CaptionML=[ENU=Tax Above Maximum;
                                                              ENG=VAT Above Maximum];
                                                   DecimalPlaces=1:3;
                                                   MinValue=0 }
    { 7   ;   ;Effective Date      ;Date          ;CaptionML=[ENU=Effective Date;
                                                              ENG=Effective Date] }
    { 8   ;   ;Calculate Tax on Tax;Boolean       ;CaptionML=[ENU=Calculate Tax on Tax;
                                                              ENG=Calculate VAT on VAT];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Tax Jurisdiction Code,Tax Group Code,Tax Type,Effective Date;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      SpecifyTaxMsg@1001 : TextConst '@@@="%1=Tax Area Code or Tax Group Code";ENU=Please specify a %1 first.;ENG=Please specify a %1 first.';

    LOCAL PROCEDURE ApplyCommonFilters@5(TaxJurisdictionCode@1003 : Code[20];TaxGroupCode@1002 : Code[10];TaxType@1001 : Option;EffectiveDate@1000 : Date);
    BEGIN
      RESET;
      SETRANGE("Tax Jurisdiction Code",TaxJurisdictionCode);
      SETRANGE("Tax Group Code",TaxGroupCode);
      SETRANGE("Tax Type",TaxType);
      SETFILTER("Effective Date",'<=%1',EffectiveDate);
    END;

    PROCEDURE ValidateTaxSetup@3(TaxAreaCode@1001 : Code[20];TaxGroupCode@1000 : Code[10]);
    VAR
      TaxArea@1005 : Record 318;
      TaxAreaLine@1004 : Record 319;
      TaxGroup@1003 : Record 321;
    BEGIN
      TaxArea.GET(TaxAreaCode);
      TaxGroup.GET(TaxGroupCode);
      TaxAreaLine.SETRANGE("Tax Area",TaxArea.Code);
      IF TaxAreaLine.FINDSET THEN
        REPEAT
          ApplyCommonFilters(TaxAreaLine."Tax Jurisdiction Code",TaxGroupCode,"Tax Type"::"Sales Tax",WORKDATE);
          IF NOT FINDFIRST THEN
            SetNewTaxRate(TaxAreaLine."Tax Jurisdiction Code",TaxGroupCode,"Tax Type"::"Sales Tax",WORKDATE,0);
        UNTIL TaxAreaLine.NEXT = 0;
    END;

    PROCEDURE GetSalesTaxRate@4(TaxAreaCode@1002 : Code[20];TaxGroupCode@1001 : Code[10]) : Decimal;
    VAR
      TaxAreaLine@1004 : Record 319;
      TotalTaxRate@1000 : Decimal;
    BEGIN
      TaxAreaLine.SETRANGE("Tax Area",TaxAreaCode);
      IF TaxAreaLine.FINDSET THEN
        REPEAT
          TotalTaxRate += GetTaxRate(TaxAreaLine."Tax Jurisdiction Code",TaxGroupCode,"Tax Type"::"Sales Tax",WORKDATE);
        UNTIL TaxAreaLine.NEXT = 0;
      EXIT(TotalTaxRate);
    END;

    PROCEDURE SetSalesTaxRate@6(TaxAreaCode@1001 : Code[20];TaxGroupCode@1000 : Code[10];NewTaxRate@1007 : Decimal);
    VAR
      TaxAreaLine@1006 : Record 319;
      TaxJurisdiction@1004 : Record 320;
      TaxJurisdiction2@1003 : Record 320;
      TotalTaxRate@1002 : Decimal;
    BEGIN
      IF NewTaxRate = GetSalesTaxRate(TaxAreaCode,TaxGroupCode) THEN
        EXIT;
      IF TaxAreaCode = '' THEN BEGIN
        MESSAGE(SpecifyTaxMsg,TaxAreaLine.FIELDCAPTION("Tax Area"));
        EXIT;
      END;
      TotalTaxRate := 0;
      TaxAreaLine.SETRANGE("Tax Area",TaxAreaCode);
      TaxAreaLine.SETFILTER("Tax Jurisdiction Code",'<>%1','');
      IF TaxAreaLine.FINDSET THEN
        REPEAT
          IF TaxJurisdiction.GET(TaxAreaLine."Tax Jurisdiction Code") THEN BEGIN
            TotalTaxRate += GetTaxRate(TaxJurisdiction.Code,TaxGroupCode,"Tax Type"::"Sales Tax",WORKDATE);
            IF TaxJurisdiction2.Code = '' THEN // the first
              TaxJurisdiction2 := TaxJurisdiction
            ELSE
              IF TaxJurisdiction.Code <> TaxJurisdiction."Report-to Jurisdiction" THEN
                TaxJurisdiction2 := TaxJurisdiction;
          END;
        UNTIL TaxAreaLine.NEXT = 0;
      IF TaxJurisdiction2.Code = '' THEN
        EXIT; // missing setup
      TotalTaxRate -= GetTaxRate(TaxJurisdiction2.Code,TaxGroupCode,"Tax Type"::"Sales Tax",WORKDATE);
      SetNewTaxRate(TaxJurisdiction2.Code,TaxGroupCode,"Tax Type"::"Sales Tax",WORKDATE,NewTaxRate - TotalTaxRate);
    END;

    LOCAL PROCEDURE GetTaxRate@2(TaxJurisdictionCode@1000 : Code[20];TaxGroupCode@1001 : Code[10];TaxType@1002 : Option;EffectiveDate@1003 : Date) : Decimal;
    BEGIN
      ApplyCommonFilters(TaxJurisdictionCode,TaxGroupCode,TaxType,EffectiveDate);
      IF FINDLAST THEN
        EXIT("Tax Below Maximum");
      EXIT(0);
    END;

    LOCAL PROCEDURE SetNewTaxRate@1(TaxJurisdictionCode@1000 : Code[10];TaxGroupCode@1001 : Code[10];TaxType@1002 : Option;EffectiveDate@1003 : Date;NewTaxRate@1004 : Decimal);
    BEGIN
      ApplyCommonFilters(TaxJurisdictionCode,TaxGroupCode,TaxType,EffectiveDate);
      LOCKTABLE;
      IF NOT FINDLAST THEN BEGIN
        INIT;
        "Tax Jurisdiction Code" := TaxJurisdictionCode;
        "Tax Group Code" := TaxGroupCode;
        "Tax Type" := TaxType;
        "Effective Date" := EffectiveDate;
        INSERT;
      END;
      "Tax Below Maximum" := NewTaxRate;
      MODIFY;
    END;

    BEGIN
    END.
  }
}

