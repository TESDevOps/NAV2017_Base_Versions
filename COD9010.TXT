OBJECT Codeunit 9010 Azure AD User Management
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    Permissions=TableData 9004=rimd,
                TableData 9005=rimd,
                TableData 2000000053=rimd,
                TableData 2000000120=rimd,
                TableData 2000000121=rimd,
                TableData 2000000195=rimd;
    OnRun=VAR
            UserProperty@1001 : Record 2000000121;
            PermissionManager@1000 : Codeunit 9002;
          BEGIN
            IF NOT PermissionManager.SoftwareAsAService THEN
              EXIT;

            IF NOT UserProperty.GET(USERSECURITYID) THEN
              EXIT;

            IF GetUserAuthenticationObjectId(USERSECURITYID) = '' THEN
              EXIT;

            RefreshUserPlanAssignments(USERSECURITYID);
            COMMIT;
          END;

  }
  CODE
  {
    VAR
      PermissionManager@1001 : Codeunit 9002;
      Graph@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.GraphQuery";
      IsInitialized@1003 : Boolean;
      UserDoesNotObjectIdSetErr@1004 : TextConst '@@@="%1 =  The specified User Security ID";ENU=The user with the security ID %1 does not have a valid object ID in Azure Active Directory.;ENG=The user with the security ID %1 does not have a valid object ID in Azure Active Directory.';
      CouldNotFindGraphUserErr@1005 : TextConst '@@@="%1 = The specified object id";ENU=An Azure Active Directory user with the object ID %1 was not found.;ENG=An Azure Active Directory user with the object ID %1 was not found.';

    LOCAL PROCEDURE RefreshUserPlanAssignments@8(ForUserSecurityId@1000 : GUID);
    VAR
      User@1002 : Record 2000000120;
      GraphUser@1001 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User";
      UserObjectId@1009 : Text;
    BEGIN
      IF NOT User.GET(ForUserSecurityId) THEN
        EXIT;

      IF NOT Initialize THEN
        EXIT;

      UserObjectId := GetUserAuthenticationObjectId(ForUserSecurityId);
      IF UserObjectId = '' THEN
        EXIT;

      GetGraphUserFromObjectId(UserObjectId,GraphUser);
      UpdateUserFromAzureGraph(User,GraphUser);
      UpdateUserPlansFromAzureGraph(User."User Security ID",GraphUser);
    END;

    PROCEDURE GetPlans@4(VAR TempPlan@1001 : TEMPORARY Record 9004;IncludePlansWithoutEntitlement@1006 : Boolean);
    VAR
      SubscribedSku@1000 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.ISubscribedSku";
      ServicePlan@1003 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.ServicePlanInfo";
      ServicePlanId@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Guid";
      ServicePlanIdValue@1005 : Variant;
    BEGIN
      IF NOT Initialize THEN
        EXIT;

      TempPlan.RESET;
      TempPlan.DELETEALL;

      FOREACH SubscribedSku IN Graph.GetDirectorySubscribedSkus DO
        FOREACH ServicePlan IN SubscribedSku.ServicePlans DO BEGIN
          ServicePlanId := ServicePlan.ServicePlanId;
          ServicePlanIdValue := ServicePlanId;
          IF IncludePlansWithoutEntitlement THEN
            AddToTempPlan(ServicePlanIdValue,ServicePlan.ServicePlanName,TempPlan)
          ELSE
            IF IsServicePlanMembershipEntitled(ServicePlanId) THEN
              AddToTempPlan(ServicePlanIdValue,ServicePlan.ServicePlanName,TempPlan);
        END;
    END;

    PROCEDURE GetUserPlans@2(VAR TempPlan@1003 : TEMPORARY Record 9004;ForUserSecurityId@1000 : GUID;IncludePlansWithoutEntitlement@1001 : Boolean);
    VAR
      GraphUser@1004 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User";
      UserObjectId@1002 : Text;
    BEGIN
      IF NOT Initialize THEN
        EXIT;

      UserObjectId := GetUserAuthenticationObjectId(ForUserSecurityId);
      GetGraphUserFromObjectId(UserObjectId,GraphUser);
      GetGraphUserPlans(TempPlan,GraphUser,IncludePlansWithoutEntitlement);
    END;

    PROCEDURE GetUserRoles@19(VAR TempNameValueBuffer@1000 : TEMPORARY Record 823;ForUserSecurityId@1009 : GUID;IncludeRolesWithoutEntitlement@1010 : Boolean);
    VAR
      GraphUser@1002 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User";
      UserObjectId@1001 : Text;
    BEGIN
      IF NOT Initialize THEN
        EXIT;

      UserObjectId := GetUserAuthenticationObjectId(ForUserSecurityId);
      GetGraphUserFromObjectId(UserObjectId,GraphUser);
      GetGraphUserRoles(TempNameValueBuffer,UserObjectId,IncludeRolesWithoutEntitlement);
    END;

    PROCEDURE CreateNewUsersFromAzureAD@11();
    VAR
      User@1013 : Record 2000000120;
      PagedUsers@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.PagedUserCollection";
      GraphUser@1001 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.IUser";
      UserAccountHelper@1002 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
      NewUserSecurityId@1007 : GUID;
      IsFirstPage@1011 : Boolean;
    BEGIN
      IF NOT Initialize THEN
        EXIT;

      PagedUsers := Graph.GetUsersPage(50);
      IsFirstPage := TRUE;
      REPEAT
        IF NOT IsFirstPage THEN
          PagedUsers.GetNextPage
        ELSE
          IsFirstPage := FALSE;

        FOREACH GraphUser IN PagedUsers.CurrentPage DO
          IF GetUserFromAuthenticationObjectId(GraphUser.ObjectId,User) THEN BEGIN
            UpdateUserFromAzureGraph(User,GraphUser);
            UpdateUserPlansFromAzureGraph(User."User Security ID",GraphUser);
          END ELSE
            IF IsGraphUserEntitledFromServicePlan(GraphUser) THEN BEGIN
              EnsureAuthenticationEmailIsNotInUse(GraphUser.UserPrincipalName);

              NewUserSecurityId := UserAccountHelper.CreateUserFromAzureADObjectId(GraphUser.ObjectId);
              IF NOT ISNULLGUID(NewUserSecurityId) THEN
                InitializeAsNewUser(NewUserSecurityId,GraphUser);
            END;
      UNTIL (NOT PagedUsers.MorePagesAvailable);
    END;

    PROCEDURE RemoveUnassignedUserPlans@42(VAR TempO365Plan@1006 : TEMPORARY Record 9004;ForUserSecurityId@1003 : GUID);
    VAR
      NavUserPlan@1002 : Record 9005;
      TempNavUserPlan@1004 : TEMPORARY Record 9005;
    BEGIN
      // Have any plans been removed from this user in O365, since last time he logged-in to NAV?
      // Get all plans assigned to the user, in NAV
      NavUserPlan.SETRANGE("User Security ID",ForUserSecurityId);
      IF NavUserPlan.FINDSET THEN
        REPEAT
          TempNavUserPlan.COPY(NavUserPlan,FALSE);
          TempNavUserPlan.INSERT;
        UNTIL NavUserPlan.NEXT = 0;

      // Get all plans assigned to the user in Office
      IF TempO365Plan.FINDSET THEN
        // And remove them from the list of plans assigned to the user
        REPEAT
          TempNavUserPlan.SETRANGE("Plan ID",TempO365Plan."Plan ID");
          IF NOT TempNavUserPlan.ISEMPTY THEN
            TempNavUserPlan.DELETEALL;
        UNTIL TempO365Plan.NEXT = 0;

      // If any plans belong to the user in NAV, but not in Office, de-assign them
      IF TempNavUserPlan.FINDSET THEN
        REPEAT
          NavUserPlan.SETRANGE("Plan ID",TempNavUserPlan."Plan ID");
          NavUserPlan.DELETEALL(TRUE);
        UNTIL TempNavUserPlan.NEXT = 0;
    END;

    PROCEDURE AddNewlyAssignedUserPlans@46(VAR TempO365Plan@1006 : TEMPORARY Record 9004;ForUserSecurityId@1003 : GUID);
    VAR
      NavUserPlan@1002 : Record 9005;
      PermissionManager@1005 : Codeunit 9002;
    BEGIN
      // Have any plans been added to this user in O365, since last time he logged-in to NAV?
      // For each plan assigned to the user in Office
      IF TempO365Plan.FINDSET THEN
        REPEAT
          // Does this assignment exist in NAV? If not, add it.
          NavUserPlan.SETRANGE("Plan ID",TempO365Plan."Plan ID");
          NavUserPlan.SETRANGE("User Security ID",ForUserSecurityId);
          IF NavUserPlan.ISEMPTY THEN BEGIN
            InsertFromTempPlan(TempO365Plan);

            NavUserPlan.INIT;
            NavUserPlan."Plan ID" := TempO365Plan."Plan ID";
            NavUserPlan."User Security ID" := ForUserSecurityId;
            NavUserPlan.INSERT(TRUE);
            // The SUPER role is replaced with O365 FULL ACCESS for new users.
            // This happens only for users who are created from O365 (i.e. are added to plans)
            PermissionManager.UpdateUserAccessForSaaS(NavUserPlan."User Security ID");
          END;
        UNTIL TempO365Plan.NEXT = 0;
    END;

    LOCAL PROCEDURE GetGraphUserPlans@13(VAR TempPlan@1008 : TEMPORARY Record 9004;VAR GraphUser@1000 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User";IncludePlansWithoutEntitlement@1001 : Boolean);
    VAR
      AssignedPlan@1004 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.AssignedPlan";
      ServicePlanIdValue@1009 : Variant;
    BEGIN
      TempPlan.RESET;
      TempPlan.DELETEALL;

      FOREACH AssignedPlan IN GraphUser.AssignedPlans DO
        IF IncludePlansWithoutEntitlement THEN BEGIN
          ServicePlanIdValue := AssignedPlan.ServicePlanId;
          AddToTempPlan(ServicePlanIdValue,AssignedPlan.Service,TempPlan);
        END ELSE
          IF IsServicePlanMembershipEntitled(AssignedPlan.ServicePlanId) THEN BEGIN
            ServicePlanIdValue := AssignedPlan.ServicePlanId;
            AddToTempPlan(ServicePlanIdValue,AssignedPlan.Service,TempPlan);
          END;
    END;

    LOCAL PROCEDURE GetGraphUserRoles@5(VAR TempNameValueBuffer@1000 : TEMPORARY Record 823;UserObjectId@1009 : GUID;IncludeRolesWithoutEntitlement@1010 : Boolean);
    VAR
      MembershipEntitlement@1006 : Record 2000000195;
      GraphUser@1003 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User";
      DirectoryRole@1007 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.IDirectoryRole";
      IsSystemRole@1011 : Boolean;
    BEGIN
      TempNameValueBuffer.RESET;
      TempNameValueBuffer.DELETEALL;

      GraphUser := Graph.GetUserByObjectId(UserObjectId);
      IF ISNULL(GraphUser) THEN
        ERROR(CouldNotFindGraphUserErr,UserObjectId);

      MembershipEntitlement.SETRANGE(Type,MembershipEntitlement.Type::"Azure AD Role");
      FOREACH DirectoryRole IN Graph.GetUserRoles(GraphUser) DO BEGIN
        EVALUATE(IsSystemRole,FORMAT(DirectoryRole.IsSystem));
        IF IncludeRolesWithoutEntitlement THEN
          AddRoleToTempNameValueBuffer(DirectoryRole.DisplayName,DirectoryRole.Description,TempNameValueBuffer)
        ELSE
          IF IsSystemRole THEN BEGIN
            MembershipEntitlement.SETRANGE(ID,DirectoryRole.DisplayName);
            IF MembershipEntitlement.COUNT > 0 THEN
              AddRoleToTempNameValueBuffer(DirectoryRole.DisplayName,DirectoryRole.Description,TempNameValueBuffer)
          END;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE GetGraphUserFromObjectId@1(ObjectId@1000 : Text;VAR GraphUser@1001 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User");
    BEGIN
      GraphUser := Graph.GetUserByObjectId(ObjectId);
      IF ISNULL(GraphUser) THEN
        ERROR(CouldNotFindGraphUserErr,ObjectId);
    END;

    LOCAL PROCEDURE InsertFromTempPlan@17(VAR TempPlan@1000 : TEMPORARY Record 9004);
    VAR
      Plan@1001 : Record 9004;
    BEGIN
      IF NOT Plan.GET(TempPlan."Plan ID") THEN BEGIN
        Plan.INIT;
        Plan.COPY(TempPlan);
        Plan.INSERT;
      END;
    END;

    LOCAL PROCEDURE IsGraphUserEntitledFromServicePlan@18(VAR GraphUser@1000 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.IUser") : Boolean;
    VAR
      AssignedPlan@1010 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.AssignedPlan";
    BEGIN
      FOREACH AssignedPlan IN GraphUser.AssignedPlans DO BEGIN
        IF IsServicePlanMembershipEntitled(AssignedPlan.ServicePlanId) THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE IsServicePlanMembershipEntitled@3(ServicePlanId@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Guid") : Boolean;
    VAR
      MembershipEntitlement@1000 : Record 2000000195;
      MembershipEntitlementId@1002 : Text;
    BEGIN
      MembershipEntitlement.SETRANGE(Type,MembershipEntitlement.Type::"Azure AD Plan");
      MembershipEntitlementId := ServicePlanId.ToString('D');
      MembershipEntitlement.SETFILTER(ID,'@' + MembershipEntitlementId);
      EXIT(MembershipEntitlement.COUNT > 0);
    END;

    LOCAL PROCEDURE GetUserAuthenticationObjectId@7(ForUserSecurityId@1000 : GUID) : Text;
    VAR
      UserProperty@1002 : Record 2000000121;
    BEGIN
      IF NOT UserProperty.GET(ForUserSecurityId) THEN
        ERROR(UserDoesNotObjectIdSetErr,ForUserSecurityId);

      EXIT(UserProperty."Authentication Object ID");
    END;

    LOCAL PROCEDURE GetUserFromAuthenticationObjectId@12(AuthenticationObjectId@1000 : Text;VAR FoundUser@1001 : Record 2000000120) : Boolean;
    VAR
      UserProperty@1002 : Record 2000000121;
    BEGIN
      UserProperty.SETRANGE("Authentication Object ID",AuthenticationObjectId);
      IF UserProperty.FINDFIRST THEN
        EXIT(FoundUser.GET(UserProperty."User Security ID"));
      EXIT(FALSE)
    END;

    LOCAL PROCEDURE UpdateUserFromAzureGraph@15(VAR User@1001 : Record 2000000120;VAR GraphUser@1002 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User");
    VAR
      ModifyUser@1003 : Boolean;
      TempString@1004 : Text;
    BEGIN
      TempString := GraphUser.GivenName;
      IF GraphUser.Surname <> '' THEN
        TempString := TempString + ' ';
      TempString := TempString + GraphUser.Surname;
      TempString := COPYSTR(TempString,1,MAXSTRLEN(User."Full Name"));
      IF LOWERCASE(User."Full Name") <> LOWERCASE(TempString) THEN BEGIN
        User."Full Name" := TempString;
        ModifyUser := TRUE;
      END;

      TempString := FORMAT(GraphUser.Mail);
      TempString := COPYSTR(TempString,1,MAXSTRLEN(User."Contact Email"));
      IF LOWERCASE(User."Contact Email") <> LOWERCASE(TempString) THEN BEGIN
        User."Contact Email" := TempString;
        ModifyUser := TRUE;
      END;

      TempString := COPYSTR(GraphUser.UserPrincipalName,1,MAXSTRLEN(User."Authentication Email"));
      IF LOWERCASE(User."Authentication Email") <> LOWERCASE(TempString) THEN BEGIN
        // Clear current authentication mail
        User."Authentication Email" := '';
        User.MODIFY(TRUE);
        ModifyUser := FALSE;

        EnsureAuthenticationEmailIsNotInUse(TempString);
        UpdateAuthenticationEmail(User,GraphUser);
      END;

      IF ModifyUser THEN
        User.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE UpdateUserPlansFromAzureGraph@23(ForUserSecurityId@1003 : GUID;VAR GraphUser@1000 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User");
    VAR
      TempO365Plan@1001 : TEMPORARY Record 9004;
    BEGIN
      GetGraphUserPlans(TempO365Plan,GraphUser,FALSE);

      // Have any plans been removed from this user in O365, since last time he logged-in to NAV?
      RemoveUnassignedUserPlans(TempO365Plan,ForUserSecurityId);

      // Have any plans been added to this user in O365, since last time he logged-in to NAV?
      AddNewlyAssignedUserPlans(TempO365Plan,ForUserSecurityId);
    END;

    PROCEDURE UpdateUserPlansFromAzureGraphAllUsers@22();
    VAR
      User@1000 : Record 2000000120;
      GraphUser@1002 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User";
      UserObjectId@1001 : Text;
    BEGIN
      User.SETFILTER("License Type",'<>%1',User."License Type"::"External User");
      IF NOT User.FINDSET THEN
        EXIT;
      REPEAT
        UserObjectId := GetUserAuthenticationObjectId(User."User Security ID");
        GetGraphUserFromObjectId(UserObjectId,GraphUser);
        UpdateUserPlansFromAzureGraph(User."User Security ID",GraphUser);
      UNTIL User.NEXT = 0;
    END;

    LOCAL PROCEDURE AddToTempPlan@16(ServicePlanId@1000 : GUID;ServicePlanName@1001 : Text;VAR TempPlan@1002 : TEMPORARY Record 9004);
    BEGIN
      WITH TempPlan DO BEGIN
        IF GET(ServicePlanId) THEN
          EXIT;

        INIT;
        "Plan ID" := ServicePlanId;
        Name := COPYSTR(ServicePlanName,1,MAXSTRLEN(Name));
        INSERT;
      END;
    END;

    LOCAL PROCEDURE AddRoleToTempNameValueBuffer@36(RoleName@1000 : Text;RoleDescription@1001 : Text;VAR TempNameValueBuffer@1002 : TEMPORARY Record 823);
    BEGIN
      WITH TempNameValueBuffer DO BEGIN
        IF NOT GET(RoleName) THEN
          EXIT;

        INIT;
        Name := COPYSTR(RoleName,1,MAXSTRLEN(Name));
        Value := COPYSTR(RoleDescription,1,MAXSTRLEN(Value));
        INSERT
      END;
    END;

    LOCAL PROCEDURE EnsureAuthenticationEmailIsNotInUse@37(AuthenticationEmail@1000 : Text);
    VAR
      User@1001 : Record 2000000120;
      ModifiedUser@1002 : Record 2000000120;
      GraphUser@1003 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User";
      AuthenticationObjectId@1004 : Text;
      UserSecurityId@1005 : GUID;
    BEGIN
      // Clear all duplicate authentication email.
      User.SETRANGE("Authentication Email",COPYSTR(AuthenticationEmail,1,MAXSTRLEN(User."Authentication Email")));
      IF NOT User.FINDFIRST THEN
        EXIT;
      REPEAT
        AuthenticationObjectId := GetUserAuthenticationObjectId(User."User Security ID");
        UserSecurityId := User."User Security ID";
        // Modifying the user authentication email breaks the connection to AD by clearing the Authentication Object Id
        User."Authentication Email" := '';
        User.MODIFY(TRUE);

        // Cascade changes to authentication email, terminates at the first time an authentication email is not found.
        IF GetGraphUserFromObjectId(AuthenticationObjectId,GraphUser) THEN BEGIN
          EnsureAuthenticationEmailIsNotInUse(GraphUser.UserPrincipalName);
          ModifiedUser.GET(UserSecurityId);
          UpdateAuthenticationEmail(ModifiedUser,GraphUser);
        END;
      UNTIL NOT User.FINDFIRST;
    END;

    LOCAL PROCEDURE UpdateAuthenticationEmail@38(VAR User@1000 : Record 2000000120;VAR GraphUser@1001 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.User");
    VAR
      NavUserAuthenticationHelper@1002 : DotNet "'Microsoft.Dynamics.Nav.NavUserAccount, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.NavUserAccount.NavUserAccountHelper";
    BEGIN
      User."Authentication Email" := COPYSTR(GraphUser.UserPrincipalName,1,MAXSTRLEN(User."Authentication Email"));
      User.MODIFY(TRUE);
      NavUserAuthenticationHelper.SetAuthenticationObjectId(User."User Security ID",GraphUser.ObjectId);
    END;

    LOCAL PROCEDURE InitializeAsNewUser@39(NewUserSecurityId@1000 : GUID;VAR GraphUser@1001 : DotNet "'Microsoft.Azure.ActiveDirectory.GraphClient, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Azure.ActiveDirectory.GraphClient.IUser");
    VAR
      User@1003 : Record 2000000120;
    BEGIN
      User.GET(NewUserSecurityId);

      UpdateUserFromAzureGraph(User,GraphUser);
      UpdateUserPlansFromAzureGraph(User."User Security ID",GraphUser);
    END;

    LOCAL PROCEDURE Initialize@9() : Boolean;
    BEGIN
      IF NOT PermissionManager.SoftwareAsAService THEN
        EXIT(FALSE);

      IF IsInitialized THEN
        EXIT(TRUE);

      IsInitialized := TRUE;

      IF CanHandle THEN
        Graph := Graph.GraphQuery
      ELSE
        OnInitialize(Graph);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CanHandle@6() : Boolean;
    VAR
      AzureADMgtSetup@1000 : Record 6303;
    BEGIN
      IF AzureADMgtSetup.GET THEN
        EXIT(AzureADMgtSetup."Azure AD User Mgt. Codeunit ID" = CODEUNIT::"Azure AD User Management");

      EXIT(TRUE);
    END;

    [Integration(DEFAULT,TRUE)]
    LOCAL PROCEDURE OnInitialize@21(VAR GraphQuery@1000 : DotNet "'Microsoft.Dynamics.Nav.AzureADGraphClient, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.AzureADGraphClient.GraphQuery");
    BEGIN
    END;

    BEGIN
    END.
  }
}

