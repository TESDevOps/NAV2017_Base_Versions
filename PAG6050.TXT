OBJECT Page 6050 Service Contract
{
  OBJECT-PROPERTIES
  {
    Date=28/04/17;
    Time=12:00:00;
    Version List=NAVW110.00.00.16585,NAVGB10.00.00.16585;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Service Contract;
               ENG=Service Contract];
    SourceTable=Table5965;
    SourceTableView=WHERE(Contract Type=FILTER(Contract));
    PageType=Document;
    RefreshOnActivate=Yes;
    OnInit=BEGIN
             InvoiceAfterServiceEnable := TRUE;
             PrepaidEnable := TRUE;
             FirstServiceDateEditable := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF UserMgt.GetServiceFilter <> '' THEN BEGIN
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetServiceFilter);
                   FILTERGROUP(0);
                 END;

                 ActivateFields;
               END;

    OnAfterGetRecord=BEGIN
                       UpdateShiptoCode;
                     END;

    OnNewRecord=BEGIN
                  "Responsibility Center" := UserMgt.GetServiceFilter;
                END;

    OnAfterGetCurrRecord=BEGIN
                           CALCFIELDS("Calcd. Annual Amount","No. of Posted Invoices","No. of Unposted Invoices");
                           ActivateFields;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 3       ;1   ;ActionGroup;
                      CaptionML=[ENU=Overview;
                                 ENG=Overview] }
      { 161     ;2   ;ActionGroup;
                      CaptionML=[ENU=Ser&vice Overview;
                                 ENG=Ser&vice Overview];
                      Image=Tools }
      { 87      ;3   ;Action    ;
                      CaptionML=[ENU=Service Orders;
                                 ENG=Service Orders];
                      RunObject=Page 5901;
                      RunPageView=SORTING(Contract No.);
                      RunPageLink=Document Type=CONST(Order),
                                  Contract No.=FIELD(Contract No.);
                      Image=Document }
      { 88      ;3   ;Action    ;
                      CaptionML=[ENU=Posted Service Shipments;
                                 ENG=Posted Service Shipments];
                      Image=PostedShipment;
                      OnAction=VAR
                                 TempServShptHeader@1001 : TEMPORARY Record 5990;
                               BEGIN
                                 CollectShpmntsByLineContractNo(TempServShptHeader);
                                 PAGE.RUNMODAL(PAGE::"Posted Service Shipments",TempServShptHeader);
                               END;
                                }
      { 29      ;3   ;Action    ;
                      CaptionML=[ENU=Posted Service Invoices;
                                 ENG=Posted Service Invoices];
                      RunObject=Page 5968;
                      RunPageView=SORTING(Source Document Type,Source Document No.,Destination Document Type,Destination Document No.)
                                  WHERE(Source Document Type=CONST(Contract),
                                        Destination Document Type=CONST(Posted Invoice));
                      RunPageLink=Source Document No.=FIELD(Contract No.);
                      Image=PostedServiceOrder }
      { 94      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Contract;
                                 ENG=&Contract];
                      Image=Agreement }
      { 69      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDocDim;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 22      ;2   ;Action    ;
                      CaptionML=[ENU=Service Dis&counts;
                                 ENG=Service Dis&counts];
                      RunObject=Page 6058;
                      RunPageLink=Contract Type=FIELD(Contract Type),
                                  Contract No.=FIELD(Contract No.);
                      Image=Discount }
      { 136     ;2   ;Action    ;
                      CaptionML=[ENU=Service &Hours;
                                 ENG=Service &Hours];
                      RunObject=Page 5916;
                      RunPageLink=Service Contract No.=FIELD(Contract No.),
                                  Service Contract Type=FILTER(Contract);
                      Image=ServiceHours }
      { 21      ;2   ;ActionGroup;
                      CaptionML=[ENU=Statistics;
                                 ENG=Statistics];
                      Image=Statistics }
      { 178     ;3   ;Action    ;
                      ShortCutKey=F7;
                      CaptionML=[ENU=Statistics;
                                 ENG=Statistics];
                      RunObject=Page 6059;
                      RunPageLink=Contract Type=CONST(Contract),
                                  Contract No.=FIELD(Contract No.);
                      Promoted=Yes;
                      Image=Statistics;
                      PromotedCategory=Process }
      { 97      ;3   ;Action    ;
                      CaptionML=[ENU=Tr&endscape;
                                 ENG=Tr&endscape];
                      RunObject=Page 6060;
                      RunPageLink=Contract Type=CONST(Contract),
                                  Contract No.=FIELD(Contract No.);
                      Image=Trendscape }
      { 66      ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ENG=""] }
      { 145     ;2   ;Action    ;
                      CaptionML=[ENU=Filed Contracts;
                                 ENG=Filed Contracts];
                      RunObject=Page 6073;
                      RunPageView=SORTING(Contract Type Relation,Contract No. Relation,File Date,File Time)
                                  ORDER(Descending);
                      RunPageLink=Contract Type Relation=FIELD(Contract Type),
                                  Contract No. Relation=FIELD(Contract No.);
                      Image=Agreement }
      { 99      ;2   ;Action    ;
                      CaptionML=[ENU=Co&mments;
                                 ENG=Co&mments];
                      RunObject=Page 5911;
                      RunPageLink=Table Name=CONST(Service Contract),
                                  Table Subtype=FIELD(Contract Type),
                                  No.=FIELD(Contract No.),
                                  Table Line No.=CONST(0);
                      Image=ViewComments }
      { 194     ;2   ;Action    ;
                      CaptionML=[ENU=&Gain/Loss Entries;
                                 ENG=&Gain/Loss Entries];
                      RunObject=Page 6064;
                      RunPageView=SORTING(Contract No.,Change Date)
                                  ORDER(Descending);
                      RunPageLink=Contract No.=FIELD(Contract No.);
                      Image=GainLossEntries }
      { 65      ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ENG=""] }
      { 5       ;1   ;ActionGroup;
                      CaptionML=[ENU=History;
                                 ENG=History] }
      { 116     ;2   ;Action    ;
                      CaptionML=[ENU=C&hange Log;
                                 ENG=C&hange Log];
                      RunObject=Page 6063;
                      RunPageView=SORTING(Contract No.)
                                  ORDER(Descending);
                      RunPageLink=Contract No.=FIELD(Contract No.);
                      Image=ChangeLog }
      { 36      ;2   ;Separator  }
      { 149     ;2   ;Action    ;
                      CaptionML=[ENU=&Warranty Ledger Entries;
                                 ENG=&Warranty Ledger Entries];
                      RunObject=Page 5913;
                      RunPageView=SORTING(Service Contract No.,Posting Date,Document No.);
                      RunPageLink=Service Contract No.=FIELD(Contract No.);
                      Image=WarrantyLedger }
      { 82      ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ENG=""] }
      { 96      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=Service Ledger E&ntries;
                                 ENG=Service Ledger E&ntries];
                      RunObject=Page 5912;
                      RunPageView=SORTING(Service Contract No.);
                      RunPageLink=Service Contract No.=FIELD(Contract No.);
                      Image=ServiceLedger }
      { 98      ;2   ;Separator  }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 7       ;1   ;ActionGroup;
                      CaptionML=[ENU=General;
                                 ENG=General] }
      { 112     ;2   ;Action    ;
                      Ellipsis=Yes;
                      CaptionML=[ENU=&Print;
                                 ENG=&Print];
                      Promoted=Yes;
                      Image=Print;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 DocPrint@1001 : Codeunit 229;
                               BEGIN
                                 DocPrint.PrintServiceContract(Rec);
                               END;
                                }
      { 9       ;1   ;ActionGroup;
                      CaptionML=[ENU=New Documents;
                                 ENG=New Documents] }
      { 110     ;2   ;Action    ;
                      CaptionML=[ENU=Create Service Credit &Memo;
                                 ENG=Create Service Credit &Memo];
                      Image=CreateCreditMemo;
                      OnAction=VAR
                                 W1@1000 : Dialog;
                                 CreditNoteNo@1001 : Code[20];
                                 i@1003 : Integer;
                                 j@1004 : Integer;
                                 LineFound@1005 : Boolean;
                               BEGIN
                                 CurrPage.UPDATE;
                                 TESTFIELD(Status,Status::Signed);
                                 IF "No. of Unposted Credit Memos" <> 0 THEN
                                   IF NOT CONFIRM(Text009) THEN
                                     EXIT;

                                 ServContractMgt.CopyCheckSCDimToTempSCDim(Rec);

                                 IF NOT CONFIRM(Text010,FALSE) THEN
                                   EXIT;

                                 ServContractLine.RESET;
                                 ServContractLine.SETCURRENTKEY("Contract Type","Contract No.",Credited,"New Line");
                                 ServContractLine.SETRANGE("Contract Type","Contract Type");
                                 ServContractLine.SETRANGE("Contract No.","Contract No.");
                                 ServContractLine.SETRANGE(Credited,FALSE);
                                 ServContractLine.SETFILTER("Credit Memo Date",'>%1&<=%2',0D,WORKDATE);
                                 i := ServContractLine.COUNT;
                                 j := 0;
                                 IF ServContractLine.FIND('-') THEN BEGIN
                                   LineFound := TRUE;
                                   W1.OPEN(
                                     Text011 +
                                     '@1@@@@@@@@@@@@@@@@@@@@@');
                                   CLEAR(ServContractMgt);
                                   ServContractMgt.InitCodeUnit;
                                   REPEAT
                                     ServContractLine1 := ServContractLine;
                                     CreditNoteNo := ServContractMgt.CreateContractLineCreditMemo(ServContractLine1,FALSE);
                                     j := j + 1;
                                     W1.UPDATE(1,ROUND(j / i * 10000,1));
                                   UNTIL ServContractLine.NEXT = 0;
                                   ServContractMgt.FinishCodeunit;
                                   W1.CLOSE;
                                   CurrPage.UPDATE(FALSE);
                                 END;
                                 ServContractLine.SETFILTER("Credit Memo Date",'>%1',WORKDATE);
                                 IF CreditNoteNo <> '' THEN
                                   MESSAGE(STRSUBSTNO(Text012,CreditNoteNo))
                                 ELSE
                                   IF NOT ServContractLine.FIND('-') OR LineFound THEN
                                     MESSAGE(Text013)
                                   ELSE
                                     MESSAGE(Text016,ServContractLine.FIELDCAPTION("Credit Memo Date"),ServContractLine."Credit Memo Date");
                               END;
                                }
      { 83      ;2   ;Action    ;
                      Name=CreateServiceInvoice;
                      CaptionML=[ENU=Create Service &Invoice;
                                 ENG=Create Service &Invoice];
                      Promoted=Yes;
                      Image=NewInvoice;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.UPDATE;
                                 TESTFIELD(Status,Status::Signed);
                                 TESTFIELD("Change Status","Change Status"::Locked);

                                 IF "No. of Unposted Invoices" <> 0 THEN
                                   IF NOT CONFIRM(Text003) THEN
                                     EXIT;

                                 IF "Invoice Period" = "Invoice Period"::None THEN
                                   ERROR(STRSUBSTNO(
                                       Text004,
                                       TABLECAPTION,"Contract No.",FIELDCAPTION("Invoice Period"),FORMAT("Invoice Period")));

                                 IF "Next Invoice Date" > WORKDATE THEN
                                   IF ("Last Invoice Date" = 0D) AND
                                      ("Starting Date" < "Next Invoice Period Start")
                                   THEN BEGIN
                                     CLEAR(ServContractMgt);
                                     ServContractMgt.InitCodeUnit;
                                     IF ServContractMgt.CreateRemainingPeriodInvoice(Rec) <> '' THEN
                                       MESSAGE(Text006);
                                     ServContractMgt.FinishCodeunit;
                                     EXIT;
                                   END ELSE
                                     ERROR(Text005);

                                 ServContractMgt.CopyCheckSCDimToTempSCDim(Rec);

                                 IF CONFIRM(Text007) THEN BEGIN
                                   CLEAR(ServContractMgt);
                                   ServContractMgt.InitCodeUnit;
                                   ServContractMgt.CreateInvoice(Rec);
                                   ServContractMgt.FinishCodeunit;
                                   MESSAGE(Text008);
                                 END;
                               END;
                                }
      { 111     ;2   ;Separator ;
                      CaptionML=[ENU="";
                                 ENG=""] }
      { 11      ;1   ;ActionGroup;
                      CaptionML=[ENU=Lock;
                                 ENG=Lock] }
      { 73      ;2   ;Action    ;
                      Name=LockContract;
                      CaptionML=[ENU=&Lock Contract;
                                 ENG=&Lock Contract];
                      Promoted=Yes;
                      Image=Lock;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 LockOpenServContract@1001 : Codeunit 5943;
                               BEGIN
                                 CurrPage.UPDATE;
                                 LockOpenServContract.LockServContract(Rec);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 74      ;2   ;Action    ;
                      Name=OpenContract;
                      CaptionML=[ENU=&Open Contract;
                                 ENG=&Open Contract];
                      Image=ReOpen;
                      OnAction=VAR
                                 LockOpenServContract@1001 : Codeunit 5943;
                               BEGIN
                                 CurrPage.UPDATE;
                                 LockOpenServContract.OpenServContract(Rec);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 72      ;2   ;Separator  }
      { 137     ;1   ;ActionGroup;
                      CaptionML=[ENU=F&unctions;
                                 ENG=F&unctions];
                      Image=Action }
      { 75      ;2   ;Action    ;
                      Name=SelectContractLines;
                      CaptionML=[ENU=&Select Contract Lines;
                                 ENG=&Select Contract Lines];
                      Image=CalculateLines;
                      OnAction=BEGIN
                                 CheckRequiredFields;
                                 GetServItemLine;
                               END;
                                }
      { 77      ;2   ;Action    ;
                      CaptionML=[ENU=&Remove Contract Lines;
                                 ENG=&Remove Contract Lines];
                      Image=RemoveLine;
                      OnAction=BEGIN
                                 ServContractLine.RESET;
                                 ServContractLine.SETRANGE("Contract Type","Contract Type");
                                 ServContractLine.SETRANGE("Contract No.","Contract No.");
                                 REPORT.RUNMODAL(REPORT::"Remove Lines from Contract",TRUE,TRUE,ServContractLine);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 76      ;2   ;Action    ;
                      Name=SignContract;
                      CaptionML=[ENU=Si&gn Contract;
                                 ENG=Si&gn Contract];
                      Promoted=Yes;
                      Image=Signature;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 SignServContractDoc@1001 : Codeunit 5944;
                               BEGIN
                                 CurrPage.UPDATE;
                                 SignServContractDoc.SignContract(Rec);
                                 CurrPage.UPDATE;
                               END;
                                }
      { 89      ;2   ;Separator  }
      { 103     ;2   ;Action    ;
                      CaptionML=[ENU=C&hange Customer;
                                 ENG=C&hange Customer];
                      Image=ChangeCustomer;
                      OnAction=BEGIN
                                 CLEAR(ChangeCustomerinContract);
                                 ChangeCustomerinContract.SetRecord("Contract No.");
                                 ChangeCustomerinContract.RUNMODAL;
                               END;
                                }
      { 20      ;2   ;Action    ;
                      CaptionML=[ENU=Copy &Document...;
                                 ENG=Copy &Document...];
                      Promoted=Yes;
                      Image=CopyDocument;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CheckRequiredFields;
                                 CLEAR(CopyServDoc);
                                 CopyServDoc.SetServContractHeader(Rec);
                                 CopyServDoc.RUNMODAL;
                               END;
                                }
      { 150     ;2   ;Action    ;
                      CaptionML=[ENU=&File Contract;
                                 ENG=&File Contract];
                      Image=Agreement;
                      OnAction=BEGIN
                                 IF CONFIRM(Text014) THEN
                                   FiledServContract.FileContract(Rec);
                               END;
                                }
      { 109     ;2   ;Separator  }
      { 1900000006;0 ;ActionContainer;
                      ActionContainerType=Reports }
      { 1903183006;1 ;Action    ;
                      CaptionML=[ENU=Contract Details;
                                 ENG=Contract Details];
                      ToolTipML=[ENU=Specifies billable prices for the job task that are related to items.;
                                 ENG=Specifies billable prices for the job task that are related to items.];
                      RunObject=Report 5971;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1906367306;1 ;Action    ;
                      CaptionML=[ENU=Contract Gain/Loss Entries;
                                 ENG=Contract Gain/Loss Entries];
                      ToolTipML=[ENU=Specifies billable prices for the job task that are related to G/L accounts, expressed in the local currency.;
                                 ENG=Specifies billable prices for the job task that are related to G/L accounts, expressed in the local currency.];
                      RunObject=Report 5983;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1906957906;1 ;Action    ;
                      CaptionML=[ENU=Contract Invoicing;
                                 ENG=Contract Invoicing];
                      ToolTipML=[ENU=Specifies all billable profits for the job task.;
                                 ENG=Specifies all billable profits for the job task.];
                      RunObject=Report 5984;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
      { 1902585006;1 ;Action    ;
                      CaptionML=[ENU=Contract Price Update - Test;
                                 ENG=Contract Price Update - Test];
                      RunObject=Report 5985;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
      { 1906186206;1 ;Action    ;
                      CaptionML=[ENU=Prepaid Contract;
                                 ENG=Prepaid Contract];
                      RunObject=Report 5986;
                      Promoted=No;
                      Image=Report;
                      PromotedCategory=Report }
      { 1905491506;1 ;Action    ;
                      CaptionML=[ENU=Expired Contract Lines;
                                 ENG=Expired Contract Lines];
                      RunObject=Report 5987;
                      Promoted=Yes;
                      Image=Report;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[ENU=General;
                           ENG=General] }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the service contract or service contract quote.;
                           ENG=Specifies the number of the service contract or service contract quote.];
                SourceExpr="Contract No.";
                Importance=Promoted;
                OnAssistEdit=BEGIN
                               IF AssistEdit(xRec) THEN
                                 CurrPage.UPDATE;
                             END;
                              }

    { 48  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a description of the service contract.;
                           ENG=Specifies a description of the service contract.];
                SourceExpr=Description }

    { 91  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the customer who owns the service items in the service contract/contract quote.;
                           ENG=Specifies the number of the customer who owns the service items in the service contract/contract quote.];
                SourceExpr="Customer No.";
                Importance=Promoted;
                OnValidate=BEGIN
                             CustomerNoOnAfterValidate;
                           END;
                            }

    { 80  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the contact who will receive the service delivery.;
                           ENG=Specifies the number of the contact who will receive the service delivery.];
                SourceExpr="Contact No." }

    { 42  ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the name of the customer in the service contract.;
                           ENG=Specifies the name of the customer in the service contract.];
                SourceExpr=Name }

    { 32  ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the customer's address.;
                           ENG=Specifies the customer's address.];
                SourceExpr=Address }

    { 120 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies an additional address line for the customer.;
                           ENG=Specifies an additional address line for the customer.];
                SourceExpr="Address 2" }

    { 1040000;2;Field     ;
                SourceExpr=City }

    { 1040002;2;Field     ;
                DrillDown=No;
                SourceExpr=County }

    { 50  ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the postal code of the address.;
                           ENG=Specifies the postcode of the address.];
                SourceExpr="Post Code" }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer phone number.;
                           ENG=Specifies the customer phone number.];
                SourceExpr="Phone No." }

    { 67  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's email address.;
                           ENG=Specifies the customer's email address.];
                SourceExpr="E-Mail" }

    { 158 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the contract group code assigned to the service contract.;
                           ENG=Specifies the contract group code assigned to the service contract.];
                SourceExpr="Contract Group Code" }

    { 30  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the salesperson assigned to this service contract.;
                           ENG=Specifies the code of the salesperson assigned to this service contract.];
                SourceExpr="Salesperson Code" }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the starting date of the service contract.;
                           ENG=Specifies the starting date of the service contract.];
                SourceExpr="Starting Date";
                Importance=Promoted;
                OnValidate=BEGIN
                             StartingDateOnAfterValidate;
                           END;
                            }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the status of the service contract or contract quote.;
                           ENG=Specifies the status of the service contract or contract quote.];
                SourceExpr=Status;
                Importance=Promoted;
                OnValidate=BEGIN
                             ActivateFields;
                             StatusOnAfterValidate;
                           END;
                            }

    { 23  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the responsibility center associated either with the customer in the service contract or with your company.;
                           ENG=Specifies the code of the responsibility centre associated either with the customer in the service contract or with your company.];
                SourceExpr="Responsibility Center" }

    { 63  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if a service contract or contract quote is locked or open for changes.;
                           ENG=Specifies if a service contract or contract quote is locked or open for changes.];
                SourceExpr="Change Status" }

    { 114 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the name of the person you regularly contact when you do business with the customer in this service contract.;
                           ENG=Specifies the name of the person you regularly contact when you do business with the customer in this service contract.];
                SourceExpr="Contact Name" }

    { 93  ;1   ;Part      ;
                Name=ServContractLines;
                SubPageLink=Contract No.=FIELD(Contract No.);
                PagePartID=Page6052 }

    { 1905885101;1;Group  ;
                CaptionML=[ENU=Invoicing;
                           ENG=Invoicing] }

    { 138 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the customer to whom you will send the invoice.;
                           ENG=Specifies the number of the customer to whom you will send the invoice.];
                SourceExpr="Bill-to Customer No.";
                Importance=Promoted;
                OnValidate=BEGIN
                             BilltoCustomerNoOnAfterValidat;
                           END;
                            }

    { 140 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the contact who receives the invoice.;
                           ENG=Specifies the number of the contact who receives the invoice.];
                SourceExpr="Bill-to Contact No." }

    { 122 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the name of the customer you will send the invoice to.;
                           ENG=Specifies the name of the customer you will send the invoice to.];
                SourceExpr="Bill-to Name" }

    { 123 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the customer address.;
                           ENG=Specifies the customer address.];
                SourceExpr="Bill-to Address" }

    { 130 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies an additional line of the address.;
                           ENG=Specifies an additional line of the address.];
                SourceExpr="Bill-to Address 2" }

    { 1040004;2;Field     ;
                SourceExpr="Bill-to City" }

    { 1040006;2;Field     ;
                SourceExpr="Bill-to County" }

    { 139 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the postal code of the address.;
                           ENG=Specifies the postcode of the address.];
                SourceExpr="Bill-to Post Code" }

    { 133 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of your customer contact person, who you send the invoice to.;
                           ENG=Specifies the name of your customer contact person, who you send the invoice to.];
                SourceExpr="Bill-to Contact" }

    { 132 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the customer's reference number.;
                           ENG=Specifies the customer's reference number.];
                SourceExpr="Your Reference" }

    { 118 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code associated with the service contract account group.;
                           ENG=Specifies the code associated with the service contract account group.];
                SourceExpr="Serv. Contract Acc. Gr. Code" }

    { 85  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a dimension value code for the document line.;
                           ENG=Specifies a dimension value code for the document line.];
                SourceExpr="Shortcut Dimension 1 Code" }

    { 84  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a dimension value code for the document line.;
                           ENG=Specifies a dimension value code for the document line.];
                SourceExpr="Shortcut Dimension 2 Code" }

    { 52  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the payment terms code for the customer in the contract.;
                           ENG=Specifies the payment terms code for the customer in the contract.];
                SourceExpr="Payment Terms Code";
                Importance=Promoted }

    { 53  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the currency used to calculate the amounts in the documents related to this contract.;
                           ENG=Specifies the currency used to calculate the amounts in the documents related to this contract.];
                SourceExpr="Currency Code";
                Importance=Promoted }

    { 1906801201;1;Group  ;
                CaptionML=[ENU=Shipping;
                           ENG=Shipping] }

    { 44  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the ship-to code for the customer.;
                           ENG=Specifies the ship-to code for the customer.];
                SourceExpr="Ship-to Code";
                Importance=Promoted;
                OnValidate=BEGIN
                             ShiptoCodeOnAfterValidate;
                           END;
                            }

    { 162 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the customer name.;
                           ENG=Specifies the customer name.];
                SourceExpr="Ship-to Name" }

    { 164 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the customer address.;
                           ENG=Specifies the customer address.];
                SourceExpr="Ship-to Address" }

    { 166 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies an additional line of the address.;
                           ENG=Specifies an additional line of the address.];
                SourceExpr="Ship-to Address 2" }

    { 1040008;2;Field     ;
                SourceExpr="Ship-to City" }

    { 1040010;2;Field     ;
                SourceExpr="Ship-to County" }

    { 128 ;2   ;Field     ;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the postal code of the address.;
                           ENG=Specifies the postcode of the address.];
                SourceExpr="Ship-to Post Code";
                Importance=Promoted }

    { 1902138501;1;Group  ;
                CaptionML=[ENU=Service;
                           ENG=Service] }

    { 188 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of the service zone of the customer ship-to address.;
                           ENG=Specifies the code of the service zone of the customer ship-to address.];
                SourceExpr="Service Zone Code";
                Importance=Promoted }

    { 186 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a default service period for the items in the contract.;
                           ENG=Specifies a default service period for the items in the contract.];
                SourceExpr="Service Period";
                OnValidate=BEGIN
                             ServicePeriodOnAfterValidate;
                           END;
                            }

    { 183 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date of the first expected service for the service items in the contract.;
                           ENG=Specifies the date of the first expected service for the service items in the contract.];
                SourceExpr="First Service Date";
                Importance=Promoted;
                Editable=FirstServiceDateEditable;
                OnValidate=BEGIN
                             FirstServiceDateOnAfterValidat;
                           END;
                            }

    { 181 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the response time for the service contract.;
                           ENG=Specifies the response time for the service contract.];
                SourceExpr="Response Time (Hours)";
                OnValidate=BEGIN
                             ResponseTimeHoursOnAfterValida;
                           END;
                            }

    { 180 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the service order type assigned to service orders linked to this contract.;
                           ENG=Specifies the service order type assigned to service orders linked to this contract.];
                SourceExpr="Service Order Type" }

    { 1905361901;1;Group  ;
                CaptionML=[ENU=Invoice Details;
                           ENG=Invoice Details] }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the amount that will be invoiced annually for the service contract or contract quote.;
                           ENG=Specifies the amount that will be invoiced annually for the service contract or contract quote.];
                SourceExpr="Annual Amount";
                OnValidate=BEGIN
                             AnnualAmountOnAfterValidate;
                           END;
                            }

    { 153 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies if the contents of the Calcd. Annual Amount field are copied into the Annual Amount field in the service contract or contract quote.;
                           ENG=Specifies if the contents of the Calcd. Annual Amount field are copied into the Annual Amount field in the service contract or contract quote.];
                SourceExpr="Allow Unbalanced Amounts";
                OnValidate=BEGIN
                             AllowUnbalancedAmountsOnAfterV;
                           END;
                            }

    { 25  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the sum of the Line Amount field values on all contract lines associated with the service contract or contract quote.;
                           ENG=Specifies the sum of the Line Amount field values on all contract lines associated with the service contract or contract quote.];
                SourceExpr="Calcd. Annual Amount" }

    { 107 ;2   ;Field     ;
                Name=InvoicePeriod;
                ToolTipML=[ENU=Specifies the invoice period for the service contract.;
                           ENG=Specifies the invoice period for the service contract.];
                SourceExpr="Invoice Period";
                Importance=Promoted }

    { 16  ;2   ;Field     ;
                Name=NextInvoiceDate;
                ToolTipML=[ENU=Specifies the date of the next invoice for this service contract.;
                           ENG=Specifies the date of the next invoice for this service contract.];
                SourceExpr="Next Invoice Date";
                Importance=Promoted }

    { 12  ;2   ;Field     ;
                Name=AmountPerPeriod;
                ToolTipML=[ENU=Specifies the amount that will be invoiced for each invoice period for the service contract.;
                           ENG=Specifies the amount that will be invoiced for each invoice period for the service contract.];
                SourceExpr="Amount per Period" }

    { 18  ;2   ;Field     ;
                Name=NextInvoicePeriod;
                CaptionML=[ENU=Next Invoice Period;
                           ENG=Next Invoice Period];
                SourceExpr=NextInvoicePeriod }

    { 134 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when this service contract was last invoiced.;
                           ENG=Specifies the date when this service contract was last invoiced.];
                SourceExpr="Last Invoice Date" }

    { 54  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that this service contract is prepaid.;
                           ENG=Specifies that this service contract is prepaid.];
                SourceExpr=Prepaid;
                Enabled=PrepaidEnable;
                OnValidate=BEGIN
                             PrepaidOnAfterValidate;
                           END;
                            }

    { 79  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that a credit memo is created when you remove a contract line.;
                           ENG=Specifies that a credit memo is created when you remove a contract line.];
                SourceExpr="Automatic Credit Memos" }

    { 173 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that you can only invoice the contract if you have posted a service order since last time you invoiced the contract.;
                           ENG=Specifies that you can only invoice the contract if you have posted a service order since last time you invoiced the contract.];
                SourceExpr="Invoice after Service";
                Enabled=InvoiceAfterServiceEnable;
                OnValidate=BEGIN
                             InvoiceafterServiceOnAfterVali;
                           END;
                            }

    { 105 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies you want to combine invoices for this service contract with invoices for other service contracts with the same bill-to customer.;
                           ENG=Specifies you want to combine invoices for this service contract with invoices for other service contracts with the same bill-to customer.];
                SourceExpr="Combine Invoices" }

    { 151 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies that you want the lines for this contract to appear as text on the invoice.;
                           ENG=Specifies that you want the lines for this contract to appear as text on the invoice.];
                SourceExpr="Contract Lines on Invoice" }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of unposted service invoices linked to the service contract.;
                           ENG=Specifies the number of unposted service invoices linked to the service contract.];
                SourceExpr="No. of Unposted Invoices" }

    { 113 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of unposted credit memos linked to the service contract.;
                           ENG=Specifies the number of unposted credit memos linked to the service contract.];
                SourceExpr="No. of Unposted Credit Memos" }

    { 46  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of posted service invoices linked to the service contract.;
                           ENG=Specifies the number of posted service invoices linked to the service contract.];
                SourceExpr="No. of Posted Invoices" }

    { 146 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of posted credit memos linked to this service contract.;
                           ENG=Specifies the number of posted credit memos linked to this service contract.];
                SourceExpr="No. of Posted Credit Memos" }

    { 1904390801;1;Group  ;
                CaptionML=[ENU=Price Update;
                           ENG=Price Update] }

    { 155 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the price update period for this service contract.;
                           ENG=Specifies the price update period for this service contract.];
                SourceExpr="Price Update Period";
                Importance=Promoted }

    { 60  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the next date you want contract prices to be updated.;
                           ENG=Specifies the next date you want contract prices to be updated.];
                SourceExpr="Next Price Update Date";
                Importance=Promoted }

    { 58  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the price update percentage you used the last time you updated the contract prices.;
                           ENG=Specifies the price update percentage you used the last time you updated the contract prices.];
                SourceExpr="Last Price Update %" }

    { 57  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date you last updated the contract prices.;
                           ENG=Specifies the date you last updated the contract prices.];
                SourceExpr="Last Price Update Date" }

    { 59  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the standard text code printed on service invoices, informing the customer which prices have been updated since the last invoice.;
                           ENG=Specifies the standard text code printed on service invoices, informing the customer which prices have been updated since the last invoice.];
                SourceExpr="Print Increase Text" }

    { 56  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the standard text code printed on service invoices, informing the customer which prices have been updated since the last invoice.;
                           ENG=Specifies the standard text code printed on service invoices, informing the customer which prices have been updated since the last invoice.];
                SourceExpr="Price Inv. Increase Code" }

    { 1901902601;1;Group  ;
                CaptionML=[ENU=Details;
                           ENG=Details] }

    { 40  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the date when the service contract expires.;
                           ENG=Specifies the date when the service contract expires.];
                SourceExpr="Expiration Date";
                OnValidate=BEGIN
                             ExpirationDateOnAfterValidate;
                           END;
                            }

    { 168 ;2   ;Field     ;
                ToolTipML=[ENU=Specifies a reason code for canceling the service contract.;
                           ENG=Specifies a reason code for cancelling the service contract.];
                SourceExpr="Cancel Reason Code" }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the maximum unit price that can be set for a resource on all service orders and lines for the service contract.;
                           ENG=Specifies the maximum unit price that can be set for a resource on all service orders and lines for the service contract.];
                SourceExpr="Max. Labor Unit Price" }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1902018507;1;Part   ;
                SubPageLink=No.=FIELD(Bill-to Customer No.);
                PagePartID=Page9082;
                Visible=TRUE;
                PartType=Page }

    { 1900316107;1;Part   ;
                SubPageLink=No.=FIELD(Customer No.);
                PagePartID=Page9084;
                Visible=TRUE;
                PartType=Page }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1016 : TextConst '@@@=Contract No. must not be blank in Service Contract Header SC00004;ENU=%1 must not be blank in %2 %3;ENG=%1 must not be blank in %2 %3';
      Text003@1003 : TextConst 'ENU=There are unposted invoices associated with this contract.\\Do you want to continue?;ENG=There are unposted invoices associated with this contract.\\Do you want to continue?';
      Text004@1004 : TextConst '@@@=You cannot create an invoice for Service Contract Header Contract No. because Invoice Period is Month.;ENU=You cannot create an invoice for %1 %2 because %3 is %4.;ENG=You cannot create an invoice for %1 %2 because %3 is %4.';
      Text005@1005 : TextConst 'ENU=The next invoice date has not expired.;ENG=The next invoice date has not expired.';
      Text006@1006 : TextConst 'ENU=An invoice was created successfully.;ENG=An invoice was created successfully.';
      Text007@1007 : TextConst 'ENU=Do you want to create an invoice for the contract?;ENG=Do you want to create an invoice for the contract?';
      Text008@1008 : TextConst 'ENU=The invoice was created successfully.;ENG=The invoice was created successfully.';
      Text009@1009 : TextConst 'ENU=There are unposted credit memos associated with this contract.\\Do you want to continue?;ENG=There are unposted credit memos associated with this contract.\\Do you want to continue?';
      Text010@1010 : TextConst 'ENU=Do you want to create a credit note for the contract?;ENG=Do you want to create a credit note for the contract?';
      Text011@1011 : TextConst 'ENU=Processing...        \\;ENG=Processing...        \\';
      Text012@1012 : TextConst 'ENU=Contract lines have been credited.\\Credit memo %1 was created.;ENG=Contract lines have been credited.\\Credit memo %1 was created.';
      Text013@1013 : TextConst 'ENU=A credit memo cannot be created. There must be at least one invoiced and expired service contract line which has not yet been credited.;ENG=A credit memo cannot be created. There must be at least one invoiced and expired service contract line which has not yet been credited.';
      Text014@1014 : TextConst 'ENU=Do you want to file the contract?;ENG=Do you want to file the contract?';
      ServContractLine@1015 : Record 5964;
      ServContractLine1@1001 : Record 5964;
      FiledServContract@1017 : Record 5970;
      ChangeCustomerinContract@1000 : Report 6037;
      CopyServDoc@1021 : Report 5979;
      ServContractMgt@1018 : Codeunit 5940;
      UserMgt@1019 : Codeunit 5700;
      Text015@1022 : TextConst '@@@=Status must not be Locked in Service Contract Header SC00005;ENU=%1 must not be %2 in %3 %4;ENG=%1 must not be %2 in %3 %4';
      Text016@1023 : TextConst '@@@=A credit memo cannot be created, because the Credit Memo Date 03-02-11 is after the work date.;ENU=A credit memo cannot be created, because the %1 %2 is after the work date.;ENG=A credit memo cannot be created, because the %1 %2 is after the work date.';
      FirstServiceDateEditable@19053837 : Boolean INDATASET;
      PrepaidEnable@19025160 : Boolean INDATASET;
      InvoiceAfterServiceEnable@19024761 : Boolean INDATASET;

    LOCAL PROCEDURE CollectShpmntsByLineContractNo@4(VAR TempServShptHeader@1002 : TEMPORARY Record 5990);
    VAR
      ServShptHeader@1000 : Record 5990;
      ServShptLine@1001 : Record 5991;
    BEGIN
      TempServShptHeader.RESET;
      TempServShptHeader.DELETEALL;
      ServShptLine.RESET;
      ServShptLine.SETCURRENTKEY("Contract No.");
      ServShptLine.SETRANGE("Contract No.","Contract No.");
      IF ServShptLine.FIND('-') THEN
        REPEAT
          IF ServShptHeader.GET(ServShptLine."Document No.") THEN BEGIN
            TempServShptHeader.COPY(ServShptHeader);
            IF TempServShptHeader.INSERT THEN;
          END;
        UNTIL ServShptLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ActivateFields@2();
    BEGIN
      FirstServiceDateEditable := Status <> Status::Signed;
      PrepaidEnable := (NOT "Invoice after Service" OR Prepaid);
      InvoiceAfterServiceEnable := (NOT Prepaid OR "Invoice after Service");
    END;

    PROCEDURE CheckRequiredFields@1();
    BEGIN
      IF "Contract No." = '' THEN
        ERROR(Text000,FIELDCAPTION("Contract No."),TABLECAPTION,"Contract No.");
      IF "Customer No." = '' THEN
        ERROR(Text000,FIELDCAPTION("Customer No."),TABLECAPTION,"Contract No.");
      IF FORMAT("Service Period") = '' THEN
        ERROR(Text000,FIELDCAPTION("Service Period"),TABLECAPTION,"Contract No.");
      IF "First Service Date" = 0D THEN
        ERROR(Text000,FIELDCAPTION("First Service Date"),TABLECAPTION,"Contract No.");
      IF Status = Status::Canceled THEN
        ERROR(Text015,FIELDCAPTION(Status),FORMAT(Status),TABLECAPTION,"Contract No.");
      IF "Change Status" = "Change Status"::Locked THEN
        ERROR(Text015,FIELDCAPTION("Change Status"),FORMAT("Change Status"),TABLECAPTION,"Contract No.");
    END;

    LOCAL PROCEDURE GetServItemLine@5();
    VAR
      ContractLineSelection@1005 : Page 6057;
    BEGIN
      CLEAR(ContractLineSelection);
      ContractLineSelection.SetSelection("Customer No.","Ship-to Code","Contract Type","Contract No.");
      ContractLineSelection.RUNMODAL;
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE StartingDateOnAfterValidate@19020273();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE StatusOnAfterValidate@19072689();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE CustomerNoOnAfterValidate@19016267();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE BilltoCustomerNoOnAfterValidat@19044114();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ShiptoCodeOnAfterValidate@19065015();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE ResponseTimeHoursOnAfterValida@19023139();
    BEGIN
      CurrPage.UPDATE(TRUE);
    END;

    LOCAL PROCEDURE ServicePeriodOnAfterValidate@19066190();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE AnnualAmountOnAfterValidate@19051853();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE InvoiceafterServiceOnAfterVali@19065496();
    BEGIN
      ActivateFields;
    END;

    LOCAL PROCEDURE AllowUnbalancedAmountsOnAfterV@19018309();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE PrepaidOnAfterValidate@19004759();
    BEGIN
      ActivateFields;
    END;

    LOCAL PROCEDURE ExpirationDateOnAfterValidate@19018149();
    BEGIN
      CurrPage.UPDATE;
    END;

    LOCAL PROCEDURE FirstServiceDateOnAfterValidat@6();
    BEGIN
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

