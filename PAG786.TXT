OBJECT Page 786 Vendor Picture
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Vendor Picture;
               ENG=Vendor Picture];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table23;
    PageType=CardPart;
    OnOpenPage=BEGIN
                 CameraAvailable := CameraProvider.IsAvailable;
                 IF CameraAvailable THEN
                   CameraProvider := CameraProvider.Create;
               END;

    OnAfterGetCurrRecord=BEGIN
                           SetEditableOnPictureActions;
                         END;

    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 3       ;1   ;Action    ;
                      Name=TakePicture;
                      CaptionML=[ENU=Take;
                                 ENG=Take];
                      ToolTipML=[ENU=Activate the camera on the device.;
                                 ENG=Activate the camera on the device.];
                      ApplicationArea=#All;
                      Promoted=Yes;
                      Visible=CameraAvailable;
                      PromotedIsBig=Yes;
                      Image=Camera;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CameraOptions@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraOptions";
                               BEGIN
                                 IF NOT CameraAvailable THEN
                                   EXIT;
                                 CameraOptions := CameraOptions.CameraOptions;
                                 CameraOptions.Quality := 100;
                                 CameraProvider.RequestPictureAsync(CameraOptions);
                               END;
                                }
      { 4       ;1   ;Action    ;
                      Name=ImportPicture;
                      CaptionML=[ENU=Import;
                                 ENG=Import];
                      ToolTipML=[ENU=Import a picture file.;
                                 ENG=Import a picture file.];
                      ApplicationArea=#All;
                      Image=Import;
                      OnAction=VAR
                                 FileManagement@1001 : Codeunit 419;
                                 FileName@1000 : Text;
                                 ClientFileName@1002 : Text;
                               BEGIN
                                 IF Image.HASVALUE THEN
                                   IF NOT CONFIRM(OverrideImageQst) THEN
                                     EXIT;

                                 FileName := FileManagement.UploadFile(SelectPictureTxt,ClientFileName);
                                 IF FileName = '' THEN
                                   EXIT;

                                 CLEAR(Image);
                                 Image.IMPORTFILE(FileName,ClientFileName);
                                 MODIFY(TRUE);
                                 IF FileManagement.DeleteServerFile(FileName) THEN;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=ExportFile;
                      CaptionML=[ENU=Export;
                                 ENG=Export];
                      ToolTipML=[ENU=Export the picture to a file.;
                                 ENG=Export the picture to a file.];
                      ApplicationArea=#All;
                      Enabled=DeleteExportEnabled;
                      Image=Export;
                      OnAction=VAR
                                 NameValueBuffer@1002 : Record 823;
                                 TempNameValueBuffer@1004 : TEMPORARY Record 823;
                                 FileManagement@1001 : Codeunit 419;
                                 ToFile@1003 : Text;
                                 ExportPath@1005 : Text;
                               BEGIN
                                 NameValueBuffer.DELETEALL;
                                 ExportPath := TEMPORARYPATH + "No." + FORMAT(Image.MEDIAID);
                                 Image.EXPORTFILE(ExportPath);
                                 FileManagement.GetServerDirectoryFilesList(TempNameValueBuffer,TEMPORARYPATH);
                                 TempNameValueBuffer.SETFILTER(Name,STRSUBSTNO('%1*',ExportPath));
                                 TempNameValueBuffer.FINDFIRST;
                                 ToFile := STRSUBSTNO('%1 %2.jpg',"No.",Name);
                                 DOWNLOAD(TempNameValueBuffer.Name,DownloadImageTxt,'','',ToFile);
                                 IF FileManagement.DeleteServerFile(TempNameValueBuffer.Name) THEN;
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=DeletePicture;
                      CaptionML=[ENU=Delete;
                                 ENG=Delete];
                      ToolTipML=[ENU=Delete the record.;
                                 ENG=Delete the record.];
                      ApplicationArea=#All;
                      Enabled=DeleteExportEnabled;
                      Image=Delete;
                      OnAction=BEGIN
                                 IF NOT CONFIRM(DeleteImageQst) THEN
                                   EXIT;

                                 CLEAR(Image);
                                 MODIFY(TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Field     ;
                ToolTipML=[ENU=Specifies the picture of the vendor, for example, a logo.;
                           ENG=Specifies the picture of the vendor, for example, a logo.];
                ApplicationArea=#All;
                SourceExpr=Image;
                ShowCaption=No }

  }
  CODE
  {
    VAR
      CameraProvider@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraProvider" WITHEVENTS RUNONCLIENT;
      CameraAvailable@1002 : Boolean;
      OverrideImageQst@1007 : TextConst 'ENU=The existing picture will be replaced. Do you want to continue?;ENG=The existing picture will be replaced. Do you want to continue?';
      DeleteImageQst@1003 : TextConst 'ENU=Are you sure you want to delete the picture?;ENG=Are you sure you want to delete the picture?';
      SelectPictureTxt@1001 : TextConst 'ENU=Select a picture to upload;ENG=Select a picture to upload';
      DeleteExportEnabled@1005 : Boolean;
      DownloadImageTxt@1006 : TextConst 'ENU=Download image;ENG=Download image';

    LOCAL PROCEDURE SetEditableOnPictureActions@1();
    BEGIN
      DeleteExportEnabled := Image.HASVALUE;
    END;

    EVENT CameraProvider@1000::PictureAvailable@10(PictureName@1001 : Text;PictureFilePath@1000 : Text);
    VAR
      File@1003 : File;
      Instream@1004 : InStream;
    BEGIN
      IF (PictureName = '') OR (PictureFilePath = '') THEN
        EXIT;

      IF Image.HASVALUE THEN
        IF NOT CONFIRM(OverrideImageQst) THEN BEGIN
          IF ERASE(PictureFilePath) THEN;
          EXIT;
        END;

      File.OPEN(PictureFilePath);
      File.CREATEINSTREAM(Instream);

      CLEAR(Image);
      Image.IMPORTSTREAM(Instream,PictureName);
      MODIFY(TRUE);

      File.CLOSE;
      IF ERASE(PictureFilePath) THEN;
    END;

    BEGIN
    END.
  }
}

