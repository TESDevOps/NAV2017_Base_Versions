OBJECT Codeunit 5335 Integration Table Synch.
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      IntegrationTableMappingHasNoMappedFieldsErr@1001 : TextConst '@@@="%1=""Integration Field Mapping"" table caption, %2=""Integration Field Mapping.Integration Table Mapping Name"" field caption, %3 Integration Table Mapping value";ENU=There are no field mapping rows for the %2 %3 in the %1 table.;ENG=There are no field mapping rows for the %2 %3 in the %1 table.';
      IntegrationNotActivatedErr@1010 : TextConst 'ENU=Integration Management must be activated before you can start the synchronization processes.;ENG=Integration Management must be activated before you can start the synchronisation processes.';
      RecordMustBeIntegrationRecordErr@1011 : TextConst '@@@="%1 = Table caption";ENU=Table %1 must be registered for integration.;ENG=Table %1 must be registered for integration.';
      IntegrationRecordNotFoundErr@1002 : TextConst '@@@="%1 = Internationalized RecordID, such as ''Customer 1234''";ENU=The integration record for %1 was not found.;ENG=The integration record for %1 was not found.';
      CurrentIntegrationSynchJob@1005 : Record 5338;
      CurrentIntegrationTableMapping@1020 : Record 5335;
      TempIntegrationFieldMapping@1022 : TEMPORARY Record 5337;
      IntegrationTableConnectionType@1008 : TableConnectionType;
      SynchActionType@1003 : 'None,Insert,Modify,ForceModify,IgnoreUnchanged,Fail,Skip';
      JobState@1012 : 'Ready,Created,In Progress';
      UnableToDetectSynchDirectionErr@1017 : TextConst 'ENU=The synchronization direction cannot be determined.;ENG=The synchronisation direction cannot be determined.';
      MappingDoesNotAllowDirectionErr@1018 : TextConst '@@@="%1 = Integration Table Mapping caption, %2 Integration Table Mapping Name, %3 = the calculated synch. direction (FromIntegrationTable|ToIntegrationTable)";ENU=The %1 %2 is not configured for %3 synchronization.;ENG=The %1 %2 is not configured for %3 synchronisation.';
      InvalidStateErr@1013 : TextConst 'ENU=The synchronization process is in a state that is not valid.;ENG=The synchronisation process is in a state that is not valid.';
      DirectionChangeIsNotSupportedErr@1019 : TextConst 'ENU=You cannot change the synchronization direction after a job has started.;ENG=You cannot change the synchronisation direction after a job has started.';

    PROCEDURE BeginIntegrationSynchJob@38(ConnectionType@1005 : TableConnectionType;IntegrationTableMapping@1001 : Record 5335) : Boolean;
    BEGIN
      EnsureState(JobState::Ready);

      CLEAR(CurrentIntegrationSynchJob);
      CLEAR(CurrentIntegrationTableMapping);

      IntegrationTableConnectionType := ConnectionType;
      CurrentIntegrationTableMapping := IntegrationTableMapping;

      IF StartIntegrationSynchJob(IntegrationTableMapping) THEN BEGIN
        JobState := JobState::Created;
        EXIT(TRUE);
      END;
    END;

    PROCEDURE Synchronize@41(SourceRecordRef@1000 : RecordRef;VAR DestinationRecordRef@1005 : RecordRef;IgnoreChanges@1004 : Boolean;IgnoreSynchOnlyCoupledRecords@1001 : Boolean) : Boolean;
    VAR
      IntegrationRecordSynch@1006 : Codeunit 5336;
      IntegrationRecSynchInvoke@1008 : Codeunit 5345;
      SynchDirection@1002 : Option;
      SynchAction@1003 : Option;
      ErrorMessage@1007 : Text;
    BEGIN
      EnsureState(JobState::Created);

      IF NOT DetermineSynchDirection(SourceRecordRef,CurrentIntegrationTableMapping,SynchDirection,ErrorMessage) THEN BEGIN
        FinishIntegrationSynchJob(ErrorMessage);
        EXIT(FALSE);
      END;

      // Ready to synch.
      COMMIT;

      // First synch. fixes direction
      IF JobState = JobState::Created THEN BEGIN
        CurrentIntegrationSynchJob."Synch. Direction" := SynchDirection;
        JobState := JobState::"In Progress";
        CurrentIntegrationSynchJob.MODIFY(TRUE);

        BuildTempIntegrationFieldMapping(CurrentIntegrationTableMapping,SynchDirection,TempIntegrationFieldMapping);
        COMMIT;
      END ELSE
        IF SynchDirection <> CurrentIntegrationSynchJob."Synch. Direction" THEN
          ERROR(DirectionChangeIsNotSupportedErr);

      IF IgnoreChanges THEN
        SynchAction := SynchActionType::ForceModify
      ELSE
        SynchAction := SynchActionType::Skip;

      IF NOT SourceRecordRef.ISEMPTY THEN BEGIN
        IntegrationRecordSynch.SetFieldMapping(TempIntegrationFieldMapping);
        IntegrationRecSynchInvoke.SetContext(
          CurrentIntegrationTableMapping,SourceRecordRef,DestinationRecordRef,
          IntegrationRecordSynch,SynchAction,IgnoreSynchOnlyCoupledRecords,CurrentIntegrationSynchJob.ID,
          IntegrationTableConnectionType);
        IF NOT IntegrationRecSynchInvoke.RUN THEN BEGIN
          SynchAction := SynchActionType::Fail;
          LogSynchError(SourceRecordRef,DestinationRecordRef,GETLASTERRORTEXT);
          IncrementSynchJobCounters(SynchAction);
          EXIT(FALSE);
        END;
        IntegrationRecSynchInvoke.GetContext(
          CurrentIntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationRecordSynch,SynchAction);

        IncrementSynchJobCounters(SynchAction);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE EndIntegrationSynchJob@50() : GUID;
    BEGIN
      IF CurrentIntegrationSynchJob."Finish Date/Time" = 0DT THEN
        FinishIntegrationSynchJob('');

      JobState := JobState::Ready;
      EXIT(CurrentIntegrationSynchJob.ID);
    END;

    PROCEDURE GetRowLastModifiedOn@2(IntegrationTableMapping@1000 : Record 5335;FromRecordRef@1001 : RecordRef) : DateTime;
    VAR
      IntegrationRecord@1002 : Record 5151;
      ModifiedFieldRef@1004 : FieldRef;
    BEGIN
      IF FromRecordRef.NUMBER = IntegrationTableMapping."Integration Table ID" THEN BEGIN
        ModifiedFieldRef := FromRecordRef.FIELD(IntegrationTableMapping."Int. Tbl. Modified On Fld. No.");
        EXIT(ModifiedFieldRef.VALUE);
      END;

      IF IntegrationRecord.FindByRecordId(FromRecordRef.RECORDID) THEN
        EXIT(IntegrationRecord."Modified On");
      ERROR(IntegrationRecordNotFoundErr,FORMAT(FromRecordRef.RECORDID,0,1));
    END;

    LOCAL PROCEDURE EnsureState@51(RequiredState@1000 : Option);
    BEGIN
      IF (JobState = JobState::"In Progress") AND (RequiredState = JobState::Created) THEN
        EXIT;

      IF RequiredState <> JobState THEN
        ERROR(InvalidStateErr);
    END;

    LOCAL PROCEDURE DetermineSynchDirection@49(SourceRecordRef@1000 : RecordRef;IntegrationTableMapping@1001 : Record 5335;VAR SynchDirection@1003 : Option;VAR ErrorMessage@1005 : Text) : Boolean;
    VAR
      DummyIntegrationTableMapping@1004 : Record 5335;
      TempSynchDirection@1002 : Option;
    BEGIN
      ErrorMessage := '';
      CASE SourceRecordRef.NUMBER OF
        IntegrationTableMapping."Table ID":
          TempSynchDirection := IntegrationTableMapping.Direction::ToIntegrationTable;
        IntegrationTableMapping."Integration Table ID":
          TempSynchDirection := IntegrationTableMapping.Direction::FromIntegrationTable;
        ELSE BEGIN
          ErrorMessage := UnableToDetectSynchDirectionErr;
          EXIT(FALSE);
        END;
      END;

      IF NOT (IntegrationTableMapping.Direction IN [TempSynchDirection,IntegrationTableMapping.Direction::Bidirectional]) THEN BEGIN
        DummyIntegrationTableMapping.Direction := TempSynchDirection;
        ErrorMessage :=
          STRSUBSTNO(
            MappingDoesNotAllowDirectionErr,IntegrationTableMapping.TABLECAPTION,IntegrationTableMapping.Name,
            DummyIntegrationTableMapping.Direction);
        EXIT(FALSE);
      END;

      SynchDirection := TempSynchDirection;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE StartIntegrationSynchJob@22(IntegrationTableMapping@1003 : Record 5335) : Boolean;
    BEGIN
      CreateIntegrationSynchJobEntry(IntegrationTableMapping.Name,IntegrationTableMapping.Direction);

      IF EnsureIntegrationServicesState(IntegrationTableMapping) THEN BEGIN // Prepare for processing
        COMMIT;
        EXIT(TRUE);
      END;
    END;

    LOCAL PROCEDURE FinishIntegrationSynchJob@14(FinalMessage@1000 : Text);
    BEGIN
      WITH CurrentIntegrationSynchJob DO BEGIN
        IF FinalMessage <> '' THEN
          Message := COPYSTR(FinalMessage,1,MAXSTRLEN(Message));
        "Finish Date/Time" := CURRENTDATETIME;
        MODIFY(TRUE);
      END;
      COMMIT;
    END;

    LOCAL PROCEDURE CreateIntegrationSynchJobEntry@8(MappingName@1001 : Code[20];MappingDirection@1000 : Option);
    BEGIN
      WITH CurrentIntegrationSynchJob DO
        IF ISEMPTY OR ISNULLGUID(ID) THEN BEGIN
          RESET;
          INIT;
          ID := CREATEGUID;
          "Start Date/Time" := CURRENTDATETIME;
          "Integration Table Mapping Name" := MappingName;
          "Synch. Direction" := MappingDirection;
          INSERT(TRUE);
          COMMIT;
        END;
    END;

    LOCAL PROCEDURE EnsureIntegrationServicesState@12(VAR IntegrationTableMapping@1000 : Record 5335) : Boolean;
    VAR
      IntegrationManagement@1001 : Codeunit 5150;
    BEGIN
      IF NOT IntegrationManagement.IsIntegrationActivated THEN BEGIN
        FinishIntegrationSynchJob(IntegrationNotActivatedErr);
        EXIT(FALSE);
      END;

      IF IntegrationManagement.IsIntegrationRecord(IntegrationTableMapping."Table ID") THEN
        EXIT(TRUE);

      IF IntegrationManagement.IsIntegrationRecordChild(IntegrationTableMapping."Table ID") THEN
        EXIT(TRUE);

      FinishIntegrationSynchJob(STRSUBSTNO(RecordMustBeIntegrationRecordErr,IntegrationTableMapping."Table ID"));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE BuildTempIntegrationFieldMapping@18(VAR IntegrationTableMapping@1000 : Record 5335;SynchDirection@1003 : Option;VAR TempIntegrationFieldMapping@1001 : Record 5337);
    VAR
      IntegrationFieldMapping@1002 : Record 5336;
    BEGIN
      WITH IntegrationFieldMapping DO BEGIN
        SETRANGE("Integration Table Mapping Name",IntegrationTableMapping.Name);
        SETFILTER(Direction,'%1|%2',SynchDirection,Direction::Bidirectional);
        IF ISEMPTY THEN
          ERROR(
            IntegrationTableMappingHasNoMappedFieldsErr,TABLECAPTION,
            FIELDCAPTION("Integration Table Mapping Name"),IntegrationTableMapping.Name);

        TempIntegrationFieldMapping.DELETEALL;
        FINDSET;
        REPEAT
          TempIntegrationFieldMapping.INIT;
          TempIntegrationFieldMapping."No." := "No.";
          TempIntegrationFieldMapping."Integration Table Mapping Name" := "Integration Table Mapping Name";
          TempIntegrationFieldMapping."Constant Value" := "Constant Value";
          IF SynchDirection = IntegrationTableMapping.Direction::ToIntegrationTable THEN BEGIN
            TempIntegrationFieldMapping."Source Field No." := "Field No.";
            TempIntegrationFieldMapping."Destination Field No." := "Integration Table Field No.";
            TempIntegrationFieldMapping."Validate Destination Field" := "Validate Integration Table Fld";
          END ELSE BEGIN
            TempIntegrationFieldMapping."Source Field No." := "Integration Table Field No.";
            TempIntegrationFieldMapping."Destination Field No." := "Field No.";
            TempIntegrationFieldMapping."Validate Destination Field" := "Validate Field";
          END;
          TempIntegrationFieldMapping.INSERT;
        UNTIL NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE LogSynchError@30(VAR SourceRecordRef@1000 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;ErrorMessage@1002 : Text);
    VAR
      IntegrationSynchJobErrors@1003 : Record 5339;
      DummyEmptyRecordID@1004 : RecordID;
    BEGIN
      IF DestinationRecordRef.NUMBER = 0 THEN
        IntegrationSynchJobErrors.LogSynchError(
          CurrentIntegrationSynchJob.ID,SourceRecordRef.RECORDID,DummyEmptyRecordID,ErrorMessage)
      ELSE BEGIN
        IntegrationSynchJobErrors.LogSynchError(
          CurrentIntegrationSynchJob.ID,SourceRecordRef.RECORDID,DestinationRecordRef.RECORDID,ErrorMessage);

        // Close destination - it is in error state and can no longer be used.
        DestinationRecordRef.CLOSE;
      END;
    END;

    LOCAL PROCEDURE CountSynchActionIn@19(ExpectedSynchActionValue@1000 : Option;ActualSynchActionValue@1001 : Option) : Integer;
    BEGIN
      IF ActualSynchActionValue = ExpectedSynchActionValue THEN
        EXIT(1);
      EXIT(0);
    END;

    LOCAL PROCEDURE IncrementSynchJobCounters@23(SynchAction@1000 : Option);
    BEGIN
      WITH CurrentIntegrationSynchJob DO BEGIN
        Inserted += CountSynchActionIn(SynchActionType::Insert,SynchAction);
        Modified +=
          (CountSynchActionIn(SynchActionType::Modify,SynchAction) + CountSynchActionIn(SynchActionType::ForceModify,SynchAction));
        Unchanged += CountSynchActionIn(SynchActionType::IgnoreUnchanged,SynchAction);
        Skipped += CountSynchActionIn(SynchActionType::Skip,SynchAction);
        Failed += CountSynchActionIn(SynchActionType::Fail,SynchAction);
        MODIFY;
        COMMIT;
      END;
    END;

    BEGIN
    END.
  }
}

