OBJECT Codeunit 1252 Match Bank Rec. Lines
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00,NAVGB10.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      MatchSummaryMsg@1000 : TextConst 'ENU=%1 reconciliation lines out of %2 are matched.\\;ENG=%1 reconciliation lines out of %2 are matched.\\';
      MissingMatchMsg@1002 : TextConst 'ENU=Text shorter than %1 characters cannot be matched.;ENG=Text shorter than %1 characters cannot be matched.';
      ProgressBarMsg@1001 : TextConst 'ENU=Please wait while the operation is being completed.;ENG=Please wait while the operation is being completed.';
      Relation@1003 : 'One-to-One,One-to-Many';
      MatchLengthTreshold@1061 : Integer;
      NormalizingFactor@1065 : Integer;

    PROCEDURE MatchManually@1(VAR SelectedBankAccReconciliationLine@1004 : Record 274;VAR SelectedBankAccountLedgerEntry@1003 : Record 271);
    VAR
      BankAccReconciliationLine@1006 : Record 274;
      BankAccountLedgerEntry@1002 : Record 271;
      BankAccEntrySetReconNo@1000 : Codeunit 375;
    BEGIN
      IF SelectedBankAccReconciliationLine.FINDFIRST THEN BEGIN
        BankAccReconciliationLine.GET(
          SelectedBankAccReconciliationLine."Statement Type",
          SelectedBankAccReconciliationLine."Bank Account No.",
          SelectedBankAccReconciliationLine."Statement No.",
          SelectedBankAccReconciliationLine."Statement Line No.");
        IF NOT (BankAccReconciliationLine.Type IN [BankAccReconciliationLine.Type::"Bank Account Ledger Entry",
                                                   BankAccReconciliationLine.Type::"BACS Ledger Entry",
                                                   BankAccReconciliationLine.Type::"BACS Register"]) THEN
          EXIT;

        IF SelectedBankAccountLedgerEntry.FINDSET THEN BEGIN
          REPEAT
            BankAccountLedgerEntry.GET(SelectedBankAccountLedgerEntry."Entry No.");
            BankAccEntrySetReconNo.RemoveApplication(BankAccountLedgerEntry);
            BankAccEntrySetReconNo.ApplyEntries(BankAccReconciliationLine,BankAccountLedgerEntry,Relation::"One-to-Many");
          UNTIL SelectedBankAccountLedgerEntry.NEXT = 0;
        END;
      END;
    END;

    PROCEDURE RemoveMatch@2(VAR SelectedBankAccReconciliationLine@1001 : Record 274;VAR SelectedBankAccountLedgerEntry@1000 : Record 271);
    VAR
      BankAccReconciliationLine@1004 : Record 274;
      BankAccountLedgerEntry@1003 : Record 271;
      BankAccEntrySetReconNo@1002 : Codeunit 375;
    BEGIN
      IF SelectedBankAccReconciliationLine.FINDSET THEN
        REPEAT
          BankAccReconciliationLine.GET(
            SelectedBankAccReconciliationLine."Statement Type",
            SelectedBankAccReconciliationLine."Bank Account No.",
            SelectedBankAccReconciliationLine."Statement No.",
            SelectedBankAccReconciliationLine."Statement Line No.");
          BankAccountLedgerEntry.SETRANGE("Bank Account No.",BankAccReconciliationLine."Bank Account No.");
          BankAccountLedgerEntry.SETRANGE("Statement No.",BankAccReconciliationLine."Statement No.");
          BankAccountLedgerEntry.SETRANGE("Statement Line No.",BankAccReconciliationLine."Statement Line No.");
          BankAccountLedgerEntry.SETRANGE(Open,TRUE);
          BankAccountLedgerEntry.SETRANGE("Statement Status",BankAccountLedgerEntry."Statement Status"::"Bank Acc. Entry Applied");
          IF BankAccountLedgerEntry.FINDSET THEN
            REPEAT
              BankAccEntrySetReconNo.RemoveApplication(BankAccountLedgerEntry);
            UNTIL BankAccountLedgerEntry.NEXT = 0;
        UNTIL SelectedBankAccReconciliationLine.NEXT = 0;

      IF SelectedBankAccountLedgerEntry.FINDSET THEN
        REPEAT
          BankAccountLedgerEntry.GET(SelectedBankAccountLedgerEntry."Entry No.");
          BankAccEntrySetReconNo.RemoveApplication(BankAccountLedgerEntry);
        UNTIL SelectedBankAccountLedgerEntry.NEXT = 0;
    END;

    PROCEDURE MatchSingle@5(BankAccReconciliation@1003 : Record 273;DateRange@1008 : Integer);
    VAR
      TempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;
      BankRecMatchCandidates@1001 : Query 1252;
      Window@1004 : Dialog;
      Score@1002 : Integer;
    BEGIN
      TempBankStatementMatchingBuffer.DELETEALL;

      Window.OPEN(ProgressBarMsg);
      SetMatchLengthTreshold(4);
      SetNormalizingFactor(10);
      BankRecMatchCandidates.SETRANGE(Rec_Line_Bank_Account_No,BankAccReconciliation."Bank Account No.");
      BankRecMatchCandidates.SETRANGE(Rec_Line_Statement_No,BankAccReconciliation."Statement No.");
      IF BankRecMatchCandidates.OPEN THEN
        WHILE BankRecMatchCandidates.READ DO BEGIN
          Score := 0;

          IF BankRecMatchCandidates.Rec_Line_Difference = BankRecMatchCandidates.Remaining_Amount THEN
            Score += 13;

          Score += GetDescriptionMatchScore(BankRecMatchCandidates.Rec_Line_Description,BankRecMatchCandidates.Description,
              BankRecMatchCandidates.Document_No,BankRecMatchCandidates.External_Document_No);

          Score += GetDescriptionMatchScore(BankRecMatchCandidates.Rec_Line_RltdPty_Name,BankRecMatchCandidates.Description,
              BankRecMatchCandidates.Document_No,BankRecMatchCandidates.External_Document_No);

          Score += GetDescriptionMatchScore(BankRecMatchCandidates.Rec_Line_Transaction_Info,BankRecMatchCandidates.Description,
              BankRecMatchCandidates.Document_No,BankRecMatchCandidates.External_Document_No);

          IF BankRecMatchCandidates.Rec_Line_Transaction_Date <> 0D THEN
            CASE TRUE OF
              BankRecMatchCandidates.Rec_Line_Transaction_Date = BankRecMatchCandidates.Posting_Date:
                Score += 1;
              ABS(BankRecMatchCandidates.Rec_Line_Transaction_Date - BankRecMatchCandidates.Posting_Date) > DateRange:
                Score := 0;
            END;

          IF Score > 2 THEN
            TempBankStatementMatchingBuffer.AddMatchCandidate(BankRecMatchCandidates.Rec_Line_Statement_Line_No,
              BankRecMatchCandidates.Entry_No,Score,0,'');
        END;

      SaveOneToOneMatching(TempBankStatementMatchingBuffer,BankAccReconciliation."Bank Account No.",
        BankAccReconciliation."Statement No.");

      MatchBACSLedgEntries(BankAccReconciliation,DateRange);

      Window.CLOSE;
      ShowMatchSummary(BankAccReconciliation);
    END;

    LOCAL PROCEDURE MatchBACSLedgEntries@1040000(BankAccReconciliation@1040001 : Record 273;DateRange@1040000 : Integer);
    VAR
      BankAccReconciliationLine@1040002 : Record 274;
      BACSLedgEntry@1040003 : Record 10550;
      TempBankStatementMatchingBuffer@1040009 : TEMPORARY Record 1250;
      Score@1040005 : Integer;
      SkipEntry@1040006 : Boolean;
      NoOpenBACSLedgEntriesFound@1040007 : Boolean;
    BEGIN
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.SETFILTER(Difference,'<>0');
      BankAccReconciliationLine.SETFILTER(Type,'%1|%2',
        BankAccReconciliationLine.Type::"BACS Register",BankAccReconciliationLine.Type::"BACS Ledger Entry");
      IF BankAccReconciliationLine.FINDSET THEN BEGIN
        BACSLedgEntry.RESET;
        BACSLedgEntry.SETRANGE("Bal. Account No.",BankAccReconciliationLine."Bank Account No.");
        BACSLedgEntry.SETFILTER(
          "Entry Status",'%1|%2',BACSLedgEntry."Entry Status"::Posted,
          BACSLedgEntry."Entry Status"::"Financially Voided");
        BACSLedgEntry.SETRANGE(Open,TRUE);
        BACSLedgEntry.SETRANGE("Statement Status",BACSLedgEntry."Statement Status"::Open);
        REPEAT
          IF NOT BACSLedgEntry.FINDSET THEN
            NoOpenBACSLedgEntriesFound := TRUE;
          IF NOT NoOpenBACSLedgEntriesFound THEN
            REPEAT
              SkipEntry := FALSE;
              Score := 0;
              IF BankAccReconciliationLine."Transaction Date" <> 0D THEN
                SkipEntry := ABS(BankAccReconciliationLine."Transaction Date" - BACSLedgEntry."Posting Date") > DateRange;
              IF NOT SkipEntry THEN BEGIN
                IF BankAccReconciliationLine.Difference = -BACSLedgEntry.Amount THEN
                  Score += 13;
                Score += GetDescriptionMatchScore(BankAccReconciliationLine.Description,BACSLedgEntry.Description,
                    BACSLedgEntry."Document No.",BACSLedgEntry."External Document No.");
                Score += GetDescriptionMatchScore(BankAccReconciliationLine."Related-Party Name",BACSLedgEntry.Description,
                    BACSLedgEntry."Document No.",BACSLedgEntry."External Document No.");
                Score += GetDescriptionMatchScore(BankAccReconciliationLine."Additional Transaction Info",BACSLedgEntry.Description,
                    BACSLedgEntry."Document No.",BACSLedgEntry."External Document No.");
                IF BankAccReconciliationLine."Transaction Date" = BACSLedgEntry."Posting Date" THEN
                  Score += 1;
                IF Score > 1 THEN
                  TempBankStatementMatchingBuffer.AddMatchCandidate(BankAccReconciliationLine."Statement Line No.",
                    BACSLedgEntry."Entry No.",Score,0,'');
              END;
            UNTIL (BACSLedgEntry.NEXT = 0) OR (BankAccReconciliationLine.Difference = 0);
        UNTIL (BankAccReconciliationLine.NEXT = 0) OR NoOpenBACSLedgEntriesFound;
      END;

      MatchBACSLedgEntryFromBuffer(
        TempBankStatementMatchingBuffer,BankAccReconciliation."Bank Account No.",BankAccReconciliation."Statement No.");
    END;

    LOCAL PROCEDURE SaveOneToOneMatching@28(VAR TempBankStatementMatchingBuffer@1000 : TEMPORARY Record 1250;BankAccountNo@1005 : Code[20];StatementNo@1001 : Code[20]);
    VAR
      BankAccountLedgerEntry@1004 : Record 271;
      BankAccReconciliationLine@1003 : Record 274;
      BankAccEntrySetReconNo@1002 : Codeunit 375;
    BEGIN
      TempBankStatementMatchingBuffer.RESET;
      TempBankStatementMatchingBuffer.SETCURRENTKEY(Quality);
      TempBankStatementMatchingBuffer.ASCENDING(FALSE);

      IF TempBankStatementMatchingBuffer.FINDSET THEN
        REPEAT
          BankAccountLedgerEntry.GET(TempBankStatementMatchingBuffer."Entry No.");
          BankAccReconciliationLine.GET(
            BankAccReconciliationLine."Statement Type"::"Bank Reconciliation",
            BankAccountNo,StatementNo,
            TempBankStatementMatchingBuffer."Line No.");
          BankAccEntrySetReconNo.ApplyEntries(BankAccReconciliationLine,BankAccountLedgerEntry,Relation::"One-to-One");
        UNTIL TempBankStatementMatchingBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE MatchBACSLedgEntryFromBuffer@1040002(VAR TempBankStatementMatchingBuffer@1040002 : TEMPORARY Record 1250;BankAccountNo@1040001 : Code[20];StatementNo@1040000 : Code[20]);
    VAR
      BACSLedgEntry@1040006 : Record 10550;
      BankAccReconciliationLine@1040004 : Record 274;
      BACSEntrySetReconNo@1040005 : Codeunit 10551;
    BEGIN
      TempBankStatementMatchingBuffer.RESET;
      TempBankStatementMatchingBuffer.SETCURRENTKEY(Quality);
      TempBankStatementMatchingBuffer.ASCENDING(FALSE);
      IF TempBankStatementMatchingBuffer.FINDSET THEN
        REPEAT
          BACSLedgEntry.GET(TempBankStatementMatchingBuffer."Entry No.");
          BankAccReconciliationLine.GET(
            BankAccReconciliationLine."Statement Type"::"Bank Reconciliation",
            BankAccountNo,StatementNo,
            TempBankStatementMatchingBuffer."Line No.");
          IF (BankAccReconciliationLine.Difference <> 0) AND (BACSLedgEntry."Statement Line No." = 0) AND
             (BankAccReconciliationLine."Applied Entries" = 0)
          THEN
            BACSEntrySetReconNo.ToggleReconNo(BACSLedgEntry,BankAccReconciliationLine,FALSE);
        UNTIL TempBankStatementMatchingBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE ShowMatchSummary@13(BankAccReconciliation@1000 : Record 273);
    VAR
      BankAccReconciliationLine@1001 : Record 274;
      FinalText@1005 : Text;
      AdditionalText@1004 : Text;
      TotalCount@1002 : Integer;
      MatchedCount@1003 : Integer;
    BEGIN
      BankAccReconciliationLine.SETRANGE("Bank Account No.",BankAccReconciliation."Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement Type",BankAccReconciliation."Statement Type");
      BankAccReconciliationLine.SETRANGE("Statement No.",BankAccReconciliation."Statement No.");
      BankAccReconciliationLine.SETFILTER(Type,'%1|%2|%3',
        BankAccReconciliationLine.Type::"Bank Account Ledger Entry",BankAccReconciliationLine.Type::"BACS Register",
        BankAccReconciliationLine.Type::"BACS Ledger Entry");
      TotalCount := BankAccReconciliationLine.COUNT;

      BankAccReconciliationLine.SETFILTER("Applied Entries",'<>%1',0);
      MatchedCount := BankAccReconciliationLine.COUNT;

      IF MatchedCount < TotalCount THEN
        AdditionalText := STRSUBSTNO(MissingMatchMsg,FORMAT(GetMatchLengthTreshold));
      FinalText := STRSUBSTNO(MatchSummaryMsg,MatchedCount,TotalCount) + AdditionalText;
      MESSAGE(FinalText);
    END;

    LOCAL PROCEDURE GetDescriptionMatchScore@3(BankRecDescription@1002 : Text;BankEntryDescription@1003 : Text;DocumentNo@1004 : Code[20];ExternalDocumentNo@1005 : Code[35]) : Integer;
    VAR
      RecordMatchMgt@1006 : Codeunit 1251;
      Nearness@1001 : Integer;
      Score@1000 : Integer;
      MatchLengthTreshold@1091 : Integer;
      NormalizingFactor@1090 : Integer;
    BEGIN
      BankRecDescription := RecordMatchMgt.Trim(BankRecDescription);
      BankEntryDescription := RecordMatchMgt.Trim(BankEntryDescription);

      MatchLengthTreshold := GetMatchLengthTreshold;
      NormalizingFactor := GetNormalizingFactor;
      Score := 0;

      Nearness := RecordMatchMgt.CalculateStringNearness(BankRecDescription,DocumentNo,
          MatchLengthTreshold,NormalizingFactor);
      IF Nearness = NormalizingFactor THEN
        Score += 11;

      Nearness := RecordMatchMgt.CalculateStringNearness(BankRecDescription,ExternalDocumentNo,
          MatchLengthTreshold,NormalizingFactor);
      IF Nearness = NormalizingFactor THEN
        Score += Nearness;

      Nearness := RecordMatchMgt.CalculateStringNearness(BankRecDescription,BankEntryDescription,
          MatchLengthTreshold,NormalizingFactor);
      IF Nearness >= 0.8 * NormalizingFactor THEN
        Score += Nearness;

      EXIT(Score);
    END;

    PROCEDURE SetMatchLengthTreshold@1060(NewMatchLengthThreshold@1060 : Integer);
    BEGIN
      MatchLengthTreshold := NewMatchLengthThreshold;
    END;

    PROCEDURE SetNormalizingFactor@4(NewNormalizingFactor@1060 : Integer);
    BEGIN
      NormalizingFactor := NewNormalizingFactor;
    END;

    LOCAL PROCEDURE GetMatchLengthTreshold@1062() : Integer;
    BEGIN
      EXIT(MatchLengthTreshold);
    END;

    LOCAL PROCEDURE GetNormalizingFactor@1063() : Integer;
    BEGIN
      EXIT(NormalizingFactor);
    END;

    BEGIN
    END.
  }
}

