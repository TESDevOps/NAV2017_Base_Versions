OBJECT Codeunit 40 LogInManagement
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    Permissions=TableData 17=r,
                TableData 18=r,
                TableData 23=r,
                TableData 27=r,
                TableData 51=rimd,
                TableData 9150=rimd,
                TableData 9151=rimd,
                TableData 9152=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PartnerAgreementNotAcceptedErr@1001 : TextConst 'ENU=Partner Agreement has not been accepted.;ENG=Partner Agreement has not been accepted.';
      Text022@1007 : TextConst 'ENU=You must change password before you can continue.;ENG=You must change password before you can continue.';
      GLSetup@1011 : Record 98;
      User@1003 : Record 2000000120 SECURITYFILTERING(Filtered);
      LogInWorkDate@1006 : Date;
      LogInDate@1005 : Date;
      LogInTime@1004 : Time;
      GLSetupRead@1012 : Boolean;

    PROCEDURE CompanyOpen@1();
    VAR
      CRMConnectionSetup@1000 : Record 5330;
    BEGIN
      IF GUIALLOWED THEN
        LogInStart;

      // Register all Microsoft Dynamics CRM connection strings
      IF CRMConnectionSetup.GET THEN
        CRMConnectionSetup.UpdateAllConnectionRegistrations;
    END;

    PROCEDURE CompanyClose@2();
    BEGIN
      IF GUIALLOWED THEN
        LogInEnd;
    END;

    LOCAL PROCEDURE LogInStart@3();
    VAR
      Language@1005 : Record 2000000045;
      LicenseAgreement@1008 : Record 140;
      ApplicationAreaSetup@1007 : Record 9178;
      ApplicationManagement@1009 : Codeunit 1;
      IdentityManagement@1002 : Codeunit 9801;
      CompanyInformationMgt@1000 : Codeunit 1306;
    BEGIN
      IF LicenseAgreement.GET THEN
        IF NOT CompanyInformationMgt.IsDemoCompany THEN
          IF LicenseAgreement.GetActive AND NOT LicenseAgreement.Accepted THEN BEGIN
            PAGE.RUNMODAL(PAGE::"Additional Customer Terms");
            LicenseAgreement.GET;
            IF NOT LicenseAgreement.Accepted THEN
              ERROR(PartnerAgreementNotAcceptedErr)
          END;

      Language.SETRANGE("Localization Exist",TRUE);
      Language.SETRANGE("Globally Enabled",TRUE);
      Language."Language ID" := GLOBALLANGUAGE;
      IF NOT Language.FIND THEN BEGIN
        Language."Language ID" := WINDOWSLANGUAGE;
        IF NOT Language.FIND THEN
          Language."Language ID" := ApplicationManagement.ApplicationLanguage;
      END;
      GLOBALLANGUAGE := Language."Language ID";

      // Check if the logged in user must change login before allowing access.
      IF 0 <> User.COUNT THEN BEGIN
        IF IdentityManagement.IsUserNamePasswordAuthentication THEN BEGIN
          User.SETRANGE("User Security ID",USERSECURITYID);
          User.FINDFIRST;
          IF User."Change Password" THEN
            PAGE.RUNMODAL(PAGE::"Change Password");

          SELECTLATESTVERSION;
          User.FINDFIRST;
          IF User."Change Password" THEN
            ERROR(Text022);
        END;
        User.SETRANGE("User Security ID");
      END;

      InitializeCompany;
      CreateProfiles;

      LogInDate := TODAY;
      LogInTime := TIME;
      LogInWorkDate := 0D;

      WORKDATE := GetDefaultWorkDate;

      SetupMyCustomer;
      SetupMyItem;
      SetupMyVendor;
      SetupMyAccount;

      ApplicationAreaSetup.SetupApplicationArea;

      OnAfterLogInStart;
    END;

    LOCAL PROCEDURE LogInEnd@4();
    VAR
      UserSetup@1000 : Record 91;
      UserTimeRegister@1001 : Record 51;
      LogOutDate@1002 : Date;
      LogOutTime@1003 : Time;
      Minutes@1004 : Integer;
      UserSetupFound@1005 : Boolean;
      RegisterTime@1006 : Boolean;
    BEGIN
      IF LogInWorkDate <> 0D THEN
        IF LogInWorkDate = LogInDate THEN
          WORKDATE := TODAY
        ELSE
          WORKDATE := LogInWorkDate;

      IF USERID <> '' THEN BEGIN
        IF UserSetup.GET(USERID) THEN BEGIN
          UserSetupFound := TRUE;
          RegisterTime := UserSetup."Register Time";
        END;
        IF NOT UserSetupFound THEN
          IF GetGLSetup THEN
            RegisterTime := GLSetup."Register Time";
        IF RegisterTime THEN BEGIN
          LogOutDate := TODAY;
          LogOutTime := TIME;
          IF (LogOutDate > LogInDate) OR (LogOutDate = LogInDate) AND (LogOutTime > LogInTime) THEN
            Minutes := ROUND((1440 * (LogOutDate - LogInDate)) + ((LogOutTime - LogInTime) / 60000),1);
          IF Minutes = 0 THEN
            Minutes := 1;
          UserTimeRegister.INIT;
          UserTimeRegister."User ID" := USERID;
          UserTimeRegister.Date := LogInDate;
          IF UserTimeRegister.FIND THEN BEGIN
            UserTimeRegister.Minutes := UserTimeRegister.Minutes + Minutes;
            UserTimeRegister.MODIFY;
          END ELSE BEGIN
            UserTimeRegister.Minutes := Minutes;
            UserTimeRegister.INSERT;
          END;
        END;
      END;
    END;

    PROCEDURE InitializeCompany@10();
    BEGIN
      IF NOT GLSetup.GET THEN
        CODEUNIT.RUN(CODEUNIT::"Company-Initialize");
    END;

    PROCEDURE CreateProfiles@12();
    VAR
      Profile@1001 : Record 2000000072;
    BEGIN
      IF Profile.ISEMPTY THEN BEGIN
        CODEUNIT.RUN(CODEUNIT::"Conf./Personalization Mgt.");
        COMMIT;
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@5() : Boolean;
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetupRead := GLSetup.GET;
      EXIT(GLSetupRead);
    END;

    PROCEDURE GetDefaultWorkDate@6() : Date;
    VAR
      GLEntry@1000 : Record 17;
      CompanyInformationMgt@1002 : Codeunit 1306;
      OK@1001 : Boolean;
    BEGIN
      IF CompanyInformationMgt.IsDemoCompany THEN
        IF GLEntry.READPERMISSION THEN BEGIN
          GLEntry.SETCURRENTKEY("G/L Account No.","Posting Date");
          OK := TRUE;
          REPEAT
            GLEntry.SETFILTER("G/L Account No.",'>%1',GLEntry."G/L Account No.");
            GLEntry.SETFILTER("Posting Date",'>%1',GLEntry."Posting Date");
            IF GLEntry.FINDFIRST THEN BEGIN
              GLEntry.SETRANGE("G/L Account No.",GLEntry."G/L Account No.");
              GLEntry.SETRANGE("Posting Date");
              GLEntry.FINDLAST;
            END ELSE
              OK := FALSE
          UNTIL NOT OK;
          IF NOT (GLEntry."Posting Date" IN [0D,WORKDATE]) THEN BEGIN
            LogInWorkDate := WORKDATE;
            EXIT(NORMALDATE(GLEntry."Posting Date"));
          END;
        END;
      EXIT(WORKDATE);
    END;

    LOCAL PROCEDURE SetupMyCustomer@7();
    VAR
      Customer@1000 : Record 18;
      MyCustomer@1001 : Record 9150;
      CompanyInformationMgt@1004 : Codeunit 1306;
      MaxCustomersToAdd@1002 : Integer;
      I@1003 : Integer;
    BEGIN
      IF NOT CompanyInformationMgt.IsDemoCompany THEN
        EXIT;
      IF NOT Customer.READPERMISSION THEN
        EXIT;
      MyCustomer.SETRANGE("User ID",USERID);
      IF NOT MyCustomer.ISEMPTY THEN
        EXIT;
      I := 0;
      MaxCustomersToAdd := 5;
      Customer.SETFILTER(Balance,'<>0');
      IF Customer.FINDSET THEN
        REPEAT
          I += 1;
          MyCustomer."User ID" := USERID;
          MyCustomer.VALIDATE("Customer No.",Customer."No.");
          IF MyCustomer.INSERT THEN;
        UNTIL (Customer.NEXT = 0) OR (I >= MaxCustomersToAdd);
    END;

    LOCAL PROCEDURE SetupMyItem@8();
    VAR
      Item@1000 : Record 27;
      MyItem@1001 : Record 9152;
      CompanyInformationMgt@1004 : Codeunit 1306;
      MaxItemsToAdd@1002 : Integer;
      I@1003 : Integer;
    BEGIN
      IF NOT CompanyInformationMgt.IsDemoCompany THEN
        EXIT;
      IF NOT Item.READPERMISSION THEN
        EXIT;
      MyItem.SETRANGE("User ID",USERID);
      IF NOT MyItem.ISEMPTY THEN
        EXIT;
      I := 0;
      MaxItemsToAdd := 5;

      Item.SETFILTER("Unit Price",'<>0');
      IF Item.FINDSET THEN
        REPEAT
          I += 1;
          MyItem."User ID" := USERID;
          MyItem.VALIDATE("Item No.",Item."No.");
          IF MyItem.INSERT THEN;
        UNTIL (Item.NEXT = 0) OR (I >= MaxItemsToAdd);
    END;

    LOCAL PROCEDURE SetupMyVendor@9();
    VAR
      Vendor@1000 : Record 23;
      MyVendor@1001 : Record 9151;
      CompanyInformationMgt@1004 : Codeunit 1306;
      MaxVendorsToAdd@1002 : Integer;
      I@1003 : Integer;
    BEGIN
      IF NOT CompanyInformationMgt.IsDemoCompany THEN
        EXIT;
      IF NOT Vendor.READPERMISSION THEN
        EXIT;
      MyVendor.SETRANGE("User ID",USERID);
      IF NOT MyVendor.ISEMPTY THEN
        EXIT;
      I := 0;
      MaxVendorsToAdd := 5;
      Vendor.SETFILTER(Balance,'<>0');
      IF Vendor.FINDSET THEN
        REPEAT
          I += 1;
          MyVendor."User ID" := USERID;
          MyVendor.VALIDATE("Vendor No.",Vendor."No.");
          IF MyVendor.INSERT THEN;
        UNTIL (Vendor.NEXT = 0) OR (I >= MaxVendorsToAdd);
    END;

    LOCAL PROCEDURE SetupMyAccount@11();
    VAR
      GLAccount@1000 : Record 15;
      MyAccount@1001 : Record 9153;
      CompanyInformationMgt@1004 : Codeunit 1306;
      MaxAccountsToAdd@1002 : Integer;
      I@1003 : Integer;
    BEGIN
      IF NOT CompanyInformationMgt.IsDemoCompany THEN
        EXIT;
      IF NOT GLAccount.READPERMISSION THEN
        EXIT;
      MyAccount.SETRANGE("User ID",USERID);
      IF NOT MyAccount.ISEMPTY THEN
        EXIT;
      I := 0;
      MaxAccountsToAdd := 5;
      GLAccount.SETRANGE("Reconciliation Account",TRUE);
      IF GLAccount.FINDSET THEN
        REPEAT
          I += 1;
          MyAccount."User ID" := USERID;
          MyAccount.VALIDATE("Account No.",GLAccount."No.");
          IF MyAccount.INSERT THEN;
        UNTIL (GLAccount.NEXT = 0) OR (I >= MaxAccountsToAdd);
    END;

    PROCEDURE UserLogonExistsWithinPeriod@13(PeriodType@1000 : 'Day,Week,Month,Quarter,Year,Accounting Period';NoOfPeriods@1001 : Integer) : Boolean;
    VAR
      SessionEvent@1002 : Record 2000000111;
      PeriodFormManagement@1003 : Codeunit 359;
      FromEventDateTime@1004 : DateTime;
    BEGIN
      FromEventDateTime := CREATEDATETIME(PeriodFormManagement.MoveDateByPeriod(TODAY,PeriodType,-NoOfPeriods),TIME);
      SessionEvent.SETRANGE("Event Datetime",FromEventDateTime,CURRENTDATETIME);
      SessionEvent.SETRANGE("Event Type",SessionEvent."Event Type"::Logon);
      // Filter out sessions of type Web Service, Client Service, NAS, Background and Management Client
      SessionEvent.SETFILTER("Client Type",'<%1|>%2',
        SessionEvent."Client Type"::"Web Service",SessionEvent."Client Type"::"Management Client");
      SessionEvent.SETRANGE("Database Name",GetDatabase);
      EXIT(NOT SessionEvent.ISEMPTY);
    END;

    LOCAL PROCEDURE GetDatabase@14() : Text[250];
    VAR
      ActiveSession@1000 : Record 2000000110;
    BEGIN
      ActiveSession.GET(SERVICEINSTANCEID,SESSIONID);
      EXIT(ActiveSession."Database Name");
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterLogInStart@16();
    BEGIN
    END;

    BEGIN
    END.
  }
}

