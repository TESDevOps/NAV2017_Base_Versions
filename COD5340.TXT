OBJECT Codeunit 5340 CRM Integration Table Synch.
{
  OBJECT-PROPERTIES
  {
    Date=28/04/17;
    Time=12:00:00;
    Version List=NAVW110.00.00.16585;
  }
  PROPERTIES
  {
    TableNo=5335;
    OnRun=VAR
            CRMConnectionSetup@1002 : Record 5330;
            Field@1003 : Record 2000000041;
            ConnectionName@1001 : Text;
          BEGIN
            ConnectionName := InitConnection;

            IF "Int. Table UID Field Type" = Field.Type::Option THEN
              SynchOption(Rec)
            ELSE BEGIN
              IF Direction IN [Direction::ToIntegrationTable,Direction::Bidirectional] THEN
                PerformScheduledSynchToIntegrationTable(Rec);
              IF Direction IN [Direction::FromIntegrationTable,Direction::Bidirectional] THEN
                PerformScheduledSynchFromIntegrationTable(Rec,CRMConnectionSetup.GetIntegrationUserID);
            END;

            CloseConnection(ConnectionName);
          END;

  }
  CODE
  {
    VAR
      ConnectionNotEnabledErr@1005 : TextConst 'ENU=The Microsoft Dynamics CRM connection is not enabled.;ENG=The Microsoft Dynamics CRM connection is not enabled.';
      RecordNotFoundErr@1006 : TextConst '@@@="%1 = Source table caption, %2 = The lookup value when searching for the source record";ENU=Cannot find %1 record %2.;ENG=Cannot find %1 record %2.';
      SourceRecordIsNotInMappingErr@1007 : TextConst '@@@=%1 Integration Table Mapping caption, %2 Integration Table Mapping Name;ENU=Cannot find the mapping %2 in table %1.;ENG=Cannot find the mapping %2 in table %1.';
      CannotDetermineSourceOriginErr@1009 : TextConst '@@@=%1 the value of the source id;ENU=Cannot determine the source origin: %1.;ENG=Cannot determine the source origin: %1.';
      SynchronizeEmptySetErr@1001 : TextConst 'ENU=Attempted to synchronize an empty set of records.;ENG=Attempted to synchronise an empty set of records.';
      CRMIntTableSubscriber@1000 : Codeunit 5341;
      SupportedSourceType@1002 : ',RecordID,GUID';
      NoMappingErr@1003 : TextConst '@@@="%1=Table Caption";ENU=No mapping is set for %1.;ENG=No mapping is set for %1.';

    LOCAL PROCEDURE InitConnection@21() ConnectionName : Text;
    VAR
      CRMConnectionSetup@1001 : Record 5330;
    BEGIN
      CRMConnectionSetup.GET;
      IF NOT CRMConnectionSetup."Is Enabled" THEN
        ERROR(ConnectionNotEnabledErr);

      IF CRMConnectionSetup."Is User Mapping Required" THEN
        ConnectionName := CRMConnectionSetup.RegisterUserConnection
      ELSE
        ConnectionName := RegisterTempConnectionIfNeeded(CRMConnectionSetup);

      IF ConnectionName <> '' THEN
        SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,TRUE);
      ClearCache;
    END;

    LOCAL PROCEDURE CloseConnection@23(ConnectionName@1000 : Text);
    VAR
      CRMConnectionSetup@1001 : Record 5330;
    BEGIN
      ClearCache;
      IF ConnectionName <> '' THEN
        CRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);
    END;

    LOCAL PROCEDURE ClearCache@28();
    BEGIN
      CRMIntTableSubscriber.ClearCache;
      CLEAR(CRMIntTableSubscriber);
    END;

    LOCAL PROCEDURE CacheTable@10(VAR RecordRef@1005 : RecordRef;VAR TempRecordRef@1000 : RecordRef);
    VAR
      OutlookSynchNAVMgt@1003 : Codeunit 5301;
    BEGIN
      TempRecordRef.OPEN(RecordRef.NUMBER,TRUE);
      IF RecordRef.FINDSET THEN
        REPEAT
          OutlookSynchNAVMgt.CopyRecordReference(RecordRef,TempRecordRef,FALSE);
        UNTIL RecordRef.NEXT = 0;
      RecordRef.CLOSE;
    END;

    LOCAL PROCEDURE CacheFilteredCRMTable@13(TempSourceRecordRef@1001 : RecordRef;IntegrationTableMapping@1000 : Record 5335;IntegrationUserId@1004 : GUID);
    VAR
      CRMRecordRef@1002 : RecordRef;
      ModifyByFieldRef@1003 : FieldRef;
    BEGIN
      CRMRecordRef.OPEN(IntegrationTableMapping."Integration Table ID");
      IntegrationTableMapping.SetIntRecordRefFilter(CRMRecordRef);
      // Exclude modifications by background job
      ModifyByFieldRef := CRMRecordRef.FIELD(GetModifyByFieldNo(IntegrationTableMapping."Integration Table ID"));
      ModifyByFieldRef.SETFILTER('<>%1',IntegrationUserId);
      CacheTable(CRMRecordRef,TempSourceRecordRef);
      CRMRecordRef.CLOSE;
    END;

    LOCAL PROCEDURE CacheFilteredNAVTable@16(TempSourceRecordRef@1000 : RecordRef;IntegrationTableMapping@1001 : Record 5335);
    VAR
      SourceRecordRef@1002 : RecordRef;
    BEGIN
      SourceRecordRef.OPEN(IntegrationTableMapping."Table ID");
      IntegrationTableMapping.SetRecordRefFilter(SourceRecordRef);
      CacheTable(SourceRecordRef,TempSourceRecordRef);
      SourceRecordRef.CLOSE;
    END;

    LOCAL PROCEDURE GetSourceRecordRef@15(IntegrationTableMapping@1004 : Record 5335;SourceID@1000 : Variant;VAR RecordRef@1001 : RecordRef);
    VAR
      RecordID@1003 : RecordID;
      CRMID@1002 : GUID;
    BEGIN
      CASE GetSourceType(SourceID) OF
        SupportedSourceType::RecordID:
          BEGIN
            RecordID := SourceID;
            IF RecordID.TABLENO = 0 THEN
              ERROR(CannotDetermineSourceOriginErr,SourceID);
            IF NOT (RecordID.TABLENO = IntegrationTableMapping."Table ID") THEN
              ERROR(SourceRecordIsNotInMappingErr,IntegrationTableMapping.TABLECAPTION,IntegrationTableMapping.Name);
            IF NOT RecordRef.GET(RecordID) THEN
              ERROR(RecordNotFoundErr,RecordRef.CAPTION,FORMAT(RecordID,0,1));
          END;
        SupportedSourceType::GUID:
          BEGIN
            CRMID := SourceID;
            IF ISNULLGUID(CRMID) THEN
              ERROR(CannotDetermineSourceOriginErr,SourceID);
            IF NOT IntegrationTableMapping.GetRecordRef(CRMID,RecordRef) THEN
              ERROR(RecordNotFoundErr,IntegrationTableMapping.GetExtendedIntegrationTableCaption,CRMID);
          END;
        ELSE
          ERROR(CannotDetermineSourceOriginErr,SourceID);
      END;
    END;

    LOCAL PROCEDURE GetSourceType@11(Source@1000 : Variant) : Integer;
    BEGIN
      IF Source.ISRECORDID THEN
        EXIT(SupportedSourceType::RecordID);
      IF Source.ISGUID THEN
        EXIT(SupportedSourceType::GUID);
      EXIT(0);
    END;

    LOCAL PROCEDURE FillCodeBufferFromOption@17(FieldRef@1005 : FieldRef;VAR TempNameValueBuffer@1000 : TEMPORARY Record 823) : Boolean;
    VAR
      TempNameValueBufferWithValue@1001 : TEMPORARY Record 823;
    BEGIN
      CollectOptionValues(FieldRef.OPTIONSTRING,TempNameValueBuffer);
      CollectOptionValues(FieldRef.OPTIONCAPTION,TempNameValueBufferWithValue);
      MergeBuffers(TempNameValueBuffer,TempNameValueBufferWithValue);
      EXIT(TempNameValueBuffer.FINDSET);
    END;

    LOCAL PROCEDURE FindModifiedIntegrationRecords@18(VAR IntegrationRecord@1000 : Record 5151;IntegrationTableMapping@1001 : Record 5335) : Boolean;
    BEGIN
      IntegrationRecord.SETRANGE("Table ID",IntegrationTableMapping."Table ID");
      IF IntegrationTableMapping."Synch. Modified On Filter" <> 0DT THEN
        IntegrationRecord.SETFILTER("Modified On",'>%1',IntegrationTableMapping."Synch. Modified On Filter");
      EXIT(IntegrationRecord.FINDSET);
    END;

    LOCAL PROCEDURE CollectOptionValues@12(OptionString@1001 : Text;VAR TempNameValueBuffer@1000 : TEMPORARY Record 823);
    VAR
      CommaPos@1005 : Integer;
      OptionValue@1003 : Text;
      OptionValueInt@1002 : Integer;
    BEGIN
      OptionValueInt := 0;
      TempNameValueBuffer.DELETEALL;
      WHILE STRLEN(OptionString) > 0 DO BEGIN
        CommaPos := STRPOS(OptionString,',');
        IF CommaPos = 0 THEN BEGIN
          OptionValue := OptionString;
          OptionString := '';
        END ELSE BEGIN
          OptionValue := COPYSTR(OptionString,1,CommaPos - 1);
          OptionString := COPYSTR(OptionString,CommaPos + 1);
        END;
        IF DELCHR(OptionValue,'=',' ') <> '' THEN BEGIN
          TempNameValueBuffer.INIT;
          TempNameValueBuffer.ID := OptionValueInt;
          TempNameValueBuffer.Name := COPYSTR(OptionValue,1,MAXSTRLEN(TempNameValueBuffer.Name));
          TempNameValueBuffer.INSERT
        END;
        OptionValueInt += 1;
      END;
    END;

    LOCAL PROCEDURE MergeBuffers@9(VAR TempNameValueBuffer@1000 : TEMPORARY Record 823;VAR TempNameValueBufferWithValue@1001 : TEMPORARY Record 823);
    BEGIN
      WITH TempNameValueBuffer DO BEGIN
        IF FINDSET THEN
          REPEAT
            IF TempNameValueBufferWithValue.GET(ID) THEN BEGIN
              Value := TempNameValueBufferWithValue.Name;
              MODIFY
            END;
          UNTIL NEXT = 0;
        TempNameValueBufferWithValue.DELETEALL;
      END;
    END;

    PROCEDURE SynchOption@8(IntegrationTableMapping@1003 : Record 5335);
    VAR
      CRMOptionMapping@1007 : Record 5334;
      Field@1000 : Record 2000000041;
      TempNameValueBuffer@1004 : TEMPORARY Record 823;
      FieldRef@1001 : FieldRef;
      KeyRef@1005 : KeyRef;
      RecordRef@1002 : RecordRef;
      NewPK@1006 : Text;
    BEGIN
      IF Field.GET(IntegrationTableMapping."Integration Table ID",IntegrationTableMapping."Integration Table UID Fld. No.") THEN
        IF Field.Type = Field.Type::Option THEN BEGIN
          RecordRef.OPEN(Field.TableNo);
          FieldRef := RecordRef.FIELD(Field."No.");
          RecordRef.CLOSE;
          IF FillCodeBufferFromOption(FieldRef,TempNameValueBuffer) THEN BEGIN
            CRMOptionMapping.SETRANGE("Table ID",IntegrationTableMapping."Table ID");
            CRMOptionMapping.DELETEALL;

            RecordRef.OPEN(IntegrationTableMapping."Table ID");
            KeyRef := RecordRef.KEYINDEX(1);
            FieldRef := KeyRef.FIELDINDEX(1);
            REPEAT
              NewPK := COPYSTR(TempNameValueBuffer.Name,1,FieldRef.LENGTH);
              FieldRef.SETRANGE(NewPK);
              IF NOT RecordRef.FINDFIRST THEN BEGIN
                RecordRef.INIT;
                FieldRef.VALUE := NewPK;
                RecordRef.INSERT(TRUE);
              END;

              CRMOptionMapping.INIT;
              CRMOptionMapping."Record ID" := RecordRef.RECORDID;
              CRMOptionMapping."Option Value" := TempNameValueBuffer.ID;
              CRMOptionMapping."Option Value Caption" := TempNameValueBuffer.Value;
              CRMOptionMapping."Table ID" := IntegrationTableMapping."Table ID";
              CRMOptionMapping."Integration Table ID" := IntegrationTableMapping."Integration Table ID";
              CRMOptionMapping."Integration Field ID" := IntegrationTableMapping."Integration Table UID Fld. No.";
              CRMOptionMapping.INSERT;
            UNTIL TempNameValueBuffer.NEXT = 0;
            RecordRef.CLOSE;
          END;
        END;
    END;

    PROCEDURE SynchRecord@1(IntegrationTableMapping@1002 : Record 5335;SourceID@1000 : Variant;IgnoreChanges@1003 : Boolean;IgnoreSynchOnlyCoupledRecords@1011 : Boolean) JobID : GUID;
    VAR
      IntegrationTableSynch@1010 : Codeunit 5335;
      FromRecordRef@1008 : RecordRef;
      ToRecordRef@1009 : RecordRef;
      ConnectionName@1013 : Text;
    BEGIN
      ConnectionName := InitConnection;

      IntegrationTableSynch.BeginIntegrationSynchJob(TABLECONNECTIONTYPE::CRM,IntegrationTableMapping);
      GetSourceRecordRef(IntegrationTableMapping,SourceID,FromRecordRef);
      IntegrationTableSynch.Synchronize(FromRecordRef,ToRecordRef,IgnoreChanges,IgnoreSynchOnlyCoupledRecords);
      JobID := IntegrationTableSynch.EndIntegrationSynchJob;

      CloseConnection(ConnectionName);
    END;

    PROCEDURE SynchRecordsToIntegrationTable@6(RecordsToSynchRecordRef@1002 : RecordRef;IgnoreChanges@1001 : Boolean;IgnoreSynchOnlyCoupledRecords@1000 : Boolean) JobID : GUID;
    VAR
      IntegrationTableMapping@1003 : Record 5335;
      CRMSynchHelper@1005 : Codeunit 5342;
      IntegrationTableSynch@1010 : Codeunit 5335;
      IntegrationRecordRef@1008 : RecordRef;
      ConnectionName@1004 : Text;
    BEGIN
      IF RecordsToSynchRecordRef.ISEMPTY THEN
        ERROR(SynchronizeEmptySetErr);

      IF NOT CRMSynchHelper.GetMappingForTable(RecordsToSynchRecordRef.NUMBER,IntegrationTableMapping) THEN
        ERROR(STRSUBSTNO(NoMappingErr,RecordsToSynchRecordRef.NAME));

      ConnectionName := InitConnection;

      IntegrationTableSynch.BeginIntegrationSynchJob(TABLECONNECTIONTYPE::CRM,IntegrationTableMapping);
      REPEAT
        IntegrationTableSynch.Synchronize(RecordsToSynchRecordRef,IntegrationRecordRef,IgnoreChanges,IgnoreSynchOnlyCoupledRecords)
      UNTIL RecordsToSynchRecordRef.NEXT = 0;
      JobID := IntegrationTableSynch.EndIntegrationSynchJob;

      CloseConnection(ConnectionName);
    END;

    LOCAL PROCEDURE SynchNAVTableToCRM@14(IntegrationTableMapping@1002 : Record 5335;VAR IntegrationTableSynch@1000 : Codeunit 5335) LatestModifiedOn : DateTime;
    VAR
      IntegrationRecord@1012 : Record 5151;
      TempCRMIntegrationRecord@1010 : TEMPORARY Record 5331;
      SourceRecordRef@1008 : RecordRef;
      DestinationRecordRef@1007 : RecordRef;
      IgnoreRecord@1001 : Boolean;
      ModifiedOn@1005 : DateTime;
    BEGIN
      LatestModifiedOn := 0DT;
      IF FindModifiedIntegrationRecords(IntegrationRecord,IntegrationTableMapping) THEN BEGIN
        CreateCRMIntegrationRecordClone(IntegrationTableMapping."Table ID",TempCRMIntegrationRecord);
        CacheFilteredNAVTable(SourceRecordRef,IntegrationTableMapping);
        REPEAT
          IgnoreRecord := FALSE;
          IF SourceRecordRef.GET(IntegrationRecord."Record ID") THEN BEGIN
            OnQueryPostFilterIgnoreRecord(SourceRecordRef,IgnoreRecord);
            IF NOT IgnoreRecord THEN BEGIN
              IF NOT TempCRMIntegrationRecord.IsIntegrationIdCoupled(IntegrationRecord."Integration ID") THEN
                IgnoreRecord := IntegrationTableMapping."Synch. Only Coupled Records";
              IF NOT IgnoreRecord THEN
                IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
                  ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef);
                  IF ModifiedOn > LatestModifiedOn THEN
                    LatestModifiedOn := ModifiedOn;
                END;
            END;
          END;
        UNTIL IntegrationRecord.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE SynchCRMTableToNAV@25(IntegrationTableMapping@1000 : Record 5335;IntegrationUserId@1005 : GUID;VAR IntegrationTableSynch@1003 : Codeunit 5335) LatestModifiedOn : DateTime;
    VAR
      TempCRMIntegrationRecord@1012 : TEMPORARY Record 5331;
      SourceRecordRef@1008 : RecordRef;
      DestinationRecordRef@1007 : RecordRef;
      ModifiedOn@1004 : DateTime;
      IgnoreRecord@1001 : Boolean;
    BEGIN
      LatestModifiedOn := 0DT;
      CacheFilteredCRMTable(SourceRecordRef,IntegrationTableMapping,IntegrationUserId);
      CreateCRMIntegrationRecordClone(IntegrationTableMapping."Table ID",TempCRMIntegrationRecord);
      IF SourceRecordRef.FINDSET THEN
        REPEAT
          IgnoreRecord := FALSE;
          OnQueryPostFilterIgnoreRecord(SourceRecordRef,IgnoreRecord);
          IF NOT IgnoreRecord THEN BEGIN
            IF TempCRMIntegrationRecord.IsCRMRecordRefCoupled(SourceRecordRef) THEN
              TempCRMIntegrationRecord.DELETE
            ELSE
              IgnoreRecord := IntegrationTableMapping."Synch. Only Coupled Records";
            IF NOT IgnoreRecord THEN
              IF IntegrationTableSynch.Synchronize(SourceRecordRef,DestinationRecordRef,FALSE,FALSE) THEN BEGIN
                ModifiedOn := IntegrationTableSynch.GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef);
                IF ModifiedOn > LatestModifiedOn THEN
                  LatestModifiedOn := ModifiedOn;
              END;
          END;
        UNTIL SourceRecordRef.NEXT = 0;
    END;

    LOCAL PROCEDURE GetModifyByFieldNo@27(CRMTableID@1000 : Integer) : Integer;
    VAR
      Field@1002 : Record 2000000041;
    BEGIN
      Field.SETRANGE(TableNo,CRMTableID);
      Field.SETRANGE(FieldName,'ModifiedBy'); // All CRM tables should have "ModifiedBy" field
      Field.FINDFIRST;
      EXIT(Field."No.");
    END;

    LOCAL PROCEDURE PerformScheduledSynchToIntegrationTable@3(VAR IntegrationTableMapping@1000 : Record 5335);
    VAR
      IntegrationTableSynch@1001 : Codeunit 5335;
      LatestModifiedOn@1002 : DateTime;
    BEGIN
      IntegrationTableSynch.BeginIntegrationSynchJob(TABLECONNECTIONTYPE::CRM,IntegrationTableMapping);

      LatestModifiedOn := SynchNAVTableToCRM(IntegrationTableMapping,IntegrationTableSynch);

      IntegrationTableSynch.EndIntegrationSynchJob;

      IntegrationTableMapping.SetTableModifiedOn(LatestModifiedOn);
    END;

    LOCAL PROCEDURE PerformScheduledSynchFromIntegrationTable@4(VAR IntegrationTableMapping@1000 : Record 5335;IntegrationUserId@1001 : GUID);
    VAR
      IntegrationTableSynch@1003 : Codeunit 5335;
      LatestModifiedOn@1002 : DateTime;
    BEGIN
      IntegrationTableSynch.BeginIntegrationSynchJob(TABLECONNECTIONTYPE::CRM,IntegrationTableMapping);

      LatestModifiedOn := SynchCRMTableToNAV(IntegrationTableMapping,IntegrationUserId,IntegrationTableSynch);

      IntegrationTableSynch.EndIntegrationSynchJob;

      IntegrationTableMapping.SetIntTableModifiedOn(LatestModifiedOn);
    END;

    LOCAL PROCEDURE CreateCRMIntegrationRecordClone@5(ForTable@1000 : Integer;VAR TempCRMIntegrationRecord@1001 : TEMPORARY Record 5331);
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
    BEGIN
      TempCRMIntegrationRecord.RESET;
      TempCRMIntegrationRecord.DELETEALL;

      CRMIntegrationRecord.SETRANGE("Table ID",ForTable);
      IF NOT CRMIntegrationRecord.FINDSET THEN
        EXIT;

      REPEAT
        TempCRMIntegrationRecord.COPY(CRMIntegrationRecord,FALSE);
        TempCRMIntegrationRecord.INSERT;
      UNTIL CRMIntegrationRecord.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnQueryPostFilterIgnoreRecord@2(SourceRecordRef@1001 : RecordRef;VAR IgnoreRecord@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE RegisterTempConnectionIfNeeded@7(CRMConnectionSetup@1000 : Record 5330) ConnectionName : Text;
    VAR
      TempNoUserMapCRMConnectionSetup@1001 : TEMPORARY Record 5330;
    BEGIN
      IF CRMConnectionSetup."Is User Mapping Required" THEN BEGIN
        ConnectionName := FORMAT(CREATEGUID);
        TempNoUserMapCRMConnectionSetup.TRANSFERFIELDS(CRMConnectionSetup);
        TempNoUserMapCRMConnectionSetup."Is User Mapping Required" := FALSE;
        TempNoUserMapCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      END;
    END;

    BEGIN
    END.
  }
}

