OBJECT Page 1210 Data Exch Def Card
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Data Exchange Definition;
               ENG=Data Exchange Definition];
    SourceTable=Table1222;
    PageType=Card;
    PromotedActionCategoriesML=[ENU=Import/Export,Process,Report;
                                ENG=Import/Export,Process,Report];
    OnOpenPage=BEGIN
                 IsNonXMLFileType := CheckEnableDisableIsNonXMLFileType;
                 IsImportType := CheckEnableDisableIsImportType;
                 IsDelimitedFileType := CheckEnableDisableDelimitedFileType;
               END;

    OnInsertRecord=VAR
                     DataExchLineDef@1000 : Record 1227;
                   BEGIN
                     IF NOT DataExchLineDef.GET(Code) THEN BEGIN
                       DataExchLineDef."Data Exch. Def Code" := Code;
                       DataExchLineDef.Code := DefaultTxt;
                       DataExchLineDef.Name := DefaultTxt;
                       DataExchLineDef."Line Type" := 1;
                       DataExchLineDef.INSERT;
                     END;
                   END;

    ActionList=ACTIONS
    {
      { 17      ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 13      ;1   ;Action    ;
                      CaptionML=[ENU=Import Data Exchange Definition;
                                 ENG=Import Data Exchange Definition];
                      ToolTipML=[ENU=Import a data exchange definition from a bank file that is located on your computer or network. The file type must match the value of the File Type field.;
                                 ENG=Import a data exchange definition from a bank file that is located on your computer or network. The file type must match the value of the File Type field.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Import;
                      OnAction=BEGIN
                                 XMLPORT.RUN(XMLPORT::"Imp / Exp Data Exch Def & Map",FALSE,TRUE);
                               END;
                                }
      { 15      ;1   ;Action    ;
                      CaptionML=[ENU=Export Data Exchange Definition;
                                 ENG=Export Data Exchange Definition];
                      ToolTipML=[ENU=Export the data exchange definition to a file on your computer or network. You can then upload the file to your electronic bank to process the related transfers.;
                                 ENG=Export the data exchange definition to a file on your computer or network. You can then upload the file to your electronic bank to process the related transfers.];
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Export;
                      OnAction=VAR
                                 DataExchDef@1000 : Record 1222;
                               BEGIN
                                 DataExchDef.SETFILTER(Code,Code);
                                 XMLPORT.RUN(XMLPORT::"Imp / Exp Data Exch Def & Map",FALSE,FALSE,DataExchDef);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=General;
                CaptionML=[ENU=General;
                           ENG=General];
                GroupType=Group }

    { 19  ;2   ;Group     ;
                GroupType=Group }

    { 3   ;3   ;Field     ;
                ToolTipML=[ENU=Specifies a code that identifies the data exchange setup.;
                           ENG=Specifies a code that identifies the data exchange setup.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Code;
                ShowMandatory=TRUE }

    { 4   ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the data exchange definition.;
                           ENG=Specifies the name of the data exchange definition.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Name }

    { 16  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies what type of file the data exchange definition is used for. You can select between three file types.;
                           ENG=Specifies what type of file the data exchange definition is used for. You can select between three file types.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="File Type";
                OnValidate=BEGIN
                             IsNonXMLFileType := CheckEnableDisableIsNonXMLFileType;
                             IsDelimitedFileType := CheckEnableDisableDelimitedFileType;
                             IsImportType := CheckEnableDisableIsImportType;
                             CurrPage.UPDATE;
                           END;

                ShowMandatory=TRUE }

    { 5   ;3   ;Field     ;
                ToolTipML=[ENU=Specifies what type of exchange the data exchange definition is used for.;
                           ENG=Specifies what type of exchange the data exchange definition is used for.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Type;
                OnValidate=BEGIN
                             IsImportType := CheckEnableDisableIsImportType;
                             PositivePayUpdateCodeunits;
                             CurrPage.UPDATE;
                           END;

                ShowMandatory=TRUE }

    { 26  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the codeunit that transfers data in and out of tables in Microsoft Dynamics NAV.;
                           ENG=Specifies the codeunit that transfers data in and out of tables in Microsoft Dynamics NAV.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Data Handling Codeunit";
                Importance=Additional }

    { 22  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the codeunit that is used to validate data against pre-defined business rules.;
                           ENG=Specifies the codeunit that is used to validate data against pre-defined business rules.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Validation Codeunit";
                Importance=Additional }

    { 6   ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the codeunit that processes imported data prior to mapping and exported data after mapping.;
                           ENG=Specifies the codeunit that processes imported data prior to mapping and exported data after mapping.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Reading/Writing Codeunit";
                Importance=Additional;
                ShowMandatory=TRUE }

    { 23  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the XMLport through which an imported data file or service enters prior to mapping and through which exported data exits when it is written to a data file or service after mapping.;
                           ENG=Specifies the XMLport through which an imported data file or service enters prior to mapping and through which exported data exits when it is written to a data file or service after mapping.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Reading/Writing XMLport";
                Importance=Additional;
                ShowMandatory=TRUE }

    { 21  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the codeunit that transfers external data in and out of the Data Exchange Framework.;
                           ENG=Specifies the codeunit that transfers external data in and out of the Data Exchange Framework.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ext. Data Handling Codeunit";
                Importance=Additional;
                ShowMandatory=TRUE }

    { 25  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the codeunit that does various clean-up after mapping, such as marks the lines as exported and deletes temporary records.;
                           ENG=Specifies the codeunit that does various clean-up after mapping, such as marks the lines as exported and deletes temporary records.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User Feedback Codeunit";
                Importance=Additional }

    { 18  ;2   ;Group     ;
                CaptionML=[ENU=File Type: Variable/Fixed;
                           ENG=File Type: Variable/Fixed];
                Enabled=IsNonXMLFileType;
                GroupType=Group }

    { 11  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the encoding of the file to be imported. This field is only relevant for import.;
                           ENG=Specifies the encoding of the file to be imported. This field is only relevant for import.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="File Encoding" }

    { 10  ;3   ;Field     ;
                ToolTipML=[ENU=Specifies how columns in the file are separated, if the file is of type Variable Text.;
                           ENG=Specifies how columns in the file are separated, if the file is of type Variable Text.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Column Separator";
                Enabled=IsDelimitedFileType }

    { 20  ;2   ;Group     ;
                CaptionML=[ENU=Type: Import;
                           ENG=Type: Import];
                Enabled=IsImportType;
                GroupType=Group }

    { 7   ;3   ;Field     ;
                ToolTipML=[ENU=Specifies how many header lines exist in the file. This ensures that the header data is not imported. This field is only relevant for import.;
                           ENG=Specifies how many header lines exist in the file. This ensures that the header data is not imported. This field is only relevant for import.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Header Lines" }

    { 8   ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the text of the first column on the header line.;
                           ENG=Specifies the text of the first column on the header line.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Header Tag" }

    { 9   ;3   ;Field     ;
                ToolTipML=[ENU=Specifies the text of the first column on the footer line. If a footer line exists in several places in the file, enter the text of the first column on the footer line to ensure that the footer data is not imported. This field is only relevant for import.;
                           ENG=Specifies the text of the first column on the footer line. If a footer line exists in several places in the file, enter the text of the first column on the footer line to ensure that the footer data is not imported. This field is only relevant for import.];
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Footer Tag" }

    { 14  ;1   ;Part      ;
                CaptionML=[ENU=Line Definitions;
                           ENG=Line Definitions];
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Data Exch. Def Code=FIELD(Code);
                PagePartID=Page1215;
                PartType=Page }

    { 12  ;1   ;Part      ;
                CaptionML=[ENU=Column Definitions;
                           ENG=Column Definitions];
                ApplicationArea=#Basic,#Suite;
                SubPageLink=Data Exch. Line Def Code=FIELD(Code),
                            Data Exch. Def Code=FIELD(Data Exch. Def Code);
                PagePartID=Page1216;
                ProviderID=14;
                PartType=Page }

  }
  CODE
  {
    VAR
      IsNonXMLFileType@1005 : Boolean;
      IsImportType@1006 : Boolean;
      IsDelimitedFileType@1007 : Boolean;
      DefaultTxt@1000 : TextConst '@@@=Transate;ENU=DEFAULT;ENG=DEFAULT';

    BEGIN
    END.
  }
}

