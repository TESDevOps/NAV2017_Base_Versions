OBJECT Page 5994 Get Service Shipment Lines
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Get Service Shipment Lines;
               ENG=Get Service Shipment Lines];
    SourceTable=Table5991;
    PageType=List;
    OnAfterGetRecord=BEGIN
                       StyleIsStrong := IsFirstDocLine;
                       DocumentNoHideValue := NOT IsFirstDocLine;
                     END;

    OnQueryClosePage=BEGIN
                       IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN
                         OKOnPush;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 47      ;1   ;ActionGroup;
                      CaptionML=[ENU=&Line;
                                 ENG=&Line];
                      Image=Line }
      { 48      ;2   ;Action    ;
                      ShortCutKey=Shift+F7;
                      CaptionML=[ENU=Show Document;
                                 ENG=Show Document];
                      Image=View;
                      OnAction=BEGIN
                                 ServiceShptHeader.GET("Document No.");
                                 PAGE.RUN(PAGE::"Posted Service Shipment",ServiceShptHeader);
                               END;
                                }
      { 49      ;2   ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ENG=Dimensions];
                      ToolTipML=[ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                                 ENG=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyse transaction history.];
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 28      ;2   ;Action    ;
                      CaptionML=[ENU=Item &Tracking Entries;
                                 ENG=Item &Tracking Entries];
                      Image=ItemTrackingLedger;
                      OnAction=BEGIN
                                 ShowItemTrackingLines;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of this shipment.;
                           ENG=Specifies the number of this shipment.];
                SourceExpr="Document No.";
                HideValue=DocumentNoHideValue;
                Style=Strong;
                StyleExpr=StyleIsStrong }

    { 50  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the customer to whom you send the invoice.;
                           ENG=Specifies the number of the customer to whom you send the invoice.];
                SourceExpr="Bill-to Customer No.";
                Visible=TRUE }

    { 4   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the customer who owns the items on the service order.;
                           ENG=Specifies the number of the customer who owns the items on the service order.];
                SourceExpr="Customer No.";
                Visible=FALSE }

    { 6   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the type of this shipment line.;
                           ENG=Specifies the type of this shipment line.];
                SourceExpr=Type }

    { 8   ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the item, general ledger account, resource code, or cost on the line.;
                           ENG=Specifies the number of the item, general ledger account, resource code, or cost on the line.];
                SourceExpr="No." }

    { 10  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code for the variant set up for the item on the service line.;
                           ENG=Specifies the code for the variant set up for the item on the service line.];
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the description of an item, resource, cost, or a standard text on the service line.;
                           ENG=Specifies the description of an item, resource, cost, or a standard text on the service line.];
                SourceExpr=Description }

    { 29  ;2   ;Field     ;
                Lookup=No;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the currency code for various amounts on the shipment.;
                           ENG=Specifies the currency code for various amounts on the shipment.];
                SourceExpr="Currency Code";
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code assigned to this shipment line.;
                           ENG=Specifies the dimension value code assigned to this shipment line.];
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the dimension value code assigned to this shipment line.;
                           ENG=Specifies the dimension value code assigned to this shipment line.];
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE }

    { 18  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the location, such as warehouse or distribution center, from which the items should be taken and where they should be registered.;
                           ENG=Specifies the location, such as warehouse or distribution centre, from which the items should be taken and where they should be registered.];
                SourceExpr="Location Code";
                Visible=FALSE }

    { 24  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the code of one unit of measure of the item, resource time, general ledger account, or cost on the shipment line.;
                           ENG=Specifies the code of one unit of measure of the item, resource time, general ledger account, or cost on the shipment line.];
                SourceExpr="Unit of Measure Code" }

    { 22  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of item units, resource hours, general ledger account payments, or cost that have been shipped to the customer.;
                           ENG=Specifies the number of item units, resource hours, general ledger account payments, or cost that have been shipped to the customer.];
                SourceExpr=Quantity }

    { 52  ;2   ;Field     ;
                ToolTipML=[ENU=Indicates how many item units, resource hours, general ledger account payments, or cost on the line have been shipped but not invoiced or consumed.;
                           ENG=Indicates how many item units, resource hours, general ledger account payments, or cost on the line have been shipped but not invoiced or consumed.];
                SourceExpr="Qty. Shipped Not Invoiced" }

    { 45  ;2   ;Field     ;
                ToolTipML=[ENU=Indicates how many item units, resource hours, general ledger account payments, or costs on the line have been invoiced.;
                           ENG=Indicates how many item units, resource hours, general ledger account payments, or costs on the line have been invoiced.];
                SourceExpr="Quantity Invoiced" }

    { 26  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the name of the unit of measure for the item, resource, or cost on the service line.;
                           ENG=Specifies the name of the unit of measure for the item, resource, or cost on the service line.];
                SourceExpr="Unit of Measure";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                ToolTipML=[ENU=Specifies the number of the item ledger entry to which the items on the line were applied when the shipment was posted.;
                           ENG=Specifies the number of the item ledger entry to which the items on the line were applied when the shipment was posted.];
                SourceExpr="Appl.-to Item Entry";
                Visible=FALSE }

    { 1900000007;0;Container;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ServiceShptHeader@1000 : Record 5990;
      ServiceHeader@1001 : Record 5900;
      TempServiceShptLine@1002 : TEMPORARY Record 5991;
      ServiceGetShpt@1003 : Codeunit 5932;
      StyleIsStrong@1004 : Boolean INDATASET;
      DocumentNoHideValue@1005 : Boolean INDATASET;

    PROCEDURE SetServiceHeader@1(VAR ServiceHeader2@1000 : Record 5900);
    BEGIN
      ServiceHeader.GET(ServiceHeader2."Document Type",ServiceHeader2."No.");
      ServiceHeader.TESTFIELD("Document Type",ServiceHeader."Document Type"::Invoice);
    END;

    LOCAL PROCEDURE IsFirstDocLine@2() : Boolean;
    VAR
      ServiceShptLine@1000 : Record 5991;
    BEGIN
      TempServiceShptLine.RESET;
      TempServiceShptLine.COPYFILTERS(Rec);
      TempServiceShptLine.SETRANGE("Document No.","Document No.");
      IF NOT TempServiceShptLine.FINDFIRST THEN BEGIN
        ServiceShptLine.COPYFILTERS(Rec);
        ServiceShptLine.SETRANGE("Document No.","Document No.");
        IF NOT ServiceShptLine.FINDFIRST THEN
          EXIT(FALSE);
        TempServiceShptLine := ServiceShptLine;
        TempServiceShptLine.INSERT;
      END;
      IF "Line No." = TempServiceShptLine."Line No." THEN
        EXIT(TRUE);
    END;

    LOCAL PROCEDURE OKOnPush@19066895();
    BEGIN
      GetShipmentLines;
      CurrPage.CLOSE;
    END;

    PROCEDURE GetShipmentLines@3();
    BEGIN
      CurrPage.SETSELECTIONFILTER(Rec);
      ServiceGetShpt.SetServiceHeader(ServiceHeader);
      ServiceGetShpt.CreateInvLines(Rec);
    END;

    BEGIN
    END.
  }
}

