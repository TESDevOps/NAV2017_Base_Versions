OBJECT Codeunit 6710 ODataUtility
{
  OBJECT-PROPERTIES
  {
    Date=30/03/17;
    Time=12:00:00;
    Version List=NAVW110.00.00.16177;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ODataWizardTxt@1000 : TextConst 'ENU=Set Up Reporting Data;ENG=Set Up Reporting Data';
      LoadingXMLErr@1002 : TextConst 'ENU=There was an error loading the object.;ENG=There was an error loading the object.';

    [TryFunction]
    PROCEDURE GenerateSelectText@19(ServiceNameParam@1001 : Text;ObjectTypeParam@1004 : ',,,,,Codeunit,,,Page,Query';VAR SelectTextParam@1000 : Text);
    VAR
      TenantWebServiceColumns@1003 : Record 6711;
      TenantWebService@1002 : Record 2000000168;
      FirstColumn@1006 : Boolean;
    BEGIN
      IF TenantWebService.GET(ObjectTypeParam,ServiceNameParam) THEN BEGIN
        FirstColumn := TRUE;
        TenantWebServiceColumns.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);

        IF TenantWebServiceColumns.FIND('-') THEN BEGIN
          SelectTextParam := '$select=';
          REPEAT
            IF NOT FirstColumn THEN
              SelectTextParam += ','
            ELSE
              FirstColumn := FALSE;

            SelectTextParam += TenantWebServiceColumns."Field Name";
          UNTIL TenantWebServiceColumns.NEXT = 0;
        END;
      END;
    END;

    [TryFunction]
    PROCEDURE GenerateFilterText@21(ServiceNameParam@1000 : Text;ObjectTypeParam@1003 : ',,,,,Codeunit,,,Page,Query';VAR FilterTextParam@1001 : Text);
    VAR
      TenantWebService@1009 : Record 2000000168;
      TableItemFilterTextDictionary@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      ODataFilterList@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      ColumnList@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      SelectText@1011 : Text;
    BEGIN
      IF TenantWebService.GET(ObjectTypeParam,ServiceNameParam) THEN BEGIN
        TableItemFilterTextDictionary := TableItemFilterTextDictionary.Dictionary;
        ODataFilterList := ODataFilterList.List;
        ColumnList := ColumnList.List;

        IF GenerateSelectText(ServiceNameParam,ObjectTypeParam,SelectText) THEN
          IF GetNAVFilters(TenantWebService,TableItemFilterTextDictionary) THEN
            IF ParseNAVFilters(TenantWebService,TableItemFilterTextDictionary,ODataFilterList,ColumnList,1) THEN
              FilterTextParam := CreateODataFilterText(ODataFilterList);
      END;
    END;

    PROCEDURE GenerateUrl@8(ServiceRootUrlParam@1010 : Text;ServiceNameParam@1000 : Text;ObjectTypeParam@1003 : ',,,,,,,,Page,Query') : Text;
    VAR
      TenantWebService@1001 : Record 2000000168;
      TenantWebServiceOData@1002 : Record 6710;
      ODataUrl@1012 : Text;
      SelectText@1011 : Text;
      FilterText@1009 : Text;
    BEGIN
      IF TenantWebService.GET(ObjectTypeParam,ServiceNameParam) THEN BEGIN
        TenantWebServiceOData.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);

        IF TenantWebServiceOData.FINDFIRST THEN BEGIN
          SelectText := TenantWebServiceOData.GetOdataSelectClause;
          FilterText := TenantWebServiceOData.GetOdataFilterClause;
        END;
      END;

      ODataUrl := BuildUrl(ServiceRootUrlParam,SelectText,FilterText);
      EXIT(ODataUrl);
    END;

    LOCAL PROCEDURE BuildUrl@27(ServiceRootUrlParam@1000 : Text;SelectTextParam@1004 : Text;FilterTextParam@1001 : Text) : Text;
    VAR
      ODataUrl@1003 : Text;
      preSelectTextConjunction@1002 : Text;
    BEGIN
      IF STRPOS(ServiceRootUrlParam,'?tenant=') > 0 THEN
        preSelectTextConjunction := '&'
      ELSE
        preSelectTextConjunction := '?';

      IF (STRLEN(SelectTextParam) > 0) AND (STRLEN(FilterTextParam) > 0) THEN
        ODataUrl := ServiceRootUrlParam + preSelectTextConjunction + SelectTextParam + '&' + FilterTextParam
      ELSE
        IF STRLEN(SelectTextParam) > 0 THEN
          ODataUrl := ServiceRootUrlParam + preSelectTextConjunction + SelectTextParam
        ELSE
          // FilterText is based on SelectText, so it doesn't make sense to have only the FilterText.
          ODataUrl := ServiceRootUrlParam;

      EXIT(ODataUrl);
    END;

    LOCAL PROCEDURE CreateODataFilterText@1(ODataFilterListParam@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1") : Text;
    VAR
      ODataFilterText@1002 : Text;
      I@1000 : Integer;
    BEGIN
      ODataFilterText := '';

      IF ODataFilterListParam.Count > 0 THEN BEGIN
        ODataFilterText := '$filter=';

        FOR I := 0 TO ODataFilterListParam.Count - 1 DO BEGIN
          IF I > 0 THEN BEGIN
            ODataFilterText += ' and '
          END;

          ODataFilterText += FORMAT(ODataFilterListParam.Item(I));
        END;
      END;

      EXIT(ODataFilterText);
    END;

    [TryFunction]
    LOCAL PROCEDURE ParseNAVFilters@3(VAR TenantWebService@1006 : Record 2000000168;TableItemFilterTextDictionaryParam@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";VAR ODataFilterListParam@1023 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";VAR ColumnListParam@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";Action@1005 : Integer);
    VAR
      TenantWebServiceColumns@1007 : Record 6711;
      FieldTable@1009 : Record 2000000041;
      Regex@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      localFilterSegments@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      tempString1@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      tempString2@1011 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      keyValuePair@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.KeyValuePair`2";
      localFilterText@1026 : Text;
      I@1025 : Integer;
      column@1024 : Text;
      value@1017 : Text;
      indexOfKeyStart@1016 : Integer;
      indexOfValueEnd@1015 : Integer;
    BEGIN
      // SORTING(No.) WHERE(No=FILTER(01121212..01454545|31669966),Balance Due=FILTER(>0))

      // Action:  1 = parse and create OData filters
      // Action:  2 = parse, don't create OData filters, just create list of columns

      FOREACH keyValuePair IN TableItemFilterTextDictionaryParam DO BEGIN
        localFilterText := DELSTR(keyValuePair.Value,1,STRPOS(keyValuePair.Value,'WHERE') + 5);  // becomes No=FILTER(01121212..01454545|31669966),Balance Due=FILTER(>0))
        localFilterText := DELSTR(localFilterText,STRLEN(localFilterText),1); // remove ), becomes No=FILTER(01121212..01454545|31669966),Balance Due=FILTER(>0)
        localFilterSegments := Regex.Split(localFilterText,'=FILTER'); // No   (01121212..01454545|31669966),Balance Due   (>0)

        // Break all the filters into key value pairs.
        FOR I := 0 TO localFilterSegments.Length - 2 DO BEGIN
          tempString1 := localFilterSegments.GetValue(I);
          tempString2 := localFilterSegments.GetValue(I + 1);
          indexOfKeyStart := tempString1.LastIndexOf(',');
          indexOfValueEnd := tempString2.LastIndexOf(',');

          // Start index of the key is either at the beginning or right after the comma.
          IF indexOfKeyStart > 0 THEN
            indexOfKeyStart := indexOfKeyStart + 1
          ELSE
            indexOfKeyStart := 0;

          // End index of the value is either right before the comma or at the end.  Make sure we don't confuse commas in last filter value.
          IF (indexOfValueEnd < 0) OR (I = localFilterSegments.Length - 2) THEN
            indexOfValueEnd := tempString2.Length;

          column := tempString1.Substring(indexOfKeyStart,tempString1.Length - indexOfKeyStart);
          value := tempString2.Substring(1,indexOfValueEnd - 2);

          // Convert to OData format if the field is in the dataset.
          FieldTable.SETRANGE(TableNo,keyValuePair.Key);
          FieldTable.SETRANGE("Field Caption",column);
          IF FieldTable.FINDFIRST THEN BEGIN
            TenantWebServiceColumns.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
            TenantWebServiceColumns.SETRANGE("Data Item",keyValuePair.Key);
            TenantWebServiceColumns.SETRANGE("Field Number",FieldTable."No.");
            IF TenantWebServiceColumns.FINDFIRST THEN BEGIN
              IF Action = 1 THEN
                ParseIndividualNAVFilter(TenantWebService,keyValuePair.Key,column,value,ODataFilterListParam)
              ELSE
                IF Action = 2 THEN
                  ColumnListParam.Add(column);
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE ParseIndividualNAVFilter@7(VAR TenantWebService@1002 : Record 2000000168;TableItemParam@1023 : Integer;ColumnNameParam@1025 : Text;FilterValueParam@1024 : Text;VAR ODataFilterListParam@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      partialFilterValue@1001 : Text;
      I@1005 : Integer;
      filterCharacters@1020 : Text;
      individualFilterValue@1019 : Text;
      conjunctionValue@1021 : Text;
    BEGIN
      filterCharacters := '';
      individualFilterValue := '';

      FOR I := 1 TO STRLEN(FilterValueParam) DO BEGIN
        IF (COPYSTR(FilterValueParam,I,1) = '|') OR (COPYSTR(FilterValueParam,I,1) = '&') THEN BEGIN
          partialFilterValue := CreateIndividualODataFilter(TenantWebService,TableItemParam,ColumnNameParam,filterCharacters);
          conjunctionValue := ConvertNavSymbolToODataConjunction(COPYSTR(FilterValueParam,I,1));
          individualFilterValue := '(' + individualFilterValue + partialFilterValue + ')' + conjunctionValue;
          filterCharacters := '';
        END ELSE
          filterCharacters += COPYSTR(FilterValueParam,I,1);
      END;

      partialFilterValue := CreateIndividualODataFilter(TenantWebService,TableItemParam,ColumnNameParam,filterCharacters);

      IF STRPOS(individualFilterValue,'(') = 1 THEN
        individualFilterValue := '(' + individualFilterValue + partialFilterValue + ')'
      ELSE
        individualFilterValue := partialFilterValue;

      ODataFilterListParam.Add(individualFilterValue); // Add last individual filter
    END;

    LOCAL PROCEDURE CreateIndividualODataFilter@5(VAR TenantWebService@1001 : Record 2000000168;TableItemParam@1003 : Integer;ColumnNameParam@1002 : Text;FilterValueParam@1000 : Text) : Text;
    VAR
      FilterValue@1009 : Text;
      FilterValueLeft@1008 : Text;
      FilterValueRight@1007 : Text;
      Position@1006 : Integer;
      ColumnNameLeft@1004 : Text;
      ColumnNameRight@1005 : Text;
    BEGIN
      IF STRPOS(FilterValueParam,'<>') > 0 THEN BEGIN
        FilterValue := DELSTR(FilterValueParam,STRPOS(FilterValueParam,'<>'),STRLEN('<>'));
        FilterValue := DELCHR(FilterValue,'<>',' ');
        ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameParam,FilterValue);
        FilterValue := ColumnNameParam + ' ne ' + FilterValue;
      END ELSE
        IF STRPOS(FilterValueParam,'>=') > 0 THEN BEGIN
          FilterValue := DELSTR(FilterValueParam,STRPOS(FilterValueParam,'>='),STRLEN('>='));
          FilterValue := DELCHR(FilterValue,'<>',' ');
          ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameParam,FilterValue);
          FilterValue := ColumnNameParam + ' ge ' + FilterValue;
        END ELSE
          IF STRPOS(FilterValueParam,'<=') > 0 THEN BEGIN
            FilterValue := DELSTR(FilterValueParam,STRPOS(FilterValueParam,'<='),STRLEN('<='));
            FilterValue := DELCHR(FilterValue,'<>',' ');
            ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameParam,FilterValue);
            FilterValue := ColumnNameParam + ' le ' + FilterValue;
          END ELSE
            IF STRPOS(FilterValueParam,'>') > 0 THEN BEGIN
              FilterValue := DELSTR(FilterValueParam,STRPOS(FilterValueParam,'>'),STRLEN('>'));
              FilterValue := DELCHR(FilterValue,'<>',' ');
              ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameParam,FilterValue);
              FilterValue := ColumnNameParam + ' gt ' + FilterValue;
            END ELSE
              IF STRPOS(FilterValueParam,'<') > 0 THEN BEGIN
                FilterValue := DELSTR(FilterValueParam,STRPOS(FilterValueParam,'<'),STRLEN('<'));
                FilterValue := DELCHR(FilterValue,'<>',' ');
                ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameParam,FilterValue);
                FilterValue := ColumnNameParam + ' lt ' + FilterValue;
              END ELSE
                IF STRPOS(FilterValueParam,'..') > 0 THEN BEGIN
                  // Replace .. with appropriate ge and le statement
                  FilterValue := DELCHR(FilterValueParam,'<>');
                  Position := STRPOS(FilterValue,'..');

                  IF Position = 1 THEN BEGIN
                    // Pattern like ..1000
                    FilterValue := DELSTR(FilterValue,Position,2);
                    ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameParam,FilterValue);
                    FilterValue := ColumnNameParam + ' le ' + FilterValue
                  END ELSE
                    IF Position = STRLEN(FilterValue) - 1 THEN BEGIN
                      // Pattern like 1000..
                      FilterValue := DELSTR(FilterValue,Position,2);
                      ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameParam,FilterValue);
                      FilterValue := ColumnNameParam + ' ge ' + FilterValue
                    END ELSE BEGIN
                      // Pattern like 1000..2000
                      FilterValueLeft := COPYSTR(FilterValue,1,Position - 1);
                      FilterValueRight := COPYSTR(FilterValue,Position + 2,STRLEN(FilterValue) - Position - 1);
                      ColumnNameLeft := ColumnNameParam;
                      ColumnNameRight := ColumnNameParam;
                      ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameLeft,FilterValueLeft);
                      ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameRight,FilterValueRight);
                      FilterValueLeft := ColumnNameLeft + ' ge ' + FilterValueLeft;
                      FilterValueRight := ColumnNameRight + ' le ' + FilterValueRight;
                      FilterValue := FilterValueLeft + ' and ' + FilterValueRight;
                    END;
                END ELSE BEGIN
                  FilterValue := DELCHR(FilterValueParam,'<>',' ');
                  ConvertToODataSyntax(TenantWebService,TableItemParam,ColumnNameParam,FilterValue);
                  FilterValue := ColumnNameParam + ' eq ' + FilterValue;
                END;

      EXIT(FilterValue);
    END;

    LOCAL PROCEDURE ConvertToODataSyntax@15(VAR TenantWebService@1002 : Record 2000000168;TableItemParam@1003 : Integer;VAR ColumnNameParam@1000 : Text;VAR FilterValueParam@1001 : Text);
    VAR
      FieldTable@1016 : Record 2000000041;
      TenantWebServiceColumns@1008 : Record 6711;
      DotNetDateTime@1013 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DecimalVariable@1009 : Decimal;
      BigIntegerVariable@1010 : BigInteger;
      DateVariable@1011 : Date;
      BoolVar@1012 : Boolean;
    BEGIN
      // Look up the datatype and put in appropriate format.
      FieldTable.SETRANGE(TableNo,TableItemParam);
      FieldTable.SETRANGE("Field Caption",ColumnNameParam);

      IF FieldTable.FINDFIRST THEN
        CASE FieldTable.Type OF
          FieldTable.Type::Text,FieldTable.Type::Code,FieldTable.Type::OemCode,FieldTable.Type::OemText,FieldTable.Type::Option:
            BEGIN
              FilterValueParam := ReplaceSpecialURICharacters(FilterValueParam);

              IF (STRLEN(FilterValueParam) > 0) AND (STRPOS(FilterValueParam,'''') = 1) THEN
                FilterValueParam := FilterValueParam
              ELSE
                FilterValueParam := '''' + FilterValueParam + '''';
            END;
          FieldTable.Type::BigInteger,FieldTable.Type::Integer:
            BEGIN
              EVALUATE(BigIntegerVariable,FilterValueParam);
              FilterValueParam := FORMAT(BigIntegerVariable,0,9);
            END;
          FieldTable.Type::Decimal:
            BEGIN
              EVALUATE(DecimalVariable,FilterValueParam);
              FilterValueParam := FORMAT(DecimalVariable,0,9) + 'M';
            END;
          FieldTable.Type::Date,FieldTable.Type::DateTime:
            BEGIN
              EVALUATE(DateVariable,FilterValueParam);
              DotNetDateTime := DotNetDateTime.DateTime(DATE2DMY(DateVariable,3),DATE2DMY(DateVariable,2),DATE2DMY(DateVariable,1));
              FilterValueParam := 'DateTime''' + DotNetDateTime.ToString('yyyy-MM-dd') + ''''
            END;
          FieldTable.Type::Time:
            FilterValueParam := FilterValueParam;
          FieldTable.Type::Boolean:
            BEGIN
              EVALUATE(BoolVar,FilterValueParam);

              IF BoolVar THEN
                FilterValueParam := 'true'
              ELSE
                FilterValueParam := 'false';
            END;
        END;

      // Look up the column name.  Column must be in appropriate format or filter will fail.
      TenantWebServiceColumns.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
      TenantWebServiceColumns.SETRANGE("Data Item",TableItemParam);
      TenantWebServiceColumns.SETRANGE("Field Number",FieldTable."No.");
      IF TenantWebServiceColumns.FINDFIRST THEN
        ColumnNameParam := TenantWebServiceColumns."Field Name";
    END;

    LOCAL PROCEDURE ReplaceSpecialURICharacters@16(FilterValueParam@1000 : Text) : Text;
    VAR
      FilterValueDotNetString@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      ReturnText@1002 : Text;
    BEGIN
      FilterValueDotNetString := FilterValueParam;
      FilterValueDotNetString := FilterValueDotNetString.Replace('%','%25');
      FilterValueDotNetString := FilterValueDotNetString.Replace('+','%2B');
      FilterValueDotNetString := FilterValueDotNetString.Replace('/','%2F');
      FilterValueDotNetString := FilterValueDotNetString.Replace('?','%3F');
      FilterValueDotNetString := FilterValueDotNetString.Replace('#','%23');
      FilterValueDotNetString := FilterValueDotNetString.Replace('&','%26');
      ReturnText := FilterValueDotNetString;
      EXIT(ReturnText);
    END;

    LOCAL PROCEDURE ConvertNavSymbolToODataConjunction@2(ConjunctionParam@1000 : Text) : Text;
    VAR
      localODataConjunction@1001 : Text;
    BEGIN
      CASE ConjunctionParam OF
        '|':
          localODataConjunction := ' or ';
        '&':
          localODataConjunction := ' and ';
      END;

      EXIT(localODataConjunction);
    END;

    [TryFunction]
    LOCAL PROCEDURE GetNAVFilters@12(VAR TenantWebService@1000 : Record 2000000168;VAR TableItemFilterTextDictionaryParam@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      TenantWebServiceFilter@1001 : Record 6712;
      FilterText@1008 : Text;
    BEGIN
      TenantWebServiceFilter.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
      IF TenantWebServiceFilter.FIND('-') THEN BEGIN
        REPEAT
          FilterText := TenantWebServiceFilter.GetFilter;

          IF STRLEN(FilterText) > 0 THEN
            TableItemFilterTextDictionaryParam.Add(TenantWebServiceFilter."Data Item",FilterText);
        UNTIL TenantWebServiceFilter.NEXT = 0;
      END;
    END;

    [EventSubscriber(Table,2000000168,OnAfterDeleteEvent)]
    LOCAL PROCEDURE DeleteODataOnDeleteTenantWebService@6(VAR Rec@1000 : Record 2000000168;RunTrigger@1001 : Boolean);
    VAR
      TenantWebServiceColumns@1003 : Record 6711;
      TenantWebServiceFilter@1002 : Record 6712;
      TenantWebServiceOData@1004 : Record 6710;
    BEGIN
      // Delete the data from the OData concrete tables when a Tenant Web Service record is deleted.
      TenantWebServiceFilter.SETRANGE(TenantWebServiceID,Rec.RECORDID);
      TenantWebServiceColumns.SETRANGE(TenantWebServiceID,Rec.RECORDID);
      TenantWebServiceOData.SETRANGE(TenantWebServiceID,Rec.RECORDID);
      TenantWebServiceFilter.DELETEALL;
      TenantWebServiceColumns.DELETEALL;
      TenantWebServiceOData.DELETEALL;
    END;

    PROCEDURE ConvertNavFieldNameToOdataName@10(NavFieldName@1000 : Text) : Text;
    VAR
      i@1001 : Integer;
    BEGIN
      i := STRPOS(NavFieldName,'%');
      IF i > 0 THEN
        NavFieldName := INSSTR(NavFieldName,'Percent',i);
      NavFieldName := DELCHR(NavFieldName,'=','(.)<>%');
      NavFieldName := CONVERTSTR(NavFieldName,' ,:;?&"/-','_________');
      EXIT(NavFieldName);
    END;

    PROCEDURE GetColumnsFromFilter@4(VAR TenantWebService@1004 : Record 2000000168;FilterText@1000 : Text;VAR ColumnList@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      TableItemFilterTextDictionary@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      ODataFilterList@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
    BEGIN
      TableItemFilterTextDictionary := TableItemFilterTextDictionary.Dictionary;
      ODataFilterList := ODataFilterList.List;
      TableItemFilterTextDictionary.Add(1,FilterText);
      ParseNAVFilters(TenantWebService,TableItemFilterTextDictionary,ODataFilterList,ColumnList,2);
    END;

    [EventSubscriber(Codeunit,2,OnCompanyInitialize)]
    PROCEDURE CreateAssistedSetup@9();
    VAR
      AssistedSetup@1000 : Record 1803;
      NewOrderNumber@1001 : Integer;
    BEGIN
      IF AssistedSetup.GET(PAGE::"OData Setup Wizard") THEN
        EXIT;

      AssistedSetup.LOCKTABLE;
      AssistedSetup.SETCURRENTKEY(Order,Visible);
      IF AssistedSetup.FINDLAST THEN
        NewOrderNumber := AssistedSetup.Order + 1
      ELSE
        NewOrderNumber := 1;

      CLEAR(AssistedSetup);
      AssistedSetup.INIT;
      AssistedSetup.VALIDATE("Page ID",PAGE::"OData Setup Wizard");
      AssistedSetup.VALIDATE(Name,ODataWizardTxt);
      AssistedSetup.VALIDATE(Order,NewOrderNumber);
      AssistedSetup.VALIDATE(Status,AssistedSetup.Status::"Not Completed");
      AssistedSetup.VALIDATE(Visible,TRUE);
      AssistedSetup.INSERT(TRUE);
    END;

    PROCEDURE GenerateExcelWorkBook@24(ObjectTypeParm@1000 : ',,,,,Codeunit,,,Page,Query';ServiceNameParm@1001 : Text;ShowDialogParm@1003 : Boolean);
    VAR
      TenantWebService@1002 : Record 2000000168;
      TempBlob@1018 : TEMPORARY Record 99008535;
      FileManagement@1004 : Codeunit 419;
      DataEntityExportInfo@1017 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.Excel.Export.DataEntityExportInfo";
      DataEntityExportGenerator@1012 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.Excel.Export.DataEntityExportGenerator";
      NvOutStream@1008 : OutStream;
      FileName@1007 : Text;
    BEGIN
      IF NOT TenantWebService.GET(ObjectTypeParm,ServiceNameParm) THEN
        EXIT;

      DataEntityExportInfo := DataEntityExportInfo.DataEntityExportInfo;
      CreateDataEntityExportInfo(TenantWebService,DataEntityExportInfo);

      DataEntityExportGenerator := DataEntityExportGenerator.DataEntityExportGenerator;
      TempBlob.Blob.CREATEOUTSTREAM(NvOutStream);
      DataEntityExportGenerator.GenerateWorkbook(DataEntityExportInfo,NvOutStream);
      FileName := TenantWebService."Service Name" + '.xlsx';
      FileManagement.BLOBExport(TempBlob,FileName,ShowDialogParm);
    END;

    [TryFunction]
    LOCAL PROCEDURE GetConjunctionString@48(VAR localFilterSegments@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";VAR ConjunctionStringParam@1001 : Text;VAR IndexParam@1002 : Integer);
    BEGIN
      ConjunctionStringParam := localFilterSegments.GetValue(IndexParam);
      IndexParam += 1;
    END;

    [TryFunction]
    LOCAL PROCEDURE GetNextFieldString@23(VAR localFilterSegments@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";VAR NextFieldStringParam@1001 : Text;VAR IndexParam@1002 : Integer);
    BEGIN
      NextFieldStringParam := localFilterSegments.GetValue(IndexParam);
      IndexParam += 1;
    END;

    LOCAL PROCEDURE TrimFilterClause@22(VAR FilterClauseParam@1000 : Text);
    BEGIN
      FilterClauseParam := DELSTR(FilterClauseParam,1,STRPOS(FilterClauseParam,'filter=') + 6);
      // becomes  ((No ge '01121212' and No le '01445544') or No eq '10000') and ((Name eq 'bob') and Name eq 'frank')
      FilterClauseParam := DELCHR(FilterClauseParam,'<','(');
      FilterClauseParam := DELCHR(FilterClauseParam,'>',')');
      // becomes  (No ge '01121212' and No le '01445544') or No eq '10000') and ((Name eq 'bob') and Name eq 'frank'
    END;

    PROCEDURE GetEndPointAndCreateWorkbook@20(ObjectTypeParam@1001 : ',,,,,Codeunit,,,Page,Query';ObjectIDParam@1000 : Integer;ShowDialogParam@1007 : Boolean);
    VAR
      TenantWebService@1002 : Record 2000000168;
      TenantWebServiceOData@1004 : Record 6710;
      AllObjWithCaption@1010 : Record 2000000058;
      ColumnDictionary@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      SourceTableText@1006 : Text;
      SavedSelectText@1003 : Text;
      DefaultSelectText@1008 : Text;
    BEGIN
      ColumnDictionary := ColumnDictionary.Dictionary;

      AllObjWithCaption.SETRANGE("Object ID",ObjectIDParam);
      AllObjWithCaption.SETRANGE("Object Type",ObjectTypeParam);
      AllObjWithCaption.FINDFIRST;

      TenantWebService.INIT;
      TenantWebService.SETRANGE("Object Type",ObjectTypeParam);
      TenantWebService.SETRANGE("Object ID",ObjectIDParam);
      IF TenantWebService.FIND('-') THEN BEGIN
        REPEAT
          TenantWebServiceOData.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
          IF TenantWebServiceOData.FIND('-') THEN BEGIN
            REPEAT
              // the $filter string must be null
              IF NOT TenantWebServiceOData.ODataFilterClause.HASVALUE THEN BEGIN
                // The saved $select must match the default $select for the page.
                SavedSelectText := TenantWebServiceOData.GetOdataSelectClause;
                InitSelectedColumns(ObjectTypeParam,ObjectIDParam,ColumnDictionary,SourceTableText);
                GetDefaultSelectText(ColumnDictionary,DefaultSelectText);
              END;
            UNTIL (TenantWebServiceOData.NEXT = 0) OR (SavedSelectText = DefaultSelectText);
          END;
        UNTIL (TenantWebService.NEXT = 0) OR (SavedSelectText = DefaultSelectText);

        IF (SavedSelectText = '') OR (SavedSelectText <> DefaultSelectText) THEN
          // We have a Tenant Web Service record but no $select or $select does not match the pages default columns
          CreateEndPoint(ObjectTypeParam,ObjectIDParam,TenantWebService,AllObjWithCaption."Object Caption",ColumnDictionary);
      END ELSE
        // Create an endpoint that can be used by the Reporting Setup wizard
        CreateEndPoint(ObjectTypeParam,ObjectIDParam,TenantWebService,AllObjWithCaption."Object Caption",ColumnDictionary);

      GenerateExcelWorkBook(ObjectTypeParam::Page,TenantWebService."Service Name",ShowDialogParam)
    END;

    PROCEDURE CreateDataEntityExportInfo@18(VAR TenantWebService@1013 : Record 2000000168;VAR DataEntityExportInfoParam@1002 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.Excel.Export.DataEntityExportInfo");
    VAR
      TenantWebServiceColumns@1015 : Record 6711;
      TenantWebServiceOData@1014 : Record 6710;
      TypeHelper@1011 : Codeunit 10;
      ConnectionInfo@1010 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.Excel.Export.ConnectionInfo";
      OfficeAppInfo@1009 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.OfficeAppInfo";
      DataEntityInfo@1008 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.DataEntityInfo";
      BindingInfo@1007 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.BindingInfo";
      FieldInfo@1005 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FieldInfo";
      FilterBinaryNode@1004 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FilterBinaryNode";
      FieldFilterCollectionNode@1003 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode";
      FieldFilterCollectionNode2@1001 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode";
      EntityFilterCollectionNode@1000 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode";
      FilterLeftOperand@1016 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FilterLeftOperand";
      ValueString@1023 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      Regex@1021 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      FilterSegments@1020 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      ConjunctionString@1019 : Text;
      OldConjunctionString@1018 : Text;
      NextFieldString@1017 : Text;
      Index@1025 : Integer;
      FilterClause@1029 : Text;
      HostName@1022 : Text;
      ServiceName@1033 : Text;
      NumberOfCharsTrimmed@1032 : Integer;
      TrimPos@1006 : Integer;
      FieldFilterCounter@1012 : Integer;
    BEGIN
      OfficeAppInfo := OfficeAppInfo.OfficeAppInfo;
      OfficeAppInfo.Id := 'WA104379629';
      OfficeAppInfo.Store := 'en-US'; // todo US store only?
      OfficeAppInfo.StoreType := 'OMEX';
      OfficeAppInfo.Version := '1.3.0.0';

      DataEntityExportInfoParam := DataEntityExportInfoParam.DataEntityExportInfo;
      DataEntityExportInfoParam.AppReference := OfficeAppInfo;

      ConnectionInfo := ConnectionInfo.ConnectionInfo;
      HostName := GETURL(CLIENTTYPE::Web);
      IF STRPOS(HostName,'?') <> 0 THEN
        HostName := COPYSTR(HostName,1,STRPOS(HostName,'?') - 1);
      ConnectionInfo.HostName := HostName;

      DataEntityExportInfoParam.Connection := ConnectionInfo;
      DataEntityExportInfoParam.Language := TypeHelper.LanguageIDToCultureName(WINDOWSLANGUAGE); // todo get language
      DataEntityExportInfoParam.EnableDesign := TRUE;
      DataEntityExportInfoParam.RefreshOnOpen := TRUE;
      DataEntityExportInfoParam.Headers.Add('Company',TenantWebService.CURRENTCOMPANY);
      DataEntityInfo := DataEntityInfo.DataEntityInfo;
      ServiceName := ExternalizeName(TenantWebService."Service Name");
      DataEntityInfo.Name := ServiceName;
      DataEntityInfo.PublicName := ServiceName;
      DataEntityExportInfoParam.Entities.Add(DataEntityInfo);

      BindingInfo := BindingInfo.BindingInfo;
      BindingInfo.EntityName := DataEntityInfo.Name;

      DataEntityExportInfoParam.Bindings.Add(BindingInfo);

      TenantWebServiceOData.INIT;
      TenantWebServiceOData.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
      TenantWebServiceOData.FINDFIRST;

      TenantWebServiceColumns.INIT;
      TenantWebServiceColumns.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
      IF TenantWebServiceColumns.FINDSET THEN BEGIN
        EntityFilterCollectionNode := EntityFilterCollectionNode.FilterCollectionNode;  // One filter collection node for entire entity

        REPEAT
          FieldInfo := FieldInfo.FieldInfo;
          FieldInfo.Name := TenantWebServiceColumns."Field Name";
          FieldInfo.Label := TenantWebServiceColumns."Field Name";
          BindingInfo.Fields.Add(FieldInfo);

          // New column, if the previous row had data, add it entity filter collection
          AddFieldNodeToEntityNode(FieldFilterCollectionNode,FieldFilterCollectionNode2,EntityFilterCollectionNode);

          TrimPos := 0;
          Index := 1;
          OldConjunctionString := '';
          FieldFilterCounter += 1;

          FilterClause := TenantWebServiceOData.GetOdataFilterClause;
          // $filter=((No ge '01121212' and No le '01445544') or No eq '10000') and ((Name eq 'bo b') and Name eq 'fra nk')
          IF FilterClause <> '' THEN BEGIN
            TrimFilterClause(FilterClause);

            IF STRPOS(FilterClause,TenantWebServiceColumns."Field Name" + ' ') > 0 THEN BEGIN
              FilterClause := COPYSTR(FilterClause,STRPOS(FilterClause,TenantWebServiceColumns."Field Name" + ' '));

              WHILE FilterClause <> '' DO BEGIN
                FilterBinaryNode := FilterBinaryNode.FilterBinaryNode;
                FilterLeftOperand := FilterLeftOperand.FilterLeftOperand;

                FilterLeftOperand.Field(TenantWebServiceColumns."Field Name");
                FilterLeftOperand.Type(GetFieldType(TenantWebServiceColumns));

                FilterBinaryNode.Left := FilterLeftOperand;
                FilterSegments := Regex.Split(FilterClause,' ');

                FilterBinaryNode.Operator(FilterSegments.GetValue(1));
                ValueString := FilterSegments.GetValue(2);
                Index := 3;

                NumberOfCharsTrimmed := ConcatValueStringPortions(ValueString,FilterSegments,Index);

                FilterBinaryNode.Right(ValueString);

                TrimPos := STRPOS(FilterClause,ValueString) + STRLEN(ValueString) + NumberOfCharsTrimmed;

                IF NOT GetConjunctionString(FilterSegments,ConjunctionString,Index) THEN
                  ConjunctionString := '';

                IF NOT GetNextFieldString(FilterSegments,NextFieldString,Index) THEN
                  NextFieldString := '';

                TrimPos := TrimPos + STRLEN(ConjunctionString) + STRLEN(NextFieldString);

                IF (NextFieldString = '') OR (NextFieldString = TenantWebServiceColumns."Field Name") THEN BEGIN
                  IF (OldConjunctionString <> '') AND (OldConjunctionString <> ConjunctionString) THEN BEGIN
                    IF ISNULL(FieldFilterCollectionNode2) THEN BEGIN
                      FieldFilterCollectionNode2 := FieldFilterCollectionNode2.FilterCollectionNode;
                      FieldFilterCollectionNode2.Operator(ConjunctionString);
                    END;

                    FieldFilterCollectionNode.Collection.Add(FilterBinaryNode);
                    IF OldConjunctionString <> '' THEN
                      FieldFilterCollectionNode.Operator(OldConjunctionString);

                    FieldFilterCollectionNode2.Collection.Add(FieldFilterCollectionNode);

                    CLEAR(FieldFilterCollectionNode);
                  END ELSE BEGIN
                    IF ISNULL(FieldFilterCollectionNode) THEN
                      FieldFilterCollectionNode := FieldFilterCollectionNode.FilterCollectionNode;

                    FieldFilterCollectionNode.Collection.Add(FilterBinaryNode);
                    FieldFilterCollectionNode.Operator(OldConjunctionString)
                  END
                END ELSE BEGIN
                  IF ISNULL(FieldFilterCollectionNode2) THEN
                    FieldFilterCollectionNode2 := FieldFilterCollectionNode2.FilterCollectionNode;

                  IF ISNULL(FieldFilterCollectionNode) THEN
                    FieldFilterCollectionNode := FieldFilterCollectionNode.FilterCollectionNode;

                  FieldFilterCollectionNode.Collection.Add(FilterBinaryNode);
                  FieldFilterCollectionNode.Operator(OldConjunctionString);

                  FieldFilterCollectionNode2.Collection.Add(FieldFilterCollectionNode);

                  CLEAR(FieldFilterCollectionNode);

                  FilterClause := ''; // the FilterClause is exhausted for this field
                END;

                OldConjunctionString := ConjunctionString;

                FilterClause := COPYSTR(FilterClause,TrimPos); // remove that portion that has been processed.
              END;
            END;
          END;
        UNTIL TenantWebServiceColumns.NEXT = 0;

        AddFieldNodeToEntityNode(FieldFilterCollectionNode,FieldFilterCollectionNode2,EntityFilterCollectionNode);
      END;

      IF FieldFilterCounter > 1 THEN
        EntityFilterCollectionNode.Operator('and');  // All fields are anded together

      DataEntityInfo.Filter(EntityFilterCollectionNode);
    END;

    LOCAL PROCEDURE ConcatValueStringPortions@17(VAR ValueStringParam@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";VAR FilterSegmentsParam@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";VAR IndexParm@1007 : Integer) : Integer;
    VAR
      ValueStringPortion@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      LastPosition@1001 : Integer;
      FirstPosition@1002 : Integer;
      SingleTick@1006 : Char;
      StrLenAfterTrim@1008 : Integer;
      StrLenBeforeTrim@1004 : Integer;
    BEGIN
      SingleTick := 39;

      FirstPosition := ValueStringParam.IndexOf(SingleTick);
      LastPosition := ValueStringParam.LastIndexOf(SingleTick);

      // The valueString might have been spit earlier if it had an embedded ' ', stick it back together
      IF (FirstPosition = 0) AND (FirstPosition = LastPosition) THEN BEGIN
        REPEAT
          ValueStringPortion := FilterSegmentsParam.GetValue(IndexParm);
          ValueStringParam := ValueStringParam.Concat(ValueStringParam,' ');
          ValueStringParam := ValueStringParam.Concat(ValueStringParam,ValueStringPortion);
          ValueStringPortion := FilterSegmentsParam.GetValue(IndexParm);
          IndexParm += 1 ;
        UNTIL ValueStringPortion.LastIndexOf(SingleTick) > 0;
      END;

      // Now that the string has been put back together if needed, remove leading and trailing SingleTick
      // as the excel addin will apply them.
      FirstPosition := ValueStringParam.IndexOf(SingleTick);

      StrLenBeforeTrim := STRLEN(ValueStringParam);
      IF FirstPosition = 0 THEN BEGIN
        ValueStringParam := DELSTR(ValueStringParam,1,1);
        LastPosition := ValueStringParam.LastIndexOf(SingleTick);
        IF LastPosition > 0 THEN BEGIN
          ValueStringParam := DELCHR(ValueStringParam,'>',')'); // Remove any trailing ')'
          ValueStringParam := DELSTR(ValueStringParam,ValueStringParam.Length,1);
        END;
      END;

      StrLenAfterTrim := STRLEN(ValueStringParam);
      EXIT(StrLenBeforeTrim - StrLenAfterTrim);
    END;

    LOCAL PROCEDURE GetFieldType@13(VAR TenantWebServiceColumnsParam@1001 : Record 6711) : Text;
    VAR
      FieldTable@1000 : Record 2000000041;
    BEGIN
      FieldTable.SETRANGE(TableNo,TenantWebServiceColumnsParam."Data Item");
      FieldTable.SETRANGE("No.",TenantWebServiceColumnsParam."Field Number");
      IF FieldTable.FINDFIRST THEN
        CASE FieldTable.Type OF
          FieldTable.Type::Text,FieldTable.Type::Code,FieldTable.Type::OemCode,FieldTable.Type::OemText,FieldTable.Type::Option:
            EXIT('Edm.String');
          FieldTable.Type::BigInteger,FieldTable.Type::Integer:
            EXIT('Edm.Int32');
          FieldTable.Type::Decimal:
            EXIT('Edm.Decimal');
          FieldTable.Type::Date,FieldTable.Type::DateTime,FieldTable.Type::Time:
            EXIT('Edm.DateTimeOffset');
          FieldTable.Type::Boolean:
            EXIT('Edm.Boolean');
        END;
    END;

    LOCAL PROCEDURE AddFieldNodeToEntityNode@11(VAR FieldFilterCollectionNodeParam@1002 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode";VAR FieldFilterCollectionNode2Param@1001 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode";VAR EntityFilterCollectionNodeParam@1000 : DotNet "'Microsoft.Dynamics.Platform.Integration.Office, Version=7.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Platform.Integration.Office.FilterCollectionNode");
    BEGIN
      IF NOT ISNULL(FieldFilterCollectionNode2Param) THEN BEGIN
        EntityFilterCollectionNodeParam.Collection.Add(FieldFilterCollectionNode2Param);
        CLEAR(FieldFilterCollectionNode2Param);
      END;

      IF NOT ISNULL(FieldFilterCollectionNodeParam) THEN BEGIN
        EntityFilterCollectionNodeParam.Collection.Add(FieldFilterCollectionNodeParam);
        CLEAR(FieldFilterCollectionNodeParam);
      END;
    END;

    LOCAL PROCEDURE InitSelectedColumns@30(ObjectType@1000 : ',,,,,,,,Page,Query';ObjectID@1005 : Integer;ColumnDictionary@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";VAR SourceTableText@1004 : Text);
    VAR
      ObjectMetadata@1001 : Record 2000000071;
      inStream@1002 : InStream;
    BEGIN
      IF NOT ObjectMetadata.GET(ObjectType,ObjectID) THEN
        EXIT;
      IF NOT ObjectMetadata.Metadata.HASVALUE THEN
        EXIT;

      ObjectMetadata.CALCFIELDS(Metadata);
      ObjectMetadata.Metadata.CREATEINSTREAM(inStream,TEXTENCODING::UTF8);
      InitColumnsForPage(inStream,ColumnDictionary,SourceTableText);
    END;

    LOCAL PROCEDURE InitColumnsForPage@31(pageStream@1000 : InStream;ColumnDictionary@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";VAR SourceTableTextParam@1017 : Text);
    VAR
      FieldsTable@1014 : Record 2000000041;
      XMLDOMManagement@1001 : Codeunit 6224;
      ODataUtility@1018 : Codeunit 6710;
      XmlDocument@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XmlNodeList@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XmlNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlAttribute@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
      AttributesCollection@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttributeCollection";
      NodeListEnum@1007 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      CollectionAttributeEnum@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      PageStreamText@1011 : Text;
      XmlText@1012 : Text;
      FieldIDText@1013 : Text;
      FieldNameText@1015 : Text;
      ValidTag@1016 : Boolean;
    BEGIN
      WHILE NOT pageStream.EOS DO BEGIN
        CLEAR(PageStreamText);
        pageStream.READTEXT(PageStreamText);
        XmlText := XmlText + PageStreamText;
      END;

      XmlDocument := XmlDocument.XmlDocument;
      IF NOT XMLDOMManagement.LoadXMLDocumentFromText(XmlText,XmlDocument)THEN
        ERROR(LoadingXMLErr);

      XmlNodeList := XmlDocument.GetElementsByTagName('SourceObject');
      IF XmlNodeList.Count <> 1 THEN
        ERROR(LoadingXMLErr);

      NodeListEnum := XmlNodeList.GetEnumerator;
      NodeListEnum.MoveNext;
      XmlNode := NodeListEnum.Current;
      AttributesCollection := XmlNode.Attributes;
      CollectionAttributeEnum := AttributesCollection.GetEnumerator;
      WHILE CollectionAttributeEnum.MoveNext DO BEGIN
        XmlAttribute := CollectionAttributeEnum.Current;
        IF XmlAttribute.Name = 'SourceTable' THEN
          SourceTableTextParam := XmlAttribute.Value;
      END;

      XmlNodeList := XmlDocument.GetElementsByTagName('Controls');
      NodeListEnum := XmlNodeList.GetEnumerator;
      WHILE NodeListEnum.MoveNext DO BEGIN
        ValidTag := FALSE;
        FieldIDText := '';
        FieldNameText := '';

        XmlNode := NodeListEnum.Current;
        AttributesCollection := XmlNode.Attributes;
        CollectionAttributeEnum := AttributesCollection.GetEnumerator;
        WHILE CollectionAttributeEnum.MoveNext DO BEGIN
          XmlAttribute := CollectionAttributeEnum.Current;

          IF (XmlAttribute.Name = 'xsi:type') AND (XmlAttribute.Value = 'ControlDefinition') THEN
            ValidTag := TRUE;

          IF XmlAttribute.Name = 'Name' THEN
            FieldNameText := XmlAttribute.Value;

          IF XmlAttribute.Name = 'DataColumnName' THEN
            FieldIDText := XmlAttribute.Value;

          IF (XmlAttribute.Name = 'Visible') AND (XmlAttribute.Value = 'FALSE') THEN
            ValidTag := FALSE;

          IF STRPOS(FieldIDText,'Control') > 0 THEN
            ValidTag := FALSE;
        END;

        IF ValidTag THEN BEGIN
          EVALUATE(FieldsTable.TableNo,SourceTableTextParam);
          EVALUATE(FieldsTable."No.",FieldIDText);
          IF FieldsTable.GET(FieldsTable.TableNo,FieldsTable."No.") THEN BEGIN
            IF ColumnDictionary.ContainsKey(FieldsTable."No.") THEN
              EXIT;

            IF FieldNameText = '' THEN
              FieldNameText := FieldsTable.FieldName;

            // Convert to OData compatible name.
            FieldNameText := ODataUtility.ConvertNavFieldNameToOdataName(FieldNameText);
            ColumnDictionary.Add(FieldsTable."No.",FieldNameText);
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE InsertSelectedColumns@32(VAR TenantWebService@1000 : Record 2000000168;VAR ColumnDictionary@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";TableNo@1007 : Integer);
    VAR
      TenantWebServiceColumns@1004 : Record 6711;
      keyValuePair@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.KeyValuePair`2";
    BEGIN
      FOREACH keyValuePair IN ColumnDictionary DO BEGIN
        CLEAR(TenantWebServiceColumns);
        TenantWebServiceColumns.INIT;
        TenantWebServiceColumns.VALIDATE(TenantWebServiceID,TenantWebService.RECORDID);
        TenantWebServiceColumns.VALIDATE("Data Item",TableNo);
        TenantWebServiceColumns.VALIDATE(Include,TRUE);
        TenantWebServiceColumns.VALIDATE("Field Number",keyValuePair.Key);
        TenantWebServiceColumns.VALIDATE("Field Name",COPYSTR(keyValuePair.Value,1));
        TenantWebServiceColumns.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE InsertODataRecord@25(VAR TenantWebService@1000 : Record 2000000168);
    VAR
      TenantWebServiceOData@1001 : Record 6710;
      SelectTextParam@1002 : Text;
    BEGIN
      GenerateSelectText(TenantWebService."Service Name",TenantWebService."Object Type",SelectTextParam);

      TenantWebServiceOData.INIT;
      TenantWebServiceOData.VALIDATE(TenantWebServiceID,TenantWebService.RECORDID);
      TenantWebServiceOData.SetOdataSelectClause(SelectTextParam);
      TenantWebServiceOData.INSERT(TRUE);
    END;

    LOCAL PROCEDURE InsertTenantWebService@29(ObjectTypeParam@1001 : ',,,,,Codeunit,,,Page,Query';ObjectIDParam@1000 : Integer;VAR TenantWebService@1002 : Record 2000000168;ServiceNameParam@1004 : Text[240]);
    VAR
      Counter@1003 : Integer;
      ServiceName@1005 : Text[240];
    BEGIN
      TenantWebService.INIT;
      TenantWebService.VALIDATE("Object Type",ObjectTypeParam::Page);
      TenantWebService.VALIDATE("Object ID",ObjectIDParam);
      TenantWebService.VALIDATE(Published,TRUE);
      REPEAT
        TenantWebService.VALIDATE("Service Name",ServiceNameParam);
        IF Counter > 0 THEN BEGIN
          ServiceName := ServiceNameParam;
          ServiceName += FORMAT(Counter);
          TenantWebService.VALIDATE("Service Name",ServiceName);
        END;
        Counter += 1;
      UNTIL TenantWebService.INSERT(TRUE) OR (Counter = 1000);
    END;

    LOCAL PROCEDURE GetDefaultSelectText@44(VAR ColumnDictionary@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";VAR SelectTextParam@1001 : Text);
    VAR
      keyValuePair@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.KeyValuePair`2";
      FirstColumn@1002 : Boolean;
    BEGIN
      FirstColumn := TRUE;
      SelectTextParam := '$select=';
      FOREACH keyValuePair IN ColumnDictionary DO BEGIN
        IF NOT FirstColumn THEN
          SelectTextParam += ','
        ELSE
          FirstColumn := FALSE;

        SelectTextParam += COPYSTR(keyValuePair.Value,1);
      END;
    END;

    LOCAL PROCEDURE CreateEndPoint@28(ObjectTypeParam@1001 : ',,,,,Codeunit,,,Page,Query';ObjectIDParam@1000 : Integer;VAR TenantWebService@1002 : Record 2000000168;ServiceNameParam@1003 : Text[240];VAR ColumnDictionary@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2");
    VAR
      SourceTableText@1005 : Text;
      TableNo@1006 : Integer;
    BEGIN
      InsertTenantWebService(ObjectTypeParam,ObjectIDParam,TenantWebService,ServiceNameParam);
      InitSelectedColumns(ObjectTypeParam,ObjectIDParam,ColumnDictionary,SourceTableText);
      EVALUATE(TableNo,SourceTableText);
      InsertSelectedColumns(TenantWebService,ColumnDictionary,TableNo);
      InsertODataRecord(TenantWebService);
    END;

    [EventSubscriber(Codeunit,1,OnEditInExcel)]
    LOCAL PROCEDURE EditInExcel@34(ObjectId@1000 : Integer);
    VAR
      Type@1001 : ',,,,,Codeunit,,,Page,Query';
    BEGIN
      GetEndPointAndCreateWorkbook(Type::Page,ObjectId,TRUE);
    END;

    LOCAL PROCEDURE ExternalizeName@45(Name@1000 : Text) : Text;
    BEGIN
      // Service names are externalized by replacing some special characters with '_'
      // We should do the same here
      Name := CONVERTSTR(Name,' ','_');
      Name := CONVERTSTR(Name,'\','_');
      Name := CONVERTSTR(Name,'/','_');
      Name := CONVERTSTR(Name,'''','_');
      Name := CONVERTSTR(Name,'"','_');
      Name := CONVERTSTR(Name,'.','_');
      Name := CONVERTSTR(Name,'(','_');
      Name := CONVERTSTR(Name,')','_');
      Name := CONVERTSTR(Name,'-','_');
      Name := CONVERTSTR(Name,':','_');

      Name := RemoveDoubleUnderscore(Name);

      EXIT(Name);
    END;

    LOCAL PROCEDURE RemoveDoubleUnderscore@33(Input@1000 : Text) : Text;
    VAR
      UnderscorePos@1001 : Integer;
    BEGIN
      WHILE STRPOS(Input,'__') <> 0 DO BEGIN
        UnderscorePos := STRPOS(Input,'__');
        Input := DELSTR(Input,UnderscorePos,2);
        Input := INSSTR(Input,'_',UnderscorePos);
      END;
      EXIT(Input);
    END;

    BEGIN
    END.
  }
}

