OBJECT Codeunit 1643 Hyperlink Manifest
{
  OBJECT-PROPERTIES
  {
    Date=25/10/16;
    Time=12:00:00;
    Version List=NAVW110.00;
  }
  PROPERTIES
  {
    TableNo=1610;
    OnRun=VAR
            AddinURL@1000 : Text;
          BEGIN
            AddInManifestManagement.UploadDefaultManifestText(Rec,ManifestText);
            AddInManifestManagement.SetCommonManifestItems(Rec);
            AddinURL := AddInManifestManagement.ConstructURL(OfficeHostType.OutlookHyperlink,'',Version);
            AddInManifestManagement.SetSourceLocationNodes(Rec,AddinURL,0);
            AddInManifestManagement.SetSourceLocationNodes(Rec,AddinURL,1);

            AddInManifestManagement.RemoveAddInTriggersFromManifest(Rec);
            SetHyperlinkAddinTriggers(Rec);
          END;

  }
  CODE
  {
    VAR
      SalesReceivablesSetup@1003 : Record 311;
      PurchasePayablesSetup@1001 : Record 312;
      AddInManifestManagement@1014 : Codeunit 1652;
      OfficeHostType@1004 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=10.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Hosts.OfficeHostType";
      AddinNameTxt@1000 : TextConst 'ENU=Document Links;ENG=Document Links';
      AddinDescriptionTxt@1002 : TextConst '@@@=%1 - Application Name;ENU=Provides a link directly to business documents in %1;ENG=Provides a link directly to business documents in %1';
      ManifestVersionTxt@1006 : TextConst '@@@={Locked};ENU=1.1.0.0;ENG=1.1.0.0';
      PurchaseOrderAcronymTxt@1005 : TextConst '@@@=US acronym for Purchase Order;ENU=PO;ENG=PO';

    PROCEDURE SetHyperlinkAddinTriggers@17(VAR OfficeAddin@1009 : Record 1610);
    VAR
      RegExText@1000 : Text;
    BEGIN
      // First add the number series rules
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPostedSalesInvoice),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPostedSalesCrMemo),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPostedPurchInvoice),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPostedPurchCrMemo),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPurchaseInvoice),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPurchaseOrder),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForSalesCrMemo),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForSalesInvoice),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForSalesOrder),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForSalesQuote),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPurchaseQuote),RegExText);
      RegExText := AddPrefixesToRegex(GetNoSeriesPrefixes(GetNoSeriesForPurchaseCrMemo),RegExText);

      // Wrap the prefixes in parenthesis to group them and fill out the rest of the RegEx:
      IF RegExText <> '' THEN BEGIN
        RegExText := STRSUBSTNO('(%1)([0-9]+)',RegExText);
        AddInManifestManagement.AddRegExRuleNode(OfficeAddin,'No.Series',RegExText);
      END;

      // Now add the text-based rules
      RegExText := 'invoice|order|quote|credit memo';
      RegExText := RegExText + '|' + GetNameForPurchaseInvoice;
      RegExText := RegExText + '|' + GetNameForPurchaseOrder;
      RegExText := RegExText + '|' + GetAcronymForPurchaseOrder;
      RegExText := RegExText + '|' + GetNameForSalesCrMemo;
      RegExText := RegExText + '|' + GetNameForSalesInvoice;
      RegExText := RegExText + '|' + GetNameForSalesOrder;
      RegExText := RegExText + '|' + GetNameForSalesQuote;
      RegExText := RegExText + '|' + GetNameForPurchaseQuote;
      RegExText := RegExText + '|' + GetNameForPurchaseCrMemo;

      RegExText :=
        STRSUBSTNO('(%1):? ?#?(%2)',RegExText,GetNumberSeriesRegex);
      AddInManifestManagement.AddRegExRuleNode(OfficeAddin,'DocumentTypes',RegExText);
    END;

    PROCEDURE GetNoSeriesForPurchaseCrMemo@10() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      EXIT(PurchasePayablesSetup."Credit Memo Nos.");
    END;

    PROCEDURE GetNoSeriesForPurchaseQuote@11() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      EXIT(PurchasePayablesSetup."Quote Nos.");
    END;

    PROCEDURE GetNoSeriesForPurchaseInvoice@3() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      EXIT(PurchasePayablesSetup."Invoice Nos.");
    END;

    PROCEDURE GetNoSeriesForPurchaseOrder@4() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      EXIT(PurchasePayablesSetup."Order Nos.");
    END;

    PROCEDURE GetNoSeriesForSalesCrMemo@5() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      EXIT(SalesReceivablesSetup."Credit Memo Nos.");
    END;

    PROCEDURE GetNoSeriesForSalesInvoice@6() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      EXIT(SalesReceivablesSetup."Invoice Nos.");
    END;

    PROCEDURE GetNoSeriesForSalesOrder@7() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      EXIT(SalesReceivablesSetup."Order Nos.");
    END;

    PROCEDURE GetNoSeriesForSalesQuote@8() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      EXIT(SalesReceivablesSetup."Quote Nos.");
    END;

    PROCEDURE GetNoSeriesForPostedSalesInvoice@25() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      EXIT(SalesReceivablesSetup."Posted Invoice Nos.");
    END;

    PROCEDURE GetNoSeriesForPostedSalesCrMemo@26() : Code[20];
    BEGIN
      SalesReceivablesSetup.GET;
      EXIT(SalesReceivablesSetup."Posted Credit Memo Nos.");
    END;

    PROCEDURE GetNoSeriesForPostedPurchInvoice@27() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      EXIT(PurchasePayablesSetup."Posted Invoice Nos.");
    END;

    PROCEDURE GetNoSeriesForPostedPurchCrMemo@28() : Code[20];
    BEGIN
      PurchasePayablesSetup.GET;
      EXIT(PurchasePayablesSetup."Posted Credit Memo Nos.");
    END;

    PROCEDURE GetPrefixForNoSeriesLine@33(VAR NoSeriesLine@1000 : Record 309) : Code[20];
    VAR
      NumericRegEx@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegExMatches@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      SeriesStartNo@1001 : Code[20];
      MatchText@1004 : Text;
      LowerMatchBound@1003 : Integer;
    BEGIN
      SeriesStartNo := NoSeriesLine."Starting No.";

      // Ensure that we have a non-numeric 'prefix' before the numbers and that we capture the last number group.
      // This ensures that we can generate a specific RegEx and not match all number sequences.

      NumericRegEx := NumericRegEx.Regex('[\p{Lu}\p{Lt}\p{Lo}\p{Lm}\p{Pc}' + RegExEscape('\_/#*+|-') + ']([0-9]+)$');
      RegExMatches := NumericRegEx.Matches(SeriesStartNo);

      // If we don't have a match, then the code is unusable for a RegEx as a number series
      IF RegExMatches.Count = 0 THEN
        EXIT('');

      MatchText := RegExMatches.Item(RegExMatches.Count - 1).Groups.Item(1).Value; // Get the number group from the match.
      LowerMatchBound := RegExMatches.Item(RegExMatches.Count - 1).Groups.Item(1).Index + 1 ; // Get the index of the group, adjust indexing for NAV.

      // Remove the number match - leaving only the prefix
      SeriesStartNo := DELSTR(SeriesStartNo,LowerMatchBound,STRLEN(MatchText));

      EXIT(SeriesStartNo);
    END;

    PROCEDURE GetNoSeriesPrefixes@16(NoSeriesCode@1000 : Code[20]) : Text;
    VAR
      NoSeriesLine@1012 : Record 309;
      NewPrefix@1015 : Text;
      Prefixes@1002 : Text;
    BEGIN
      // For the given series code - get the prefix for each line
      NoSeriesLine.SETRANGE("Series Code",NoSeriesCode);
      IF NoSeriesLine.FIND('-') THEN
        REPEAT
          NewPrefix := GetPrefixForNoSeriesLine(NoSeriesLine);
          IF NewPrefix <> '' THEN
            IF Prefixes = '' THEN
              Prefixes := RegExEscape(NewPrefix)
            ELSE
              Prefixes := STRSUBSTNO('%1|%2',Prefixes,RegExEscape(NewPrefix));
        UNTIL NoSeriesLine.NEXT = 0;

      EXIT(Prefixes);
    END;

    LOCAL PROCEDURE AddPrefixesToRegex@19(Prefixes@1000 : Text;RegExText@1001 : Text) : Text;
    BEGIN
      // Handles some logic around concatenating the prefixes together in a regex string
      IF Prefixes <> '' THEN
        IF RegExText = '' THEN
          RegExText := Prefixes
        ELSE
          RegExText := STRSUBSTNO('%1|%2',RegExText,Prefixes);
      EXIT(RegExText);
    END;

    PROCEDURE GetNameForPurchaseCrMemo@23() : Text;
    VAR
      PurchaseCreditMemo@1001 : Page 52;
    BEGIN
      EXIT(PurchaseCreditMemo.CAPTION);
    END;

    PROCEDURE GetNameForPurchaseInvoice@22() : Text;
    VAR
      PurchaseInvoice@1000 : Page 51;
    BEGIN
      EXIT(PurchaseInvoice.CAPTION);
    END;

    PROCEDURE GetNameForPurchaseOrder@21() : Text;
    VAR
      PurchaseOrder@1000 : Page 50;
    BEGIN
      EXIT(PurchaseOrder.CAPTION);
    END;

    PROCEDURE GetAcronymForPurchaseOrder@32() : Text;
    BEGIN
      EXIT(PurchaseOrderAcronymTxt);
    END;

    PROCEDURE GetNameForPurchaseQuote@20() : Text;
    VAR
      PurchaseQuote@1000 : Page 49;
    BEGIN
      EXIT(PurchaseQuote.CAPTION);
    END;

    PROCEDURE GetNameForSalesCrMemo@18() : Text;
    VAR
      SalesCreditMemo@1000 : Page 44;
    BEGIN
      EXIT(SalesCreditMemo.CAPTION);
    END;

    PROCEDURE GetNameForSalesInvoice@15() : Text;
    VAR
      SalesInvoice@1000 : Page 43;
    BEGIN
      EXIT(SalesInvoice.CAPTION);
    END;

    PROCEDURE GetNameForSalesOrder@2() : Text;
    VAR
      SalesOrder@1000 : Page 42;
    BEGIN
      EXIT(SalesOrder.CAPTION);
    END;

    PROCEDURE GetNameForSalesQuote@1() : Text;
    VAR
      SalesQuote@1000 : Page 41;
    BEGIN
      EXIT(SalesQuote.CAPTION);
    END;

    PROCEDURE GetNameForPostedSalesInvoice@9() : Text;
    VAR
      PostedSalesInvoices@1000 : Page 143;
    BEGIN
      EXIT(PostedSalesInvoices.CAPTION);
    END;

    PROCEDURE GetNameForPostedSalesCrMemo@12() : Text;
    VAR
      PostedSalesCreditMemos@1000 : Page 144;
    BEGIN
      EXIT(PostedSalesCreditMemos.CAPTION);
    END;

    PROCEDURE GetNameForPostedPurchInvoice@14() : Text;
    VAR
      PostedPurchaseInvoices@1000 : Page 146;
    BEGIN
      EXIT(PostedPurchaseInvoices.CAPTION);
    END;

    PROCEDURE GetNameForPostedPurchCrMemo@24() : Text;
    VAR
      PostedPurchaseCreditMemos@1000 : Page 147;
    BEGIN
      EXIT(PostedPurchaseCreditMemos.CAPTION);
    END;

    LOCAL PROCEDURE RegExEscape@31(RegExText@1000 : Text) : Text;
    VAR
      RegEx@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
    BEGIN
      // Function to escape some special characters in a regular expression character class:
      EXIT(RegEx.Escape(RegExText));
    END;

    PROCEDURE GetNumberSeriesRegex@29() : Text;
    BEGIN
      EXIT(STRSUBSTNO('[\w%1]*[0-9]+',RegExEscape('_/#*+\|-')));
    END;

    PROCEDURE ManifestText@30() Value : Text;
    BEGIN
      Value :=
        '<?xml version="1.0" encoding="utf-8"?>' +
        '<!--Created:cbbc9d22-5cf7-4e4c-8ee9-42a772aae58a-->' +
        '<OfficeApp xsi:type="MailApp" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
        ' xmlns="http://schemas.microsoft.com/office/appforoffice/1.1">' +
        '  <Id>cf6f2e6a-5f76-4a17-b966-2ed9d0b3e88a</Id>' +
        '  <Version>' + ManifestVersionTxt + '</Version>' +
        '  <ProviderName>Microsoft</ProviderName>' +
        '  <DefaultLocale>en-US</DefaultLocale>' +
        '  <DisplayName DefaultValue="' + AddinNameTxt + '" />' +
        '  <Description DefaultValue="' +
        STRSUBSTNO(AddinDescriptionTxt,AddInManifestManagement.XMLEncode(PRODUCTNAME.SHORT)) + '" />' +
        '  <IconUrl DefaultValue="WEBCLIENTLOCATION/Resources/Images/OfficeAddinLogo.png"/>' +
        '  <HighResolutionIconUrl DefaultValue="WEBCLIENTLOCATION/Resources/Images/OfficeAddinLogoHigh.png"/>' +
        '  <AppDomains>' +
        '    <AppDomain>WEBCLIENTLOCATION</AppDomain>' +
        '  </AppDomains>' +
        '  <Hosts>' +
        '    <Host Name="Mailbox" />' +
        '  </Hosts>' +
        '  <Requirements>' +
        '    <Sets>' +
        '      <Set Name="MailBox" MinVersion="1.1" />' +
        '    </Sets>' +
        '  </Requirements>' +
        '  <FormSettings>' +
        '    <Form xsi:type="ItemRead">' +
        '      <DesktopSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '        <RequestedHeight>300</RequestedHeight>' +
        '      </DesktopSettings>' +
        '      <TabletSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '        <RequestedHeight>300</RequestedHeight>' +
        '      </TabletSettings>' +
        '      <PhoneSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '      </PhoneSettings>' +
        '    </Form>' +
        '    <Form xsi:type="ItemEdit">' +
        '      <DesktopSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '      </DesktopSettings>' +
        '      <TabletSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '      </TabletSettings>' +
        '      <PhoneSettings>' +
        '        <SourceLocation DefaultValue="" />' +
        '      </PhoneSettings>' +
        '    </Form>' +
        '  </FormSettings>' +
        '  <Permissions>ReadWriteItem</Permissions>' +
        '  <Rule xsi:type="RuleCollection" Mode="And">' +
        '    <Rule xsi:type="RuleCollection" Mode="Or">' +
        '      <!-- To add more complex rules, add additional rule elements -->' +
        '      <!-- E.g. To activate when a message contains an address -->' +
        '      <!-- <Rule xsi:type="ItemHasKnownEntity" EntityType="Address" /> -->' +
        '    </Rule>' +
        '    <Rule xsi:type="RuleCollection" Mode="Or">' +
        '      <Rule xsi:type="ItemIs" FormType="Edit" ItemType="Message" />' +
        '      <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />' +
        '    </Rule>' +
        '' +
        '  </Rule>' +
        '</OfficeApp>';
    END;

    BEGIN
    END.
  }
}

